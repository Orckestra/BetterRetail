@inherits RazorFunction
@using Orckestra.Composer.SearchQuery.Context
@using Orckestra.Composer.Search.Facets
@using Orckestra.Overture.ServiceModel.SearchQueries

@functions {
    public override string FunctionDescription
    {
        get { return "Facets for Product Set Page"; }
    }


    [FunctionParameter(Label = "Query Name", Help = "Query Name", WidgetMarkup = Orckestra.ExperienceManagement.SearchQueryBuilder.Widgets.ProductSetQuerySelector)]
    public string QueryName { get; set; }

    public ISearchQueryContext RequestContext { get; set; }

}
@{
    var browsingViewModel = RequestContext.GetSearchQueryViewModelAsync(SearchQueryType.ProductSet, QueryName).Result;
    if (browsingViewModel == null)
    {
        return;
    }

    var facets = browsingViewModel.ProductSearchResults.Facets;

    if (facets == null || facets.Count == 0)
    {
        return;
    };

}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0">
<head>
</head>
<body>
    <div data-oc-controller="Product.FacetSearch" data-corrected-search-term="@browsingViewModel.ProductSearchResults.CorrectedSearchTerms">
        <form name="searchFacets">
            @if (browsingViewModel.ProductSearchResults.PromotedFacetValues != null &&
                browsingViewModel.ProductSearchResults.PromotedFacetValues.Count > 0)
            {
                @FacetHelpers.PromotedFacetValues(browsingViewModel.ProductSearchResults.PromotedFacetValues)
            }

            @foreach (var facet in facets)
            {
                if (!facet.IsDisplayed)
                {
                    continue;
                }

                <div class="card  bg-light  mb-3  facets-card"
                     data-facetfieldname="@facet.FieldName"
                     data-facettype="@facet.FacetType"
                     data-min="@facet.StartValue"
                     data-max="@facet.EndValue"
                     data-step="@facet.GapSize"
                     data-max-label="@Html.Localize("List-Search", "L_RangeAll")">
                    <div class="card-body"
                         data-qa="search-refiner">
                        <h5>@facet.Title</h5>
                        @if (facet.FacetType == FacetType.Range)
                        {
                            @FacetHelpers.RangeFacet(facet)
                        }

                        @if (facet.FacetType == FacetType.MultiSelect)
                        {

                            foreach (var facetValue in facet.FacetValues)
                            {
                                @FacetHelpers.MultiSelectFacet(facetValue, facet)
                            }
                        }

                        @if (facet.FacetType == FacetType.SingleSelect)
                        {
                            foreach (var facetValue in facet.FacetValues)
                            {
                                @FacetHelpers.SingleFacet(facetValue, facet);
                            }
                        }

                        @if (facet.FacetType != FacetType.Range && facet.OnDemandFacetValues != null && facet.OnDemandFacetValues.Count > 0)
                        {
                            @FacetHelpers.ShowMoreLessFacets(facet)
                        }
                    </div>
                </div>
            }
        </form>
    </div>
</body>
</html>