@inherits Composer.Razor.ComposerRazorFunction
@using Orckestra.Composer.SearchQuery.Context
@using Orckestra.Overture.ServiceModel.SearchQueries
@using Orckestra.Composer.SearchQuery.ViewModels

@functions {
    public override string FunctionDescription
    {
        get { return "Display dynamic product highlight"; }
    }
    public ISearchQueryContext SearchQueryContext { get; set; }

    [FunctionParameter(Label = "Query Name", Help = "Query Name", WidgetMarkup = Orckestra.ExperienceManagement.SearchQueryBuilder.Widgets.MerchandisingQuerySelector)]
    public string QueryName { get; set; }

    [FunctionParameter(Label = "Total number of products", Help = "", DefaultValue = 8)]
    public int Number { get; set; }

    [FunctionParameter(Label = "Number of products to display per row", Help = "For Carousel View this is a number of visible slides. For Grid View the valid numbers are 1,2,3,4 and 6. Others will be ignored and default is used.", DefaultValue = 4)]
    public int NumberPerRow { get; set; }

    [FunctionParameter(Label = "Is Carousel View", DefaultValue = true)]
    public Boolean IsCarouselView { get; set; }

    [FunctionParameter(Label = "Show More Button Text", DefaultValue = "Show More")]
    public string PageTitle { get; set; }

    [FunctionParameter(Label = "Show More Button Url", WidgetMarkup = @"<f:widgetfunction xmlns:f='http://www.composite.net/ns/function/1.0' name='Composite.Widgets.DataReference.OptionalPageSelector' />", DefaultValue = null)]
    public Guid? Page { get; set; }


	private string getVueId()
    {
        return $"vue{Guid.NewGuid().GetHashCode()}";
    }
}

@{
    var queryViewModel = SearchQueryContext.GetTopSearchQueryViewModelAsync(SearchQueryType.Merchandising, QueryName, Number).Result;
    if (queryViewModel.ProductSearchResults.TotalCount <= 0)
    {
        return;
    }
    var FallbackImageUrl = queryViewModel.ProductSearchResults.SearchResults.FirstOrDefault()?.FallbackImageUrl;
    int[] validNumbersPerGridRaw = new int[] { 1, 2, 3, 4, 6 };
    NumberPerRow = IsCarouselView ? NumberPerRow : (Array.IndexOf(validNumbersPerGridRaw, NumberPerRow) > 0 ? NumberPerRow : 4);
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0" xmlns:v-bind="v-bind" xmlns:v-on="v-on">
<head>
  @GeneralHelpers.RenderFallbackImageScript(FallbackImageUrl)
</head>
<body>
    <div class="mt-2 mb-3">
        @if (IsCarouselView)
        {
            @Html.LazyFunction("Composer.Queries.Instant.TopCarousel", new
            {
                JsonContext = queryViewModel.JsonContext,
                VueId = getVueId(),
                SlidesToShow = NumberPerRow
            })
        }
        else
        {
            @Function("Composer.Search.Products.ProductResultsVue", new
            {
                VueId = getVueId(),
                JsonContext = queryViewModel.JsonContext,
                FallbackImageUrl = FallbackImageUrl,
                ColumnsStyle = "col-6  col-sm-" + 12 / NumberPerRow
            })
        }
        @if (Page != null)
        {
            <div class="text-center my-2">
                <a href="~/page(@Page)" class="btn btn-primary">@PageTitle</a>
            </div>
        }
    </div>
</body>
</html>

