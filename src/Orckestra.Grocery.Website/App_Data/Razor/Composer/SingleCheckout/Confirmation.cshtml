@inherits Composer.Razor.ComposerRazorFunction
@using Orckestra.Composer.Providers;
@using Orckestra.Composer.Parameters;
@using System.Threading;
@using Composite.Core.WebClient.Renderings.Page;
@using Orckestra.Composer.MyAccount.Services;
@using Orckestra.Composer.MyAccount.ViewModels;
@using Orckestra.Composer.Grocery.Providers;
@using Orckestra.Composer.Cart;
@using Orckestra.Composer.Grocery.Parameters;
@using Orckestra.Overture.ServiceModel.Orders

@functions {
    public override string FunctionDescription
    {
        get { return "Checkout Confirmation"; }
    }

    public ICartUrlProvider CartUrlProvider { get; set; }

    public IComposerContext ComposerContext { get; set; }

    public IMembershipViewService MembershipViewService { get; set; }

    public override bool PreventFunctionOutputCaching { get { return true; } }

    public IStoreAndFulfillmentSelectionProvider StoreAndFulfillmentSelectionProvider { get; set; }

    [FunctionParameter(Label = "Confirmation Top Message")]
    public XhtmlDocument confirmationTopMessage { get; set; }
}

@{
    var isPreview = PageRenderer.RenderingReason == RenderingReason.C1ConsoleBrowserPageView;
    var redirectUrl = isPreview ? null : CartUrlProvider.GetCartUrl(new BaseUrlParameter
    {
        CultureInfo = Thread.CurrentThread.CurrentCulture
    });

    StoreAndFulfillmentSelectionProvider.ClearTimeSlotSelection();

    StoreAndFulfillmentSelectionProvider.RecoverSelection(new RecoverSelectionDataParam
    {
        CultureInfo = ComposerContext.CultureInfo,
        CustomerId = ComposerContext.CustomerId,
        IsAuthenticated = ComposerContext.IsAuthenticated,
        CartName = CartConfiguration.ShoppingCartName
    }).GetAwaiter().GetResult();
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0" xmlns:v-bind="v-bind" xmlns:v-on="v-on">
<head>
    <script id="vuejs" src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
</head>
<body>
    @*CompleteCheckoutViewModel is used as model to render data with Vue Js *@
    <div class="row">
        <div class="col-lg-12">
            <div id="vueCheckoutOrderConfirmation" v-if="OrderDetails"
                 @if (!isPreview) { <text> v-cloak="true" </text> }
                 data-oc-controller="SingleCheckout.OrderConfirmation"
                 data-redirectUrl="@redirectUrl">

                @Html.Raw(@confirmationTopMessage)

                @DisplayOrderInformation()

                <div class="row">
                    <div class="col-lg-8">
                        @DisplayOrderDetails()
                    </div>
                    <div class="col-lg-4">
                        @DisplayOrderSummary()
                    </div>
                </div>
                <div class="col-lg-8">
                    @CreateAccountForm()
                </div>
            </div>
        </div>
    </div>
</body>
</html>

@helper DisplayOrderInformation()
{
    <div class="card-deck">
        <div class="card">
            <div class="card-header">
                <h3 class="m-0"><i class="fa fa-user fa-sm mr-2"></i>@Html.Localize("Grocery", "T_CustomerDetails")</h3>
            </div>
            <div class="card-body">
                <h6 class="mb-0">{{CustomerFirstName}} {{CustomerLastName}}</h6>
                <p class="card-text mb-0">{{CustomerEmail}}</p>
                <hr class="mb-2" />
                <h6 class="mb-1">@Html.Localize("MyAccount", "T_BillingAddress")</h6>
                @DisplayAddress("OrderDetails.BillingAddress")
            </div>
        </div>
        <div class="card">
            <div class="card-header">
                <h3 class="m-0" v-if="OrderDetails.Shipments[0].ShippingMethod.FulfillmentMethodType == '@(FulfillmentMethodType.PickUp)'"><i class="fa fa-store-alt fa-sm mr-2"></i>@Html.Localize("Grocery", "T_FulfillmentMethodTitle_PickUp")</h3>
                <h3 class="m-0" v-else="else"><i class="fa fa-truck fa-sm mr-2"></i>@Html.Localize("Grocery", "T_FulfillmentMethodTitle_Shipping")</h3>
            </div>
            <div class="card-body">
                <div v-if="OrderDetails.Shipments[0].ShippingMethod.FulfillmentMethodType == '@(FulfillmentMethodType.PickUp)'">
                    <h6 class="mb-2">{{Fulfillment.Store.LocalizedDisplayName}}</h6>
                    @DisplayAddress("Fulfillment.Store.Address", false, false)
                </div>
                <div v-else="else">
                    @DisplayAddress("OrderDetails.Shipments[0].ShippingAddress")
                </div>
                <hr />
                <h6 class="font-weight-bold">@Html.Localize("Grocery", "T_SelectedTimeSlot")</h6>
                <p class="card-text mb-3">
                    {{TimeslotInfo.LocalizedSlotDate}}<br />
                    @Html.Localized("Grocery", "L_TimeSlotRow", "{{TimeslotInfo.LocalizedSlotBeginTime}}", "{{TimeslotInfo.LocalizedSlotEndTime}}")
                </p>
            </div>
        </div>
        <div class="card" v-if="OrderDetails.Shipments[0].ShippingMethod.FulfillmentMethodType != 1">
            <div class="card-header">
                <h3 class="m-0"><i class="fa fa-store-alt fa-sm mr-2"></i>@Html.Localize("Grocery", "T_StoreInformation")</h3>
            </div>
            <div class="card-body">
                <h6 class="mb-2">{{Fulfillment.Store.LocalizedDisplayName}}</h6>
                @DisplayAddress("Fulfillment.Store.Address", false, false)
            </div>
        </div>
    </div>

}

@helper DisplayAddress(string vueBinding, bool showAddressName = true, bool showName = true)
{
    <div>
        @if (showAddressName)
        {
            <h6 class="mb-1">{{@(vueBinding).AddressName}}</h6>

        }
        @if (showName)
        {
            <h6 v-if="@(vueBinding).FirstName != CustomerFirstName || @(vueBinding).LastName != CustomerLastName">{{@(vueBinding).FirstName}} {{@(vueBinding).LastName}}</h6>

        }
        <p class="card-text mb-2">
            {{@(vueBinding).Line1}}<br />
            {{@(vueBinding).Line2}}<br v-if="@(vueBinding).Line2" />
            {{@(vueBinding).City}}, {{@(vueBinding).RegionName}}<br />
            {{@(vueBinding).PostalCode}}<br />
            {{@(vueBinding).CountryCode}}
        </p>
        <p class="card-text">{{@(vueBinding).PhoneNumber}}</p>
    </div>

}

@helper DisplayOrderSummary()
{
    <div v-if="OrderSummary" class="card mt-4">
        <div class="card-header">
            <h3 class="m-0">
                @Html.Localize("ShoppingCart", "T_OrderSummary")
            </h3>
        </div>
        <div class="card-body">
            @OrderSummaryHelpers.Totals()
            <hr class="mb-2" />

            @OrderSummaryHelpers.SubTotal()

            @OrderSummaryHelpers.Rewards()

            @OrderSummaryHelpers.TaxableShipmentAdditionalFeeSummary()

            @OrderSummaryHelpers.TaxableAdditionalFeeSummary()

            <div v-if="OrderSummary.IsShippingTaxable">
                @ShippingFee()
            </div>

            @OrderSummaryHelpers.Taxes()

            @OrderSummaryHelpers.NotTaxableShipmentAdditionalFeeSummary()

            @OrderSummaryHelpers.NotTaxableAdditionalFeeSummary()

            <div v-if="!OrderSummary.IsShippingTaxable">
                @ShippingFee()
            </div>

            <hr />
            <h6>@Html.Localize("CheckoutProcess", "PaymentDetails")</h6>
            <p class="card-text">
                @Html.Localize("MyAccount", "L_PaymentMethod"): {{OrderDetails.Payments[0].PaymentMethodName}}
            </p>
            <p class="card-text" v-if="OrderDetails.Payments[0].CreditCardNumber">
                @Html.Localize("MyAccount", "L_CreditCardNumber") {{OrderDetails.Payments[0].CreditCardNumber}}
                <br />
                @Html.Localize("MyAccount", "L_CreditCardExpires") {{OrderDetails.Payments[0].ExpiryDate}}
            </p>
        </div>
    </div>
}

@helper ShippingFee()
{
    <div class="row  mb-2">
        <div class="col-6  col-md-7">
            <span>
                @Html.Localize("ShoppingCart", "L_ShippingFee")
            </span>
        </div>
        <div class="col-6  col-md-5  text-right">
            <span>
                {{OrderSummary.Shipping}}
            </span>
        </div>
    </div>
}

@helper DisplayOrderDetails()
{
    <div class="card mt-4" data-qa="confirmation-order-details">
        <div class="card-header">
            <div class="row">
                <div class="col-sm-8">
                    <h3 class="m-0">@Html.Localize("MyAccount", "T_OrderDetails")</h3>
                </div>
                <div class="col-sm-4 text-sm-right">
                    <a v-if="IsAuthenticated" data-qa="confirmation-order-details-link" v-bind:href="Order.Url" class="cta">@Html.Localize("CheckoutProcess", "H_OrderDetail")</a>
                    <a v-else="v-else" data-qa="confirmation-order-details-link" href="#" v-on:click.prevent="findMyOrder" class="cta">@Html.Localize("CheckoutProcess", "H_OrderDetail")</a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div v-for="(item, index) in LineItems"
                 v-bind:key="item.Id"
                 v-bind:class="{'border-bottom pb-2': index != LineItems.length - 1, 'pt-3': index != 0, 'pt-1': index == 0}">
                <div v-if="item.IsGiftItem" class="row pt-0 giftitem">
                    <i class="fa fa-gift" /><p>@Html.Localize("ShoppingCart", "L_GiftItem")</p>
                </div>
                <div class="row">
                    <div v-if="item.Rewards &amp;&amp; item.Rewards.length" class="col-12 order-1  text-center">
                        @CartSummaryHelpers.CartItemRewardsCell()
                    </div>
                    <div class="col-2 col-sm-1  order-2">
                        @CartSummaryHelpers.CartItemImageCell()
                    </div>
                    <div class="col-8 col-sm-4  order-3">
                        @CartSummaryHelpers.CartItemSummaryCell()
                    </div>
                    <div class="col-sm-2  text-center d-none d-sm-block order-4">
                        @CartSummaryHelpers.CartItemDefaultPriceCell()
                    </div>
                    <div class="offset-2 offset-sm-0 2 col-sm-3 col-7  text-center text-sm-center order-6">
                        <div class="text-center">
                            <p>{{item.Quantity}}</p>
                        </div>
                    </div>
                    <div class="offset-2 offset-sm-0 col-sm-2 text-left text-sm-center order-7">
                        @CartSummaryHelpers.CartItemTotalCell()
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@helper CreateAccountForm()
{
    var passwordPatternViewModel = new PasswordPatternViewModel();
    MembershipViewService.SetPasswordValidationRules(passwordPatternViewModel);

    <form v-if="ShowCreateAccountForm" method="post" class="mt-4" id="formCreateAccount"
          data-password-pattern="@passwordPatternViewModel.PasswordRegexPattern"
          data-password-length="@passwordPatternViewModel.MinRequiredPasswordLength">
        <h3>@Html.Localize("CheckoutProcess", "T_SaveInformation")</h3>
        <p>@Html.Localize("CheckoutProcess", "L_CreateAccountForFastCheckout")</p>
        <div class="form-row align-items-end">
            <div class="form-group col-md-6">
                <label for="Password">@Html.Localize("Forms", "F_Password") *</label>
                <input v-model="Password"
                       id="Password"
                       name="Password"
                       data-qa="information-password-input"
                       v-bind:disabled="IsLoading"
                       v-on:input="onChangePassword"
                       v-bind:type="ShowPassword ? 'text' : 'password'"
                       class="form-control"
                       required="required"
                       data-parsley-errors-container=".password-errors"
                       data-parsley-length="[@passwordPatternViewModel.MinRequiredPasswordLength, 256]"
                       data-parsley-pattern="@passwordPatternViewModel.PasswordRegexPattern"
                       @Html.ParsleyMessage("Forms", "F_PasswordRequiredError", "required-message")
                       @Html.ParsleyMessage("Forms", "F_PasswordLengthError", "length-message")
                       @Html.ParsleyMessage("Forms", "F_PasswordPatternError", "pattern-message", passwordPatternViewModel.MinRequiredNonAlphanumericCharacters)
                       @Html.HelpBubble("Forms", "F_PasswordIndication", passwordPatternViewModel.MinRequiredPasswordLength) />
            </div>
            <div class="form-group p-2 col-auto">
                <a href="#" role="button" v-on:click.prevent="showPasswordToggle" class="text-decoration-none">
                    <strong v-if="ShowPassword"><i class="fa fa-eye-slash"></i> @Html.Localize("Forms", "L_HidePassword")</strong>
                    <strong v-else="v-else"><i class="fa fa-eye"></i> @Html.Localize("Forms", "L_ShowPassword")</strong>
                </a>
            </div>
            <div class="form-group col-12 password-errors mt-n2"></div>
        </div>
        @Forms.Validations.PasswordStrengthMessage("PasswordStrength")
        <div class="row">
            <div class="col-12 mt-3">
                <button class="btn btn-success text-uppercase" v-on:click.prevent="createAccount" v-bind:disabled="IsLoading">
                    @Html.Localize("MyAccount", "B_CreateAccount")
                </button>
            </div>
        </div>
    </form>
}