@inherits Composer.Razor.ComposerRazorFunction
@using Orckestra.Composer.Store.Services;
@using Orckestra.Composer.Store.Parameters;
@using Orckestra.Composer.Utils;


@functions {
    public IStoreLocatorViewService StoreLocatorViewService { get; set; }
    public IComposerContext ComposerContext { get; set; }

    public override string FunctionDescription
    {
        get { return "Store Locator"; }
    }

    [FunctionParameter(Label = "Page Size", Help = "The max count of the items to show in the list.", DefaultValue = 9)]
    public int PageSize { get; set; }

    [FunctionParameter(Label = "Show Store Details Link", Help = "Show link to store details page in the result tile.", DefaultValue = true)]
    public bool ShowLinkToDetails { get; set; }

    [FunctionParameter(Label = "Can Select Store", Help = "When true, the select button is shown in the result tile.", DefaultValue = false)]
    public bool CanSelectStore { get; set; }
}

@{
    var param = new GetEmptyStoreLocatorViewModelParam
    {
        CultureInfo = ComposerContext.CultureInfo,
        BaseUrl = RequestUtils.GetBaseUrl(Request.Url, Request.ApplicationPath).ToString(),
    };

    var storeLocatorViewModel = StoreLocatorViewService.GetEmptyStoreLocatorViewModel(param);

    if (!string.IsNullOrWhiteSpace(Request["storeDirectorySearchInput"]))
    {
        storeLocatorViewModel.PostedAddress = Request["storeDirectorySearchInput"];
    }
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0" xmlns:v-bind="v-bind" xmlns:v-on="v-on">
<head>
</head>
<body>
    <div id="storeLocator" data-oc-controller="Store.Locator" class="store-locator w-100" data-pagesize="@PageSize">
        <div class="container-md">
            <div class="mt-3 mb-2">
                @SearchStoreInput(@storeLocatorViewModel.PostedAddress)
            </div>
        </div>
        <div class="container-fluid">
            @Map()
        </div>
        <div class="container-md">
            <div class="row">
                <div class="col-12  clearfix  store-locator-info">
                    <div id="store-locator-nearest" class="d-none float-lg-left float-xl-left">
                        @Html.Localize("Store", "L_NearestStore")
                    </div>
                    <div class="float-lg-right float-xl-right">
                        <a href="@storeLocatorViewModel.StoresDirectoryUrl">
                            @Html.Localize("Store", "H_ViewAllStores")
                        </a>
                    </div>
                </div>
            </div>

            @Function("Composer.Store.List", new
            {
                CanSelectStore = CanSelectStore,
                ShowMap = ShowLinkToDetails,
                ShowItineraryLink = ShowLinkToDetails
            })
        </div>
    </div>
</body>
</html>

@helper SearchStoreInput(string postedAddress)
{
    <div v-if="StoreLocatorLocationError" class="text-danger mb-2">@Html.Localize("Store", "L_MyLocationError")</div>
    <div class="form-group form-row align-items-center">
        <div class="col-12 col-md-6 col-lg-4 mb-2 mb-md-0">
            <input id="storeLocatorSearchInput"
                   name="storeLocatorSearchInput"
                   class="form-control" type="text"
                   placeholder="@Html.Localize("Store", "I_Placeholder")"
                   value="@postedAddress" />
            <i class="fa fa-search text-muted store-locator-search-icon" />
        </div>
        <span class="col-auto">- @Html.Localize("Store", "L_OrUseMyLocation") -</span>
        <div class="col-auto">
            <button v-on:click.prevent="currentLocationAction"
                    class="btn btn-primary geolocate-btn">
                <i class="fa fa-crosshairs" />
                @Html.Localize("Store", "B_UseMyLocation")
            </button>
        </div>
    </div>
}

@helper Map()
{
    <div id="map" class="map"></div>
}