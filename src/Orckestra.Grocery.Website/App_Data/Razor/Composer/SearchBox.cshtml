@inherits RazorFunction
@using Orckestra.Composer.CompositeC1.Services;
@using Orckestra.Composer.Services;
@using Orckestra.ExperienceManagement.Configuration;
@inherits Composer.Razor.ComposerRazorFunction


@functions {
    public IPageService PageService { get; set; }
    public IComposerContext ComposerContext { get; set; }
    public ISiteConfiguration SiteConfiguration { get; set; }

    [FunctionParameter(Label = "Autocomplete", Help = "Enable autocomplete suggestions", DefaultValue = false)]
    public bool Autocomplete { get; set; }

    [FunctionParameter(Label = "Categories", Help = "Enable categories suggestions", DefaultValue = true)]
    public bool Categories { get; set; }

    [FunctionParameter(Label = "Brands", Help = "Enable brands suggestions", DefaultValue = true)]
    public bool Brands { get; set; }

    [FunctionParameter(Label = "SearchTerms", Help = "Enable search terms suggestions", DefaultValue = true)]
    public bool SearchTerms { get; set; }

    [FunctionParameter(Label = "MaxProductsAutocompleteCount", Help = "Maximum autocomplete result count", DefaultValue = 5)]
    public int MaxProductsAutocompleteCount { get; set; }

    [FunctionParameter(Label = "MaxSearchTermsSuggestionsCount", Help = "Maximum search terms suggestions count", DefaultValue = 5)]
    public int MaxSearchTermsSuggestionsCount { get; set; }

    [FunctionParameter(Label = "MaxCategoriesSuggestionsCount", Help = "Maximum categories suggestions count", DefaultValue = 4)]
    public int MaxCategoriesSuggestionsCount { get; set; }

    [FunctionParameter(Label = "MaxBrandSuggestionsCount", Help = "Maximum brand suggestions count", DefaultValue = 3)]
    public int MaxBrandSuggestionsCount { get; set; }

    [FunctionParameter(Label = "MinimumCharactersNumber", Help = "Number of characters before showing suggestions", DefaultValue = 3)]
    public int MinimumCharactersNumber { get; set; }

    [FunctionParameter(Label = "CategorySuggestionsAsCategoryPages", Help = "If False, category suggestions reference the the Search page with pre-selected category facets. Otherwise, they reference to the Category Page if exists. If there are no category page, then suggestion will be absent.", DefaultValue = true)]
    public bool CategorySuggestionsAsCategoryPages { get; set; }

}

@{
    var cultureInfo = ComposerContext.CultureInfo;
    var searchPageId = SiteConfiguration.GetPagesConfiguration().SearchPageId;

    var keywords = Request.QueryString["keywords"] ?? string.Empty;
    var actionTarget = PageService.GetRendererPageUrl(searchPageId, cultureInfo);
    var dataController = Autocomplete ? "General.AutocompleteSearchBoxVue" : "General.SearchBox";
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0" xmlns:v-bind="v-bind" xmlns:v-on="v-on" xmlns:v-slot="v-slot">
<head>
</head>
<body>
    <div id="search-box" class="search-box" data-oc-controller="@dataController">

        <form method="GET" action="@actionTarget" id="frm-search-box">
            <div id="vueAutocomplete"
                 keywords="@keywords"
                 categories-enable="@Categories"
                 brands-enable="@Brands"
                 search-terms-enable="@SearchTerms"
                 autocomplete-limit="@MaxProductsAutocompleteCount"
                 search-terms-limit="@MaxSearchTermsSuggestionsCount"
                 categories-limit="@MaxCategoriesSuggestionsCount"
                 brand-limit="@MaxBrandSuggestionsCount"
                 min-search-size="@MinimumCharactersNumber"
                 category-suggestions-as-pages="@CategorySuggestionsAsCategoryPages"
                 class="form-row">

                <div class="input-group">
                    <vue-autosuggest xmlns:v-on="v-on"
                                     xmlns:v-bind="v-bind"
                                     ref="autosuggest"
                                     v-model="query"
                                     v-on:input="fetchResults"
                                     v-on:opened="onOpened"
                                     v-on:closed="onClosed"
                                     v-bind:input-props="{
                                            id: 'autosuggest__input',
                                            placeholder: '@Html.Localize("List-Search", "F_SearchWaterMark")',
                                            class: 'form-control',
                                            name: 'keywords'
                                         }"
                                     v-bind:suggestions="suggestions"
                                     v-bind:section-configs="sectionConfigs"
                                     v-bind:get-suggestion-value="getSuggestionValue"
                                     v-bind:should-render-suggestions="shouldRenderSuggestions"
                                     v-bind:component-attr-class-autosuggest-results="'autosuggest__results ' + (isEmptyRight ? 'empty-right' : '')">

                        <template v-slot:before-section-autocomplete="{ section }">
                            <div class="card-header col-12 mb-2">@Html.Localize("General", "L_Suggest_PossibleMatches")</div>
                        </template>

                        <template v-slot:before-section-suggestbrands="{ section }">
                            <div v-if="section.data.length" class="card-header col-12 mb-2">@Html.Localize("General", "L_Suggest_Brands")</div>
                        </template>

                        <template v-slot:before-section-suggestcategories="{ section }">
                            <div v-if="section.data.length" class="card-header col-12 mb-2">@Html.Localize("General", "L_Suggest_Categories")</div>
                        </template>

                        <template v-slot:before-section-suggestterms="{ section }">
                            <div v-if="section.data.length" class="card-header col-12 mb-2">@Html.Localize("General", "L_Suggest_Suggestions")</div>
                        </template>

                        <template slot-scope="{ suggestion, index }">
                            <div v-if="suggestion.name === 'autocomplete'" class="d-flex border-bottom py-2">
                                <div class="col-2 p-0 col-sm-2 px-sm-1">
                                    <a class="product-tile-media"
                                       v-on:mouseup.stop=""
                                       v-bind:href="suggestion.item.Url">
                                        <img class="img-fluid"
                                             v-bind:src="suggestion.item.ImageUrl"
                                             v-bind:alt="suggestion.item.FullDisplayName"
                                             v-on:error="onImageError($event, suggestion)" />
                                    </a>
                                </div>
                                <div class="col-10 col-sm-10">
                                    <div class="row h-100 align-items-center">
                                        <div class="col-6 col-sm-8">

                                            <div class="product-tile-text">
                                                <span data-qa="search-product-brand" v-if="suggestion.item.BrandDisplayName">{{suggestion.item.BrandDisplayName}}<br /></span>
                                                <span data-qa="search-product-brand" v-else-if="suggestion.item.Brand">{{suggestion.item.Brand}}</span>
                                                <a data-qa="search-product-title"
                                                   class="suggestion-title"
                                                   v-on:mouseup.stop=""
                                                   v-bind:href="suggestion.item.Url"
                                                   v-bind:title="suggestion.item.FullDisplayName"
                                                   v-html="suggestion.item.mappedDisplayName"></a>
                                            </div>
                                            <div class="product-tile-special-price">
                                                <del v-if="suggestion.item.IsOnSale">{{suggestion.item.DisplayListPrice}}</del>
                                            </div>
                                            <div class="product-tile-price">
                                                <span v-if="suggestion.item.IsOnSale" class="h4  text-danger" data-qa="search-product-price">{{suggestion.item.DisplaySpecialPrice}}</span>
                                                <span v-else="v-else" class="h4" data-qa="search-product-price">{{suggestion.item.DisplayListPrice}}</span>
                                            </div>
                                        </div>
                                        <div class="col-6 p-0 col-sm-4 px-sm-1">
                                            @ProductHelpers.AddToCartButtonWithQuantity("suggestion.item", "true", @Html.Localize("General", "B_AddToCartProductSuggestion"))
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div v-else="v-else" class="m-2">
                                <a v-html="suggestion.item.mappedDisplayName" role="link"></a>
                            </div>

                        </template>

                        <template v-slot:after-section-autocomplete="{ section }">
                            <a v-if="section.data.length" class="w-100 m-3" xmlns:v-on="v-on" v-on:mouseup.stop="searchMore">@Html.Localize("List-Search", "ShowMoreResults")</a>

                            <div v-else="v-else" class="card-body h-100">
                                <div class="row">
                                    <div class=" col-12 text-center">
                                        <em>@Html.Localize("List-Search", "NoResultAutoSuggest")</em>
                                    </div>
                                </div>
                            </div>
                        </template>
                    </vue-autosuggest>
                    <div class="input-group-append absolute">
                        <button data-qa="search-button"
                                class="btn btn-default"
                                title="@Html.Localize("List-Search", "B_Search")"
                                type="submit">
                            <span class="fa  fa-search"></span>
                        </button>
                    </div>
                </div>
                <div id="search-errors" class="invalid-feedback"></div>
            </div>
        </form>
    </div>
</body>
</html>