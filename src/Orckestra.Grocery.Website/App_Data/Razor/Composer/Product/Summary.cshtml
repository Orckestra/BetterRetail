@inherits Composer.Razor.ComposerRazorFunction
@using Orckestra.Composer.CompositeC1.Context
@using Orckestra.Composer.Grocery.ViewModels
@using Orckestra.Composer.Product.ViewModels

@functions {
    public override string FunctionDescription
    {
        get { return "Product Summary"; }
    }
    public IProductContext ProductContext { get; set; }
    public new ProductViewModel Model { get { return ProductContext.ViewModel; } }


    public string SelectedVariantClass(params string[] ids)
    {
        return ids.Contains(Model.SelectedVariantId) ? "" : "d-none";
    }

    public bool IsWithoutVariants()
    {
        return Model.Variants == null || Model.Variants.Count == 0;
    }
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0">
<head>
</head>
<body>
    <div data-oc-controller="Product.ProductDetail"
         data-productid="@Model.ProductId"
         data-context="@Model.JsonContext"
         class="product-details mt-2 mt-sm-4 mb-4">
        <div class="row">

            <div class="mb-2 mb-sm-0 col-lg-6 col-sm-6">

                @ProductHelpers.AddToWishList()
                @Partial("Product", "Images", Model)

            </div>
            <div class="col-sm-6">

                @BrandName()
                @DisplayName()

                @if (!string.IsNullOrWhiteSpace(Model.Description))
                {
                    <div property="description" class="description mb-2">
                        @Html.Raw(Model.Description)
                    </div>
                }

                @DisplayFormat()


                @Sku()

                @Partial("KvaItems", Model)

                @Html.LazyFunction("Composer.Product.RecurringFrequency")

                <div class="mb-1 w-50" property="offers" typeof="Offer">
                    @ProductPrice()
                </div>

                @ProductHelpers.AddToCartWithQuantity(true)
            </div>
        </div>
    </div>

    @if (Model.IsProductZoomEnabled)
    {
        @Partial("Product", "Zoom", Model)
    }

</body>
</html>

@helper DisplayName()
{
    if (IsWithoutVariants())
    {
        <h1>@Model.DisplayName</h1>
    }
    else
    {
        var displayNames = Model.Variants.GroupBy(v => v.DisplayName).ToList();

        foreach (var group in displayNames)
        {
            var ids = group.Select(v => v.Id).ToArray();
            <h1 data-variant="@(String.Join(",", ids))" class="@SelectedVariantClass(ids)">@group.Key</h1>
        }
        <h1 data-variant="unavailable" class="d-none">@Model.DisplayName</h1>
    }
}


@helper Sku()
{
    <span class="d-none" property="sku">@Model.Sku</span>
}

@helper BrandName()
{
    if (!string.IsNullOrWhiteSpace(Model.Brand))
    {
        <div class="h5 brand mb-1" property="brand" data-qa="product-brand">@Model.Brand</div>
    }
}

@helper StoreInventoryLink()
{
    <div class="card">
        <div class="card-body text-center">
            <a href="#storeinventory">
                <i class="fa fa-file-text-o" aria-hidden="true"></i>&#160;
                @Html.Localize("Store", "H_StoreAvailability")
            </a>
        </div>
    </div>
}

@helper ProductPrice()
{
    var extendedVM = Model.AsExtensionModel<IGroceryProductViewModel>();
    <div id="vueProductPrice" v-cloak="true" xmlns:v-bind="v-bind" xmlns:v-on="v-on">
        <div v-if="!IsUnavailableVariant">
            <div class="m-0 d-flex flex-wrap flex-row align-items-baseline" v-if="Product.DefaultListPrice">
                <small property="price" data-qa="product-price" class="mr-1" v-bind:class="{'text-danger order-2': Product.IsPriceDiscounted}">
                    <span class="product-price">{{Product.ListPrice}}</span><span v-if="Product.IsWeightedProduct">@Html.Localize("ProductPage", "L_Per"){{Product.ProductUnitSize}}@extendedVM.ProductUnitMeasure</span>
                </small>
                <del v-if="Product.IsPriceDiscounted" class="mt-1" v-bind:class="{'order-1 d-block w-100' : Product.IsPriceDiscounted}">{{Product.DefaultListPrice}}</del>

                <div v-if="PricePerUnit" class="mt-1 unit-price" v-bind:class="{'order-3 ml-auto' : Product.IsPriceDiscounted}">
                    <span v-if="IsPricePerUnitZero">@Html.Localize("ProductPage", "L_LessThan") {{PricePerUnit.replace('0.00', '0.01')}}</span>
                    <span v-else="v-else">{{PricePerUnit}}</span>
                    @Html.Localize("ProductPage", "L_Per")
                    <span v-if="Product.BaseProductSize != 1 ">{{Product.BaseProductSize}} </span>{{Product.BaseProductMeasure}}
                </div>
            </div>
            <span v-else="else" property="price" data-qa="product-price" class="product-price invisible">0</span>
        </div>
    </div>
}

@helper DisplayFormat()
{
    var extendedVM = Model.AsExtensionModel<IGroceryProductViewModel>();

    if (extendedVM.Format != null)
    {
        <p class="unit-weight mb-2">
            @extendedVM.Format
        </p>
    }
}
