@inherits Composer.Razor.ComposerRazorFunction
@using Orckestra.Composer.CompositeC1.Context
@using Orckestra.Composer.Grocery.ViewModels
@using Orckestra.Composer.Product.ViewModels

@functions {
    public override string FunctionDescription
    {
        get { return "Product Summary"; }
    }
    public IProductContext ProductContext { get; set; }
    public new ProductViewModel Model { get { return ProductContext.ViewModel; } }


    public string SelectedVariantClass(params string[] ids)
    {
        return ids.Contains(Model.SelectedVariantId) ? "" : "d-none";
    }

    public bool IsWithoutVariants()
    {
        return Model.Variants == null || Model.Variants.Count == 0;
    }
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0">
<head>
    <script type="text/javascript">
        var productDetailContext = '@Model.JsonContext';
    </script>
</head>
<body>
    <div data-oc-controller="Product.ProductDetail"
         data-productid="@Model.ProductId"
         data-context-var="productDetailContext"
         class="product-details">
        <div class="row">

            <div class="col-lg-6  col-md-6">

                @ProductHelpers.AddToWishList()
                @Partial("Product", "Images", Model)
                @ProductBadges()
            </div>
            <div class="col-md-6">

                @DisplayName()
                @DisplayFormat()

                @BrandName()

                @Sku()

                @Partial("KvaItems", Model)

                @Html.LazyFunction("Composer.Product.RecurringFrequency")

                <div class="mb-4" property="offers" typeof="Offer">
                    @ProductPrice()
                </div>

                <div class="mb-4">
                    @ProductHelpers.AddToCartWithQuantity(true)
                </div>

                <div class="mb-4">
                    @StoreInventoryLink()
                </div>
            </div>
        </div>
    </div>

    @if (Model.IsProductZoomEnabled)
    {
        @Partial("Product", "Zoom", Model)
    }

</body>
</html>

@helper ProductBadges()
{
    var extendedVM = Model.AsExtensionModel<IGroceryProductViewModel>();

    if (string.IsNullOrWhiteSpace(extendedVM.ProductBadges)) { return; }
    var productBadges = extendedVM.ProductBadges.Split('|').ToList();
    
    <ul class="product-details-badges list-unstyled">


        @foreach (var item in productBadges)
        {
            var imageUrl = $"/UI.Package/Images/badge/{item}.svg";
            <li><img src="@imageUrl" alt="@item" /></li>
        }
    </ul>
}

@helper DisplayName()
{
    if (IsWithoutVariants())
    {
        <h1>@Model.DisplayName</h1>
    }
    else
    {
        var displayNames = Model.Variants.GroupBy(v => v.DisplayName).ToList();

        foreach (var group in displayNames)
        {
            var ids = group.Select(v => v.Id).ToArray();
            <h1 data-variant="@(String.Join(",", ids))" class="@SelectedVariantClass(ids)">@group.Key</h1>
        }
        <h1 data-variant="unavailable" class="d-none">@Model.DisplayName</h1>
    }
}

@helper Sku()
{
    <span class="d-none" property="sku">@Model.Sku</span>
}

@helper BrandName()
{
    <h2 class="h5  mb-4" property="brand" data-qa="product-brand">@Model.Brand</h2>
}

@helper StoreInventoryLink()
{
    <div class="card">
        <div class="card-body text-center">
            <a href="#storeinventory">
                <i class="fa  fa-file-text-o"></i>&#160;
                @Html.Localize("Store", "H_StoreAvailability")
            </a>
        </div>
    </div>
}

@helper ProductPrice()
{
    <div id="vueProductPrice" v-cloak="true" xmlns:v-bind="v-bind" xmlns:v-on="v-on">
        <div v-if="!IsUnavailableVariant">
            <div class="m-0" v-if="Product.DefaultListPrice">
                <small property="price" data-qa="product-price" class="mr-1" v-bind:class="{'text-danger': Product.IsPriceDiscounted}">
                    <span class="h4 font-weight-bold">{{Product.ListPrice}}</span>
                </small>
                <del v-if="Product.IsPriceDiscounted" class="mt-1">{{Product.DefaultListPrice}}</del>
                <div v-if="PricePerUnit" class="mt-1">
                    <span v-if="IsPricePerUnitZero">@Html.Localize("ProductPage", "L_LessThan") {{PricePerUnit.replace('0.00', '0.01')}}</span>
                    <span v-else="v-else">{{PricePerUnit}}</span>
                    @Html.Localize("ProductPage", "L_Per")
                    <span v-if="Product.BaseProductSize != 1 ">{{Product.BaseProductSize}} </span>{{Product.BaseProductMeasure}}
                </div>
                <div v-else="v-else" class="mt-1">
                    <span>N/A</span>
                </div>
            </div>
            <span v-else="else" property="price" data-qa="product-price" class="h3 invisible">0</span>
        </div>
    </div>
}

@helper DisplayFormat()
{
    var extendedVM = Model.AsExtensionModel<IGroceryProductViewModel>();
    var hasUnitValues = extendedVM.ProductUnitQuantity > 0 && extendedVM.ProductUnitSize > 0 && !string.IsNullOrWhiteSpace(extendedVM.ProductUnitMeasure);

    if (hasUnitValues)
    {
        <p>@extendedVM.ProductUnitQuantity x @extendedVM.ProductUnitSize @extendedVM.ProductUnitMeasure</p>
    }
}
