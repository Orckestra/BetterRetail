@inherits Composer.Razor.ComposerRazorFunction
@using Orckestra.Composer.Search.ViewModels

@functions {
    public override string FunctionDescription
    {
        get { return "Search product tile"; }
    }

    [FunctionParameter(Label = "Show Add To Cart Button", DefaultValue = true)]
    public bool ShowAddToCartButton { get; set; }

}

<div class="product-tile d-flex  flex-column  h-100"
     v-bind:data-has-variants="Product.HasVariants"
     v-bind:data-product-id="Product.ProductId"
     v-bind:data-product-variant-id="Product.VariantId"
     data-qa="search-result"
     v-bind:data-recurring-order-program-name="Product.RecurringOrderProgramName"
     xmlns:v-bind="v-bind" xmlns:v-on="v-on">

    <a class="product-tile-media"
       v-bind:href="Product.Url"
       v-bind:data-productId="Product.ProductId"
       v-on:click="productClick(Product, index)">
        <img class="img-fluid m-auto" xmlns:v-bind="v-bind" v-bind:src="Product.ImageUrl"
             v-bind:alt="Product.FullDisplayName"
             onerror="imgError(this)"/>
    </a>
    <div v-if="'InWishList' in Product" class="product-tile-wishlist">
        @AddToWishList()
    </div>
    <ul v-if="Product.ProductBadgeMap" class="product-tile-badges list-unstyled">
        <li v-for="item in Product.ProductBadgeMap"><img v-bind:src="`/UI.Package/Images/badge/${item.Key}.svg`"   v-bind:alt="item.Value"/></li>
    </ul>


    <div class="product-tile-text px-3 pt-3">
        <p v-if="Product.Brand" class="product-tile-brand m-0"
           data-qa="search-product-brand">
            {{Product.Brand}}
        </p>
        <div v-if="Product.IsEligibleForRecurring" class="product-tile-recurring">
            <img src="~/UI.Package/Images/recurring.svg"
                 class="recurring-icon"
                 alt="@Html.Localize("General", "L_RecurringProduct")"
                 title="@Html.Localize("General", "L_RecurringProduct")"/>
        </div>

        <a data-qa="search-product-title"
           v-bind:href="Product.Url"
           v-bind:title="Product.FullDisplayName"
           v-bind:data-productId="Product.ProductId"
           v-on:click="productClick(Product, index)"
           class="p text-default-font">
            {{Product.DisplayName}}
        </a>
    </div>

    @PriceBasedOnUnitMeasure()

    @if (ShowAddToCartButton)
    {
        <div class="product-tile-button-container px-3 mb-3">
            @ProductHelpers.AddToCartButtonWithQuantity()
        </div>
    }

</div>

@helper PriceBasedOnUnitMeasure()
{
<div class="px-3">
    <p class="mb-1">
        <span v-if="Product.IsApproxUnit">
            @Html.Localized("ProductPage", "L_UnitMeasureApprox", "{{Product.ItemFormat}}", "{{Product.UnitOfMeasure}}")
        </span>
        <span v-else="else">
            @Html.Localized("ProductPage", "L_UnitMeasure", "{{Product.ItemFormat}}", "{{Product.UnitOfMeasure}}")
        </span>
    </p>
    <div class="product-tile-price">
        <span v-if="Product.IsOnSale">
            <del>{{Product.DisplayListPrice}}</del>&nbsp;
        </span>
        <small class="mr-1" v-bind:class="{'text-danger' : Product.IsOnSale}">
            <span v-if="Product.HasPriceRange">
                @Html.Localize("List-Search", "L_PriceFrom")
            </span>
            <span v-if="Product.IsApproxUnit">
                @Html.Localize("List-Search", "L_Approx")
            </span>
            <span class="h5 font-weight-bold">
                <span v-if="Product.IsOnSale">
                    {{Product.DisplaySpecialPrice}}
                </span>
                <span v-else="else">
                    {{Product.DisplayListPrice}}
                </span>
            </span>
            /<span v-if="Product.IsUnit">
                <span v-if="Product.IsUnitMeasure">
                    @Html.Localize("ProductPage", "L_Each")
                </span>
                <span v-else="else">
                    @Html.Localize("ProductPage", "L_Unit")
                </span>
            </span>
            <span v-else="else">
                {{Product.ItemFormat}} {{Product.UnitOfMeasure}}
            </span>
        </small>
    </div>
</div>
}

@helper ProductPrice()
{
    <div class="d-flex  flex-column  flex-grow-1  justify-content-end px-3">

        <div v-if="Product.HasPriceRange">
            <span class="small" v-bind:class="{'text-danger': Product.IsOnSale}">
                @Html.Localize("List-Search", "L_PriceFrom")
            </span>
            <span v-if="Product.IsOnSale" class="text-danger">
                {{Product.DisplaySpecialPrice}}
            </span>
            <span v-else="else">
                {{Product.DisplayListPrice}}
            </span>
        </div>
        <div v-else="else">
            <div v-if="Product.IsOnSale">
                <div class="product-tile-special-price">
                    <del>{{Product.DisplayListPrice}}</del>
                </div>
                <div class="h4 product-tile-price">
                    <span class="text-danger">{{Product.DisplaySpecialPrice}}</span>
                </div>
            </div>
            <div v-else="else">
                <div class="product-tile-special-price">
                    <!--only used for proper spacing-->
                </div>
                <div class="h4 product-tile-price">
                    <span>{{Product.DisplayListPrice}}</span>
                </div>
            </div>
        </div>

    </div>
}

@helper AddToWishList()
{
    <span class="add-to-wishlist">
        <a v-if="Product.InWishList" data-qa="product-remove-from-wishlist"
           v-on:click="removeLineItemFromWishList(Product, $event)"
           title="@Html.Localize("MyAccount", "H_RemoveFromTheWishList")"
           class="add-to-wishlist p-0 active">
            <i class="fa  fa-heart"></i>
        </a>
        <a v-else="else" data-qa="product-add-to-wishlist"
           v-on:click="addLineItemToWishList(Product, $event)"
           title="@Html.Localize("MyAccount", "H_AddToWishList")"
           class="add-to-wishlist  p-0 ">
            <i class="fa  fa-heart"></i>
        </a>
    </span>
}
