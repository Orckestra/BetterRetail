@inherits Composer.Razor.ComposerRazorFunction

@using Orckestra.Composer.CompositeC1.Context
@using Orckestra.Composer.Search.ViewModels
@using Orckestra.Composer.Grocery.ViewModels

@functions {
    public override string FunctionDescription
    {
        get { return "Search product tile"; }
    }

    [FunctionParameter(Label = "Show Add To Cart Button", DefaultValue = true)]
    public bool ShowAddToCartButton { get; set; }

}

<div class="product-tile d-flex h-100"
     v-bind:data-has-variants="Product.HasVariants"
     v-bind:data-product-id="Product.ProductId"
     v-bind:data-product-variant-id="Product.VariantId"
     data-qa="search-result"
     v-bind:data-recurring-order-program-name="Product.RecurringOrderProgramName"
     xmlns:v-bind="v-bind" xmlns:v-on="v-on">

    <a class="product-tile-media"
       v-bind:href="Product.Url"
       v-bind:data-productId="Product.ProductId"
       v-on:click="productClick(Product, index)">
        <img class="img-fluid m-auto" xmlns:v-bind="v-bind" v-bind:src="Product.ImageUrl"
             v-bind:alt="Product.FullDisplayName"
             onerror="imgError(this)"/>
    </a>
    <div v-if="'InWishList' in Product" class="product-tile-wishlist">
        @AddToWishList()
    </div>
    <ul v-if="Product.ProductBadgeMap" class="product-tile-badges list-unstyled">
        <li v-for="item in Product.ProductBadgeMap"><img v-bind:src="`/UI.Package/Images/badge/${item.Key}.svg`"   v-bind:alt="item.Value"/></li>
    </ul>

    <div class="product-tile-information">
        <div class="product-tile-text">
            <p v-if="Product.Brand" class="product-tile-brand m-0"
            data-qa="search-product-brand">
                {{Product.Brand}}
            </p>
            <div v-if="Product.IsEligibleForRecurring" class="product-tile-recurring">
                <img src="~/UI.Package/Images/recurring.svg"
                    class="recurring-icon"
                    alt="@Html.Localize("General", "L_RecurringProduct")"
                    title="@Html.Localize("General", "L_RecurringProduct")"/>
            </div>

            <a data-qa="search-product-title"
            v-bind:href="Product.Url"
            v-bind:title="Product.FullDisplayName"
            v-bind:data-productId="Product.ProductId"
            v-on:click="productClick(Product, index)"
            class="p text-default-font">
                {{Product.DisplayName}}
            </a>
            
            @DisplayFormat()
        </div>
        @PriceBasedOnUnitMeasure()
        @if (ShowAddToCartButton)
        {
            <div class="product-tile-button-container">
                @ProductHelpers.AddToCartButtonWithQuantity()
            </div>
        }
    </div>
    

</div>

@helper DisplayFormat()
{
   <div class="product-tile-format" v-if="Product.HasUnitValues">
       <span v-if="Product.IsUnit &amp;&amp; Product.IsWeightedProduct">
           @Html.Localize("ProductPage", "L_Approx") {{Product.ProductUnitSize}}{{Product.ProductUnitMeasure}} @Html.Localize("General", "L_EachAbbrev")
       </span>
       <span v-if="Product.IsUnit &amp;&amp; !Product.IsWeightedProduct">
           {{Product.ProductUnitSize}}{{Product.ProductUnitMeasure}}
       </span>
       <span v-if="!Product.IsUnit &amp;&amp; Product.IsWeightedProduct">
           {{Product.ProductUnitQuantity}} x @Html.Localize("ProductPage", "L_Approx") {{Product.ProductUnitSize}}{{Product.ProductUnitMeasure}}
       </span>
       <span v-if="!Product.IsUnit &amp;&amp; !Product.IsWeightedProduct">
           {{Product.ProductUnitQuantity}} x {{Product.ProductUnitSize}}{{Product.ProductUnitMeasure}}
       </span>
   </div> 
}

@helper PriceBasedOnUnitMeasure()
{
<div class="product-tile-price">
    <small class="display-price" v-bind:class="{'text-danger order-2' : Product.IsOnSale}">
        <span v-if="Product.HasPriceRange">
           @Html.Localize("List-Search", "L_PriceFrom")
        </span>
        <span class="h4" v-if="Product.IsOnSale">
            {{Product.DisplaySpecialPrice}}
        </span>
        <span class="h4" v-else="else">
            {{Product.DisplayListPrice}}
        </span>
        <span v-if="Product.IsWeightedProduct">@Html.Localize("ProductPage", "L_Per"){{Product.ProductUnitSize}}{{Product.ProductUnitMeasure}}</span>
    </small>
    <span v-if="Product.IsOnSale" class="original-price" v-bind:class="{'order-1 d-block' : Product.IsOnSale}">
        &nbsp;<del>{{Product.DisplayListPrice}}</del>
    </span>
    
    <span v-if="Product.PricePerUnit" class="product-tile-price-per-unit" v-bind:class="{'order-3' : Product.IsOnSale}">
        <span v-if="Product.IsPricePerUnitZero">@Html.Localize("ProductPage", "L_LessThan") {{Product.PricePerUnit.replace('0.00', '0.01')}}</span>
        <span v-else="v-else">{{Product.PricePerUnit}}</span>
        @Html.Localize("ProductPage", "L_Per")
        <span v-if="Product.BaseProductSize != 1 ">{{Product.BaseProductSize}}&nbsp;</span>{{Product.BaseProductMeasure}}
    </span>
</div>
}

@helper ProductPrice()
{
    <div class="d-flex  flex-column  flex-grow-1  justify-content-end">

        <div v-if="Product.HasPriceRange">
            <span class="small" v-bind:class="{'text-danger': Product.IsOnSale}">
                @Html.Localize("List-Search", "L_PriceFrom")
            </span>
            <span v-if="Product.IsOnSale" class="text-danger">
                {{Product.DisplaySpecialPrice}}
            </span>
            <span v-else="else">
                {{Product.DisplayListPrice}}
            </span>
        </div>
        <div v-else="else">
            <div v-if="Product.IsOnSale">
                <div class="product-tile-special-price">
                    <del>{{Product.DisplayListPrice}}</del>
                </div>
                <div class="h4 product-tile-price">
                    <span class="text-danger">{{Product.DisplaySpecialPrice}}</span>
                </div>
            </div>
            <div v-else="else">
                <div class="product-tile-special-price">
                    <!--only used for proper spacing-->
                </div>
                <div class="h4 product-tile-price">
                    <span>{{Product.DisplayListPrice}}</span>
                </div>
            </div>
        </div>

    </div>
}

@helper AddToWishList()
{
    <span class="add-to-wishlist">
        <a v-if="Product.InWishList" data-qa="product-remove-from-wishlist"
           v-on:click="removeLineItemFromWishList(Product, $event)"
           title="@Html.Localize("MyAccount", "H_RemoveFromTheWishList")"
           class="add-to-wishlist p-0 text-danger">
            <i class="fa  fa-heart"></i>
        </a>
        <a v-else="else" data-qa="product-add-to-wishlist"
           v-on:click="addLineItemToWishList(Product, $event)"
           title="@Html.Localize("MyAccount", "H_AddToWishList")"
           class="add-to-wishlist  p-0 ">
            <i class="fa  fa-heart-o"></i>
        </a>
    </span>
}

