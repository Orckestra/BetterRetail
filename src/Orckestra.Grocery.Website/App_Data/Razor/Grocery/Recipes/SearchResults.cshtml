@inherits RazorFunction
@using System.Globalization
@using Orckestra.Composer.Recipes.DataTypes
@using Composite.Data
@using Orckestra.Composer.ContentSearch.Services
@using Newtonsoft.Json
@using Orckestra.Composer.ContentSearch.DataTypes
@using Orckestra.Composer.ContentSearch.ViewModels

@functions {
    public override string FunctionDescription
    {
        get { return "Recipe Search TIle"; }
    }


    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.CurrentSite.Label}", Help = "${Orckestra.Search.WebsiteSearch,SearchResults.CurrentSite.Help}", DefaultValue = true)]
    public bool CurrentSite { get; set; }

    [FunctionParameter(Label = "", Help = "", DefaultValue = null)]
    public ISortOption SelectedSortBy { get; set; }

    [FunctionParameter(Label = "", Help = "", DefaultValue = null)]
    public IList<ISortOption> AvailableSortBys { get; set; }

    [FunctionParameter(Label = "", Help = "", DefaultValue = null)]
    public ContentSearchTabViewModel Tab { get; set; }

    string vueId = "vueContentSearchResults" + Guid.NewGuid().ToString("N");
}
@{
    var difficulties = DataFacade.GetData<IDifficulty>().ToLookup(_ => _.Id.ToString());
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0" xmlns:v-bind="v-bind" xmlns:v-on="v-on">
<head>
</head>
<body>
    <div class="search-results"
         data-oc-controller="ContentSearch.SearchResults"
         data-context="@JsonConvert.SerializeObject(Tab, new Newtonsoft.Json.Converters.StringEnumConverter())"
         data-available-sort="@JsonConvert.SerializeObject(AvailableSortBys, new Newtonsoft.Json.Converters.StringEnumConverter())"
         data-selected-sort="@JsonConvert.SerializeObject(SelectedSortBy, new Newtonsoft.Json.Converters.StringEnumConverter())"
         data-items-count="@(Tab.SearchResults.Count)"
         data-current-site="@(CurrentSite)"
         data-is-recipes="@(true)"
         data-difficulties="@JsonConvert.SerializeObject(difficulties, new Newtonsoft.Json.Converters.StringEnumConverter())"
         data-vueid="@vueId"
         id="@vueId"
         v-cloak="true">

        <div class="row filters-row mb-4" v-if="TotalCount > 0">
            <div class="col-6 d-lg-none">
                @SearchHelpers.ShowFacetsCollapseBtn()
            </div>
            <div class="col-6">
                @SearchHelpers.ContentSortBy()
            </div>
            <div class="col-6 d-none d-lg-block" v-if="Pagination.PagesCount > 1">
                @SearchHelpers.PaginationDropdownByCount()
            </div>
        </div>

        <div class="row">
            <div v-for="(contentItem, index) in SearchResults" class="col-12 col-sm-4 mb-4">
                @ShowRecipeContentSearchEntry()
            </div>
        </div>

        <div class="row">
            <div class="col-12 d-block pt-2" v-if="Pagination.PagesCount > 1">
                @SearchHelpers.PaginationByCount()
            </div>
        </div>
    </div>
</body>
</html>


@helper ShowRecipeContentSearchEntry(string searchEntry = "contentItem")
{
    <div class="card h-100 recipe-tile">
        <a v-if="@(searchEntry).ImageUrl" v-bind:href="@(searchEntry).DetailsUrl">
            <span class="recipe-tile-media">

                <img class="card-img-top" v-bind:src="@(searchEntry).ImageUrl + '?h=200'" v-bind:alt="@(searchEntry).Title" />
                <div class="product-tile-recipelist">
                    <a data-qa="add-to-recipe-list" title="@Html.Localize("MyAccount", "H_AddToRecipeList")" v-on:click="setFavorite(@(searchEntry).id, @(searchEntry).isFavorite)" class="add-to-recipelist">
                        <i class="fa" v-bind:class="{'fa-heart text-danger' : @(searchEntry).isFavorite, 'fa-heart-o': !@(searchEntry).isFavorite}"></i>
                    </a>
                </div>
            </span>
        </a>
        <div class="card-body d-flex flex-column justify-content-between">
            <div class="card-title">
                <h3 class="h5"><a v-bind:href="@(searchEntry).DetailsUrl" v-html="@(searchEntry).Title"></a></h3>
            </div>
            <span class="recipe-info-table">
                    <span v-if="@(searchEntry).difficulty" class="recipe-info-table-cell">
                        <span class="fa fa-spoon recipe-info-icon"></span>
                        <span class="recipe-info-type">@Html.Localize("Recipes", "L_Difficulty")</span>
                        <span class="recipe-info-value">{{@(searchEntry).difficulty}}</span>
                    </span>

                    <span v-if="@(searchEntry).hasTime" class="recipe-info-table-cell">
                        <span class="fa fa-blender recipe-info-icon"></span>
                        <span class="recipe-info-type">@Html.Localize("Recipes", "L_TotalTime")</span>
                        <span class="recipe-info-value">{{@(searchEntry).cookingTime + @(searchEntry).preparationTime}} @Html.Localize("Recipes", "L_Minutes")</span>
                    </span>
                 
                    <span v-if="@(searchEntry).servings" class="recipe-info-table-cell">
                        <span class="fa fa-chart-pie recipe-info-icon"></span>
                        <span class="recipe-info-type">@Html.Localize("Recipes", "L_Serves")</span>
                        <span class="recipe-info-value">{{@(searchEntry).servings}}</span>
                    </span>
                </span>
        </div>
    </div>
}