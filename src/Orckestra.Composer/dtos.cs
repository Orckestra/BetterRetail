/* Options:
Date: 2022-08-30 16:28:52
Version: 5.90
Tip: To override a DTO option, remove "//" prefix before updating
BaseUrl: https://orc-dev-ocs-cm.develop.orckestra.cloud/api/CodeGen/Complete/qg3G4xxJfsC1SmK5JgzgiW4vuWw9tjAfI2P5ovfz/

//GlobalNamespace: 
//MakePartial: True
//MakeVirtual: True
//MakeInternal: False
//MakeDataContractsExtensible: False
//AddReturnMarker: True
//AddDescriptionAsComments: True
//AddDataContractAttributes: False
//AddIndexesToDataMembers: False
//AddGeneratedCodeAttributes: False
//AddResponseStatus: False
//AddImplicitVersion: 
//InitializeCollections: True
//ExportValueTypes: False
//IncludeTypes: 
//ExcludeTypes: IHttpResult,IResponse,IRequest,IContentTypeWriter,ILocalizedString,ILocalizedRequest,IScoped,Filter,LocalizedString,MediaPropertyModification,ProductPropertyDefinition,ProductPropertyModification,PropertyBag,TargetingCondition,VariantPropertyModification,ValueTypeWrapper
//AddNamespaces: 
//AddDefaultXmlNamespace: http://schemas.servicestack.net/types
IncludeSerializationClasses: true
DefinePclSymbol: false
//OrckestraCommerce Version: 0.0.0.0
*/
#define ServiceStackCSharpCodeGenerator
#pragma warning disable 1591

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;
using ServiceStack;
using ServiceStack.DataAnnotations;
using Orckestra.Overture.ServiceModel.Configuration;
using Orckestra.Overture.ServiceModel.Content;
using Orckestra.Overture.ServiceModel.Customers.Warehouses;
using System.Net;
using System.Collections.Specialized;
using Orckestra.Overture.Monitoring;
using Orckestra.Overture.ServiceModel.Security;
using Orckestra.Overture.ServiceModel;
using Orckestra.Overture.ServiceModel.Diagnostic;
using Orckestra.Overture.ServiceModel.Requests;
using Orckestra.Overture.ServiceModel.Providers;
using Orckestra.Overture.ServiceModel.Queries;
using Orckestra.Overture.ServiceModel.Requests.Search;
using Orckestra.Overture.Providers;
using Orckestra.Overture.ServiceModel.Reporting;
using Orckestra.Overture.ServiceModel.Administration;
using Orckestra.Overture.ServiceModel.SearchQueries;
using Orckestra.Overture.ServiceModel.Metadata;
using Orckestra.Overture.ServiceModel.Requests.Metadata;
using Orckestra.Overture.ServiceModel.Search;
using Orckestra.Overture.ServiceModel.Requests.Administration;
using Orckestra.Overture.DurableTask.Model;
using Orckestra.Overture.Routing;
using Orckestra.Overture.ServiceModel.Customers;
using Orckestra.Overture.ServiceModel.Customers.CustomProfiles;
using Orckestra.Overture.ServiceModel.Requests.Customers.CustomProfiles;
using Orckestra.Overture.ServiceModel.Requests.Customers;
using Orckestra.Overture.ServiceModel.Orders;
using Orckestra.Overture.ServiceModel.Customers.Stores;
using Orckestra.Overture.ServiceModel.Customers.Membership;
using Orckestra.Overture.ServiceModel.Requests.Customers.Warehouses;
using Orckestra.Overture.ServiceModel.Marketing;
using Orckestra.Overture.ServiceModel.Requests.Marketing;
using Orckestra.Overture.ServiceModel.Validation;
using Orckestra.Overture.ServiceModel.Products;
using Orckestra.Overture.ServiceModel.Requests.Products;
using Orckestra.Overture.ServiceModel.Products.Inventory;
using Orckestra.Overture.ServiceModel.Products.Draft;
using Orckestra.Overture.ServiceModel.Relationships;
using Orckestra.Overture.ServiceModel.DataExchange.Requests.Products;
using Orckestra.Overture.ServiceModel.Orders.Fulfillment.Carriers;
using Orckestra.Overture.ServiceModel.Orders.Fulfillment.Competitions;
using Orckestra.Overture.ServiceModel.Requests.Orders.Shopping;
using Orckestra.Overture.ServiceModel.Orders.InventoryReservation;
using Orckestra.Overture.ServiceModel.Orders.Fulfillment;
using Orckestra.Overture.ServiceModel.Orders.Processing;
using Orckestra.Overture.ServiceModel.Requests.Orders.Fulfillment;
using Orckestra.Overture.ServiceModel.Requests.Orders;
using Orckestra.Overture.ServiceModel.Orders.Picking;
using Orckestra.Overture.ServiceModel.Orders.Fulfillment.Packages;
using Orckestra.Overture.ServiceModel.Requests.Orders.Fulfillment.Packages;
using Orckestra.Overture.ServiceModel.Orders.RMA;
using Orckestra.Overture.ServiceModel.Requests.Orders.RMA;
using Orckestra.Overture.ServiceModel.RecurringOrders;
using Orckestra.Overture.ServiceModel.Requests.RecurringOrders;
using OrckestraCommerce.EntityLockProvider.ServiceModel;
using OrckestraCommerce.FulfillmentProviders.Core.ServiceModel;
using ServiceStack.Web;
using Orckestra.Overture.ServiceModel.Search.Pricing;
using Orckestra.Overture.ServiceModel.Orders.Fulfillment.SLA;
using Orckestra.Overture.ServiceModel.Requests.Security;
using Orckestra.Overture.ServiceModel.Requests.Setting;
using Orckestra.Overture.ServiceModel.Requests.Authentication;
using Orckestra.Overture.ServiceModel.Requests.Diagnostic;
using Orckestra.Overture.ServiceModel.Requests.Providers;
using Orckestra.Overture.ServiceModel.Requests.Reporting;
using Orckestra.Overture.ServiceModel.Requests.SearchQueries;
using Orckestra.Overture.ServiceModel.Requests.Content;
using Orckestra.Overture.ServiceModel.Requests.Customers.Addresses;
using Orckestra.Overture.ServiceModel.Requests.Customers.Stores;
using Orckestra.Overture.ServiceModel.Requests.Customers.Organizations;
using Orckestra.Overture.ServiceModel.Requests.Customers.Membership;
using Orckestra.Overture.ServiceModel.Requests.Marketing.Promotions;
using Orckestra.Overture.ServiceModel.Requests.Products.Inventory;
using Orckestra.Overture.ServiceModel.Requests.Products.Drafts;
using Orckestra.Overture.ServiceModel.Requests.Relationships;
using Orckestra.Overture.ServiceModel.DataExchange.Requests.ProductPrice;
using Orckestra.Overture.ServiceModel.Requests.Orders.Fulfillment.Carriers;
using Orckestra.Overture.ServiceModel.Requests.Orders.Fulfillment.Competitions;
using Orckestra.Overture.ServiceModel.Requests.Orders.Fulfillment.Exceptions;
using Orckestra.Overture.ServiceModel.Requests.Orders.InventoryReservation;
using Orckestra.Overture.ServiceModel.Requests.Orders.Shopping.Shipments;
using Orckestra.Overture.ServiceModel.Requests.Orders.OrderDraft;
using Orckestra.Overture.ServiceModel.Requests.Orders.Picking;
using Orckestra.Overture.ServiceModel.Requests.Orders.Fulfillment.SLA;
using Orckestra.Overture.ServiceModel.Requests.Orders.Shopping.LineItems;
using Orckestra.Overture.ServiceModel.Requests.Orders.Shopping.Payments;
using Orckestra.Overture.ServiceModel.Requests.Orders.Shopping.Coupons;
using Orckestra.Overture.ServiceModel.Requests.Taxes;
using Orckestra.Overture.ServiceModel.Taxes;
using OrckestraCommerce.EntityLockProvider.ServiceModel.Requests;
using OrckestraCommerce.FulfillmentProviders.Core.ServiceModel.Requests;
using OrckestraCommerce.FulfillmentProviders.Core.ServiceModel.Requests.FulfillmentEvents;
using OrckestraCommerce.FulfillmentProviders.Core.ServiceModel.Requests.FulfillmentMetrics;
using Orckestra.Overture.Providers.MonerisPayment.ServiceModel;


namespace Orckestra.Overture.DurableTask.Model
{

    public partial class ExecutionLogEntry
    {
        public virtual Guid Id { get; set; }
        public virtual Guid CorrelationId { get; set; }
        public virtual Guid TaskId { get; set; }
        public virtual LogEntryLevel LogLevel { get; set; }
        public virtual string Message { get; set; }
        public virtual DateTime ExecutionTime { get; set; }
    }

    public partial interface IExecutionLogEntry
    {
        Guid Id { get; set; }
        Guid TaskId { get; set; }
        Guid CorrelationId { get; set; }
        LogEntryLevel LogLevel { get; set; }
        string Message { get; set; }
        DateTime ExecutionTime { get; set; }
    }

    public partial interface ITaskDetails
    {
        Guid Id { get; set; }
        string Name { get; set; }
        string Requester { get; set; }
        DateTime Created { get; set; }
        Guid CorrelationId { get; set; }
        string Topic { get; set; }
        string ActivityTypeFullName { get; set; }
        string WorkflowXamlPath { get; set; }
        Guid ExecutionId { get; set; }
        TaskStatus Status { get; set; }
        DateTime LastModified { get; set; }
        DateTime? Completed { get; set; }
        bool IsSequential { get; set; }
        long? SequenceNumber { get; set; }
        string SequenceGroup { get; set; }
        int? SequenceQuota { get; set; }
        TaskFaultedErrorCode? FaultedErrorCode { get; set; }
        string TelemetryOperationId { get; set; }
        string TelemetryParentId { get; set; }
    }

    public partial interface IWorkflowArgument
    {
        Object Value { get; set; }
    }

    public enum LogEntryLevel
    {
        Info,
        Warning,
        Error,
    }

    public partial class TaskArguments
        : Dictionary<string, IWorkflowArgument>
    {
    }

    public enum TaskFaultedErrorCode
    {
        Unknown,
        ConnectivityError,
        WorkflowCompilationError,
        XmlError,
        BookmarkError,
    }

    public partial class TaskState
        : TaskStateBase, ITaskDetails
    {
        public TaskState()
        {
            ExecutionLogEntries = new List<ExecutionLogEntry>{};
        }

        public virtual List<ExecutionLogEntry> ExecutionLogEntries { get; set; }
    }

    public partial class TaskStateBase
    {
        public virtual Guid Id { get; set; }
        public virtual string Name { get; set; }
        public virtual Guid CorrelationId { get; set; }
        public virtual Guid ExecutionId { get; set; }
        public virtual TaskStatus Status { get; set; }
        public virtual string Requester { get; set; }
        public virtual DateTime Created { get; set; }
        public virtual DateTime LastModified { get; set; }
        public virtual DateTime? Completed { get; set; }
        public virtual string ResultBlobUrl { get; set; }
        public virtual string Topic { get; set; }
        public virtual string ActivityTypeFullName { get; set; }
        public virtual string WorkflowXamlPath { get; set; }
        public virtual TaskArguments InputArguments { get; set; }
        public virtual TaskArguments OutputArguments { get; set; }
        public virtual TaskFaultedErrorCode? FaultedErrorCode { get; set; }
        public virtual string FaultedReason { get; set; }
        public virtual string AttemptedBookmark { get; set; }
        public virtual int RetryCount { get; set; }
        public virtual bool IsSequential { get; set; }
        public virtual long? SequenceNumber { get; set; }
        public virtual string SequenceGroup { get; set; }
        public virtual int? SequenceQuota { get; set; }
        [Ignore]
        public virtual TaskStatus PreviousStatus { get; set; }

        [Ignore]
        public virtual int PreviousRetryCount { get; set; }

        [Ignore]
        public virtual DateTime ScheduledRetryTimeUtc { get; set; }

        [Ignore]
        public virtual string TelemetryOperationId { get; set; }

        [Ignore]
        public virtual string TelemetryParentId { get; set; }
    }

    public enum TaskStatus
    {
        Created,
        WaitingToRun,
        Running,
        RanToCompletion,
        Canceled,
        Faulted,
        Idle,
        WaitingToCancel,
        Ignored,
        QueuedForSequence,
        IdleAfterErrorRecovery,
        WaitingToRetry,
        IdleAfterFault,
    }
}

namespace Orckestra.Overture.Monitoring
{

    public partial class BlobStorageStatus
    {
        public virtual string ProviderName { get; set; }
        public virtual bool ReadWriteSucceed { get; set; }
    }

    public partial class DbStatus
    {
        public virtual string Name { get; set; }
        public virtual bool ConnectionSucceed { get; set; }
    }

    [Route("/{Path*}")]
    public partial class FallbackRequest
    {
        public virtual string Path { get; set; }
    }

    ///<summary>
    ///System Health Service
    ///</summary>
    [Route("/monitoring/health", "GET")]
    [Api(Description="System Health Service")]
    public partial class GetOvertureHostInfoRequest
        : IReturn<OvertureHostInfo>, IGet
    {
    }

    public partial class OvertureHostInfo
    {
        public OvertureHostInfo()
        {
            DbStatuses = new List<DbStatus>{};
            OverturePlugins = new List<PluginInfo>{};
            ServiceStackPlugins = new List<PluginInfo>{};
        }

        public virtual string ServerName { get; set; }
        public virtual string Environment { get; set; }
        public virtual string Hostname { get; set; }
        public virtual string Variation { get; set; }
        public virtual string OvertureVersion { get; set; }
        public virtual string ServiceStackVersion { get; set; }
        public virtual List<DbStatus> DbStatuses { get; set; }
        public virtual BlobStorageStatus BlobStorageStatus { get; set; }
        public virtual List<PluginInfo> OverturePlugins { get; set; }
        public virtual List<PluginInfo> ServiceStackPlugins { get; set; }
    }

    public partial class PluginInfo
    {
        public virtual string TypeName { get; set; }
        public virtual string AssemblyName { get; set; }
        public virtual string Version { get; set; }
    }
}

namespace Orckestra.Overture.Providers
{

    public enum ProviderType
    {
        Undefined,
        StoreLocator,
        Geolocation,
        PrintOrder,
        PrintShipment,
        OrderProcessing,
        Shipping,
        Payment,
        Tax,
        Rounding,
        TargetingContext,
        OrderNumberGenerator,
        RmaNumberGenerator,
        DigitalAssetManagement,
        DirectoryProvider,
        MembershipProvider,
        Inventory,
        Audit,
        SlotInstance,
        PriceCalculator,
        SearchPriceCalculator,
        Search,
        BlobStorage,
        ShipmentProcessingDate,
        ProductImportParser,
        DataExchange,
        ProductDataExchangeImport,
        ProductDataExchangeExport,
        ProductPriceDataExchangeImport,
        ProductPriceDataExchangeExport,
        MailProvider,
        NotificationProvider,
        OrderImportParser,
        PromotionLineItemValidator,
        PickingMissionNumberGenerator,
        FulfillmentCarrier,
        FulfillmentRouting,
        TemplateRendering,
        TemplateOrderPrintRendering,
        UrlResolver,
    }
}

namespace Orckestra.Overture.Providers.MonerisPayment.ServiceModel
{

    ///<summary>
    ///Vault profile are external credit card token management.
    ///</summary>
    [Route("/monerisCanadaVaultProfile/carts/{ScopeId}/{CartName}/payments/{PaymentId}", "POST")]
    [Route("/monerisCanadaVaultProfile/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}", "POST")]
    [Api(Description="Vault profile are external credit card token management.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateCartPaymentVaultProfileRequest
        : ScopedRequest, IReturn<VaultProfileCreationResult>, IPost
    {
        ///<summary>
        ///The name of the cart associated with the payment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the cart associated with the payment", IsRequired=true)]
        public virtual string CartName { get; set; }

        ///<summary>
        ///The customer identifier associated with the cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer identifier associated with the cart", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The id of the payment associated with the draft order
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the payment associated with the draft order", IsRequired=true)]
        public virtual Guid PaymentId { get; set; }

        ///<summary>
        ///The tempory token returned by the payment provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tempory token returned by the payment provider")]
        public virtual string TemporaryToken { get; set; }

        ///<summary>
        ///The name on the credit card
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name on the credit card")]
        public virtual string CardHolderName { get; set; }

        ///<summary>
        ///The ip address issuing the request
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ip address issuing the request")]
        public virtual string IP { get; set; }

        ///<summary>
        ///A boolean to indicate to save the payment profile
        ///</summary>
        [DataMember]
        [ApiMember(Description="A boolean to indicate to save the payment profile")]
        public virtual bool CreatePaymentProfile { get; set; }

        ///<summary>
        ///Gets or sets the expected cart type of the existing cart, if it does not match, an exception will be thrown. Set to null or to an empty string to bypass the validation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the expected cart type of the existing cart, if it does not match, an exception will be thrown. Set to null or to an empty string to bypass the validation.")]
        public virtual string CartType { get; set; }
    }

    ///<summary>
    ///Vault profile are external credit card token management.
    ///</summary>
    [Route("/monerisCanadaVaultProfile/orderdraft/{ScopeId}/{DraftId}/payments/{PaymentId}", "POST")]
    [Api(Description="Vault profile are external credit card token management.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateOrderDraftPaymentVaultProfileRequest
        : ScopedRequest, IReturn<VaultProfileCreationResult>, IPost
    {
        ///<summary>
        ///The id of the draft order
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the draft order", IsRequired=true)]
        public virtual Guid DraftId { get; set; }

        ///<summary>
        ///The id of the payment associated with the draft order
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the payment associated with the draft order", IsRequired=true)]
        public virtual Guid PaymentId { get; set; }

        ///<summary>
        ///The id of the customer associated with the draft order
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the customer associated with the draft order", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The tempory token returned by the payment provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tempory token returned by the payment provider", IsRequired=true)]
        public virtual string TemporaryToken { get; set; }

        ///<summary>
        ///The name on the credit card
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name on the credit card", IsRequired=true)]
        public virtual string CardHolderName { get; set; }

        ///<summary>
        ///The ip address issuing the request
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ip address issuing the request")]
        public virtual string IP { get; set; }

        ///<summary>
        ///A boolean to indicate to save the payment profile
        ///</summary>
        [DataMember]
        [ApiMember(Description="A boolean to indicate to save the payment profile")]
        public virtual bool CreatePaymentProfile { get; set; }
    }

    [DataContract]
    public partial class VaultProfileCreationResult
    {
        ///<summary>
        ///The status of the vault profile creation
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status of the vault profile creation")]
        public virtual bool Success { get; set; }

        ///<summary>
        ///The updated payment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The updated payment")]
        public virtual Payment UpdatedPayment { get; set; }

        ///<summary>
        ///The error message of the operation
        ///</summary>
        [DataMember]
        [ApiMember(Description="The error message of the operation")]
        public virtual string ErrorMessage { get; set; }

        ///<summary>
        ///The error code of the operation
        ///</summary>
        [DataMember]
        [ApiMember(Description="The error code of the operation")]
        public virtual string ErrorCode { get; set; }
    }
}

namespace Orckestra.Overture.Routing
{

    public partial interface ICustomerIpRequest
    {
        string IP { get; set; }
    }

    public partial interface ICustomerRequest
    {
        Guid CustomerId { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel
{

    [DataContract]
    public partial class Address
    {
        ///<summary>
        ///Unique identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="Unique identifier")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///Name of the address. A customer/store/warehouse cannot have two addresses with the same name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Name of the address. A customer/store/warehouse cannot have two addresses with the same name.")]
        public virtual string AddressName { get; set; }

        ///<summary>
        ///City of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="City of the address")]
        public virtual string City { get; set; }

        ///<summary>
        ///2 letter country ISO code
        ///</summary>
        [DataMember]
        [ApiMember(Description="2 letter country ISO code")]
        public virtual string CountryCode { get; set; }

        ///<summary>
        ///2 letter region ISO code
        ///</summary>
        [DataMember]
        [ApiMember(Description="2 letter region ISO code")]
        public virtual string RegionCode { get; set; }

        ///<summary>
        ///the date the address was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the address was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the identifier of the operator who created the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the operator who created the address.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the date that the last modification was applied to the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date that the last modification was applied to the address.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the identifier of the operator who last modified the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the operator who last modified the address.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///First line of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="First line of the address")]
        public virtual string Line1 { get; set; }

        ///<summary>
        ///Second line of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Second line of the address")]
        public virtual string Line2 { get; set; }

        ///<summary>
        ///Resident first name
        ///</summary>
        [DataMember]
        [ApiMember(Description="Resident first name")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///Resident last name
        ///</summary>
        [DataMember]
        [ApiMember(Description="Resident last name")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///Phone number of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Phone number of the address")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///Phone extension of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Phone extension of the address")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///Postal code of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Postal code of the address")]
        public virtual string PostalCode { get; set; }

        ///<summary>
        ///Latitude coordinate of the Address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Latitude coordinate of the Address")]
        public virtual double? Latitude { get; set; }

        ///<summary>
        ///Longitude coordinate of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Longitude coordinate of the address")]
        public virtual double? Longitude { get; set; }

        ///<summary>
        ///Email
        ///</summary>
        [DataMember]
        [ApiMember(Description="Email")]
        public virtual string Email { get; set; }

        ///<summary>
        ///Notes
        ///</summary>
        [DataMember]
        [ApiMember(Description="Notes")]
        public virtual string Notes { get; set; }

        ///<summary>
        ///a boolean which specifies if this address should be used as a billing address in the case of multiple addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a boolean which specifies if this address should be used as a billing address in the case of multiple addresses.")]
        public virtual bool IsPreferredBilling { get; set; }

        ///<summary>
        ///a boolean which specifies if this address should be used as a shipping address in the case of multiple addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a boolean which specifies if this address should be used as a shipping address in the case of multiple addresses.")]
        public virtual bool IsPreferredShipping { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this command.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this command.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class AddressInfo
    {
        ///<summary>
        ///Unique identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="Unique identifier")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///City of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="City of the address")]
        public virtual string City { get; set; }

        ///<summary>
        ///2 letter country ISO code
        ///</summary>
        [DataMember]
        [ApiMember(Description="2 letter country ISO code")]
        public virtual string CountryCode { get; set; }

        ///<summary>
        ///2 letter region ISO code
        ///</summary>
        [DataMember]
        [ApiMember(Description="2 letter region ISO code")]
        public virtual string RegionCode { get; set; }

        ///<summary>
        ///First line of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="First line of the address")]
        public virtual string Line1 { get; set; }

        ///<summary>
        ///Second line of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Second line of the address")]
        public virtual string Line2 { get; set; }

        ///<summary>
        ///Postal code of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Postal code of the address")]
        public virtual string PostalCode { get; set; }

        ///<summary>
        ///Latitude coordinate of the Address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Latitude coordinate of the Address")]
        public virtual double? Latitude { get; set; }

        ///<summary>
        ///Longitude coordinate of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Longitude coordinate of the address")]
        public virtual double? Longitude { get; set; }

        ///<summary>
        ///a boolean which specifies whether this address is the customer's preferred choice for Billing. (Only applicable to Customer addresses)
        ///</summary>
        [DataMember]
        [ApiMember(Description="a boolean which specifies whether this address is the customer's preferred choice for Billing. (Only applicable to Customer addresses)")]
        public virtual bool IsPreferredBilling { get; set; }

        ///<summary>
        ///a boolean which specifies whether this address is the customer's preferred choice for Shipping. (Only applicable to Customer addresses)
        ///</summary>
        [DataMember]
        [ApiMember(Description="a boolean which specifies whether this address is the customer's preferred choice for Shipping. (Only applicable to Customer addresses)")]
        public virtual bool IsPreferredShipping { get; set; }
    }

    [DataContract]
    public partial class AuthenticatedStatus
    {
        ///<summary>
        ///The authentication status of the user
        ///</summary>
        [DataMember]
        [ApiMember(Description="The authentication status of the user")]
        public virtual bool Status { get; set; }
    }

    [DataContract]
    public partial class AuthenticationConfiguration
    {
        ///<summary>
        ///The federation configuration used when the authentication information is carried within a cookie
        ///</summary>
        [DataMember]
        [ApiMember(Description="The federation configuration used when the authentication information is carried within a cookie")]
        public virtual FederationConfiguration FederationConfiguration { get; set; }
    }

    [DataContract]
    public partial class AuthorizedScope
    {
        public AuthorizedScope()
        {
            ChildrenIds = new List<string>{};
            Children = new List<AuthorizedScope>{};
        }

        ///<summary>
        ///The unique identifier of the Scope. 
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Scope. ", IsRequired=true)]
        public virtual string Id { get; set; }

        ///<summary>
        ///The ScopeType of the Scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ScopeType of the Scope")]
        public virtual ScopeType Type { get; set; }

        ///<summary>
        ///The display name of the Scope that will be primarily used for Display purpose.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name of the Scope that will be primarily used for Display purpose.")]
        public virtual LocalizedString Name { get; set; }

        ///<summary>
        ///The Description for the scope to help the consumer understand what the Scope is for.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Description for the scope to help the consumer understand what the Scope is for.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///The list of the childrend ids
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of the childrend ids")]
        public virtual List<string> ChildrenIds { get; set; }

        ///<summary>
        ///The children of the Scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="The children of the Scope")]
        public virtual List<AuthorizedScope> Children { get; set; }

        ///<summary>
        ///The parent scope id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The parent scope id")]
        public virtual string ParentScopeId { get; set; }

        ///<summary>
        ///Default culture for the scope. e.g.: en-US
        ///</summary>
        [DataMember]
        [ApiMember(Description="Default culture for the scope. e.g.: en-US")]
        public virtual string DefaultCulture { get; set; }

        ///<summary>
        ///Currency for the scope. e.g.: CAD or USD
        ///</summary>
        [DataMember]
        [ApiMember(Description="Currency for the scope. e.g.: CAD or USD")]
        public virtual Currency Currency { get; set; }

        ///<summary>
        ///Currency iso code for the scope. e.g.: CAD or USD
        ///</summary>
        [DataMember]
        [ApiMember(Description="Currency iso code for the scope. e.g.: CAD or USD")]
        public virtual string CurrencyIso { get; set; }

        ///<summary>
        ///Start date for the scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="Start date for the scope")]
        public virtual DateTime? StartDate { get; set; }

        ///<summary>
        ///End date for the scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="End date for the scope")]
        public virtual DateTime? EndDate { get; set; }

        ///<summary>
        ///Whether or not the Scope is active
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the Scope is active")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///Whether or not the Scope is authorized for the user
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the Scope is authorized for the user")]
        public virtual bool IsAuthorizedScope { get; set; }

        ///<summary>
        ///Whether or not the Scope is the default one for the user
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the Scope is the default one for the user")]
        public virtual bool IsDefaultScope { get; set; }

        ///<summary>
        ///The number used for ordering the Scope in a list
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number used for ordering the Scope in a list")]
        public virtual int SequenceNumber { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class Country
        : EntityBase<string>
    {
        public Country()
        {
            Regions = new List<Region>{};
        }

        ///<summary>
        ///The official political name given for the Country
        ///</summary>
        [DataMember]
        [ApiMember(Description="The official political name given for the Country")]
        public virtual LocalizedString Name { get; set; }

        ///<summary>
        ///The number used for ordering the Country in a list
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number used for ordering the Country in a list")]
        public virtual int SortOrder { get; set; }

        ///<summary>
        ///Two letter code that identifies Country uniquely
        ///</summary>
        [DataMember]
        [ApiMember(Description="Two letter code that identifies Country uniquely", IsRequired=true)]
        public virtual string IsoCode { get; set; }

        ///<summary>
        ///The list of Region associated to the Country
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of Region associated to the Country")]
        public virtual List<Region> Regions { get; set; }

        ///<summary>
        ///The Country's postal code validation regular expression
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Country's postal code validation regular expression")]
        public virtual string PostalCodeRegex { get; set; }

        ///<summary>
        ///The Country's telephone validation regular expression
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Country's telephone validation regular expression")]
        public virtual string PhoneRegex { get; set; }

        ///<summary>
        ///The indicator specifying if the Country is supported by the merchant
        ///</summary>
        [DataMember]
        [ApiMember(Description="The indicator specifying if the Country is supported by the merchant")]
        public virtual bool IsSupported { get; set; }
    }

    [DataContract]
    public partial class Currency
    {
        ///<summary>
        ///The unique identifier for the currency
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the currency")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The iso code of the currency
        ///</summary>
        [DataMember]
        [ApiMember(Description="The iso code of the currency")]
        public virtual string IsoCode { get; set; }

        ///<summary>
        ///The currency symbol 
        ///</summary>
        [DataMember]
        [ApiMember(Description="The currency symbol ")]
        public virtual string Symbol { get; set; }

        ///<summary>
        ///The sorting order of the currency.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sorting order of the currency.")]
        public virtual int SortOrder { get; set; }

        ///<summary>
        ///UI compatible display name of the currency.
        ///</summary>
        [DataMember]
        [ApiMember(Description="UI compatible display name of the currency.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///Wheter the currency is supported by the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Wheter the currency is supported by the system.")]
        public virtual bool IsSupported { get; set; }

        ///<summary>
        ///The number of decimals precision of the currency.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of decimals precision of the currency.")]
        public virtual int Precision { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class DateRange
    {
        ///<summary>
        ///The starting date of the range
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting date of the range")]
        public virtual DateTime Start { get; set; }

        ///<summary>
        ///The ending date of the range
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ending date of the range")]
        public virtual DateTime End { get; set; }
    }

    [DataContract]
    public partial class EntityBase<TId>
    {
        ///<summary>
        ///The unique identifier of the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the entity.", IsRequired=true)]
        public virtual TId Id { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class FederationConfiguration
    {
        ///<summary>
        ///Name of cookie carrying the authentication cookie.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Name of cookie carrying the authentication cookie.")]
        public virtual string CookieName { get; set; }

        ///<summary>
        ///Thumbprint of the certificate that was used to encrypt the cookie
        ///</summary>
        [DataMember]
        [ApiMember(Description="Thumbprint of the certificate that was used to encrypt the cookie")]
        public virtual string EncryptionCertificateThumprint { get; set; }
    }

    [DataContract]
    public partial class LocalizedDraftState
    {
        ///<summary>
        ///The draft states for cultures
        ///</summary>
        [DataMember]
        [ApiMember(Description="The draft states for cultures")]
        public virtual IDictionary<string, DraftState> Values { get; set; }
    }

    [DataContract]
    public enum OvertureModule
    {
        Product = 1,
        Customer = 2,
        Order = 3,
        Marketing = 4,
        Reports = 5,
        Administration = 6,
        UserManagement = 7,
        PriceManagement = 8,
        Location = 9,
    }

    [DataContract]
    public partial class Range<T>
    {
        ///<summary>
        ///the beginning of the range.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the beginning of the range.")]
        public virtual T Start { get; set; }

        ///<summary>
        ///the end of the range.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the end of the range.")]
        public virtual T End { get; set; }
    }

    [DataContract]
    public partial class Region
        : EntityBase<string>
    {
        ///<summary>
        ///The official political name given for the Region
        ///</summary>
        [DataMember]
        [ApiMember(Description="The official political name given for the Region")]
        public virtual LocalizedString Name { get; set; }

        ///<summary>
        ///The number used for ordering the Region in a list
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number used for ordering the Region in a list")]
        public virtual int SortOrder { get; set; }

        ///<summary>
        ///The four letter iso code identifying the Region uniquely
        ///</summary>
        [DataMember]
        [ApiMember(Description="The four letter iso code identifying the Region uniquely")]
        public virtual string IsoCode { get; set; }

        ///<summary>
        ///The Id of the Country parent of this Region
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Id of the Country parent of this Region", IsRequired=true)]
        public virtual string CountryId { get; set; }

        ///<summary>
        ///The indicator specifying if the Region is supported by the merchant
        ///</summary>
        [DataMember]
        [ApiMember(Description="The indicator specifying if the Region is supported by the merchant")]
        public virtual bool IsSupported { get; set; }
    }

    [DataContract]
    public partial class Scope
    {
        public Scope()
        {
            ChildrenIds = new List<string>{};
            Children = new List<Scope>{};
        }

        ///<summary>
        ///The unique identifier of the Scope. 
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Scope. ", IsRequired=true)]
        public virtual string Id { get; set; }

        ///<summary>
        ///The ScopeType of the Scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ScopeType of the Scope")]
        public virtual ScopeType Type { get; set; }

        ///<summary>
        ///The display name of the Scope that will be primarily used for Display purpose.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name of the Scope that will be primarily used for Display purpose.")]
        public virtual LocalizedString Name { get; set; }

        ///<summary>
        ///The Description for the scope to help the consumer understand what the Scope is for.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Description for the scope to help the consumer understand what the Scope is for.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///The list of the childrend ids
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of the childrend ids")]
        public virtual List<string> ChildrenIds { get; set; }

        ///<summary>
        ///The children of the Scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="The children of the Scope")]
        public virtual List<Scope> Children { get; set; }

        ///<summary>
        ///The parent scope id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The parent scope id")]
        public virtual string ParentScopeId { get; set; }

        ///<summary>
        ///Default culture for the scope. e.g.: en-US
        ///</summary>
        [DataMember]
        [ApiMember(Description="Default culture for the scope. e.g.: en-US")]
        public virtual string DefaultCulture { get; set; }

        ///<summary>
        ///Currency for the scope. e.g.: CAD or USD
        ///</summary>
        [DataMember]
        [ApiMember(Description="Currency for the scope. e.g.: CAD or USD")]
        public virtual Currency Currency { get; set; }

        ///<summary>
        ///Currency iso code for the scope. e.g.: CAD or USD
        ///</summary>
        [DataMember]
        [ApiMember(Description="Currency iso code for the scope. e.g.: CAD or USD")]
        public virtual string CurrencyIso { get; set; }

        ///<summary>
        ///Start date for the scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="Start date for the scope")]
        public virtual DateTime? StartDate { get; set; }

        ///<summary>
        ///End date for the scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="End date for the scope")]
        public virtual DateTime? EndDate { get; set; }

        ///<summary>
        ///Whether or not the Scope is active
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the Scope is active")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The number used for ordering the Scope in a list
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number used for ordering the Scope in a list")]
        public virtual int SequenceNumber { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class ScopeAssociation
    {
        ///<summary>
        ///The name (business key) of the Scope associated to the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name (business key) of the Scope associated to the entity.")]
        public virtual string ScopeName { get; set; }

        ///<summary>
        ///The date at which the association was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date at which the association was created.")]
        public virtual DateTime Created { get; set; }
    }

    [DataContract]
    public partial class ScopedEntityBase<TId>
        : EntityBase<TId>
    {
        ///<summary>
        ///The scope in which the entity is.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope in which the entity is.", IsRequired=true)]
        public virtual string ScopeId { get; set; }
    }

    [DataContract]
    public enum ScopeType
    {
        Global = 1,
        Sale = 2,
        Dependant = 3,
        Virtual = 4,
    }

    [DataContract]
    public partial class Template
        : EntityBase<Guid>
    {
        public Template()
        {
            Contents = new List<TemplateContent>{};
        }

        ///<summary>
        ///The template name
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template name", IsRequired=true)]
        [StringLength(50)]
        public virtual string Name { get; set; }

        ///<summary>
        ///The template description
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template description")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///The list of Template Content associated to the Template
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of Template Content associated to the Template")]
        public virtual List<TemplateContent> Contents { get; set; }

        ///<summary>
        ///The template display name
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template display name")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The template scope id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template scope id")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The template active flag
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template active flag")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The template creation date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template creation date")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The template latest modification date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template latest modification date")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The template creator
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template creator")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The template latest editor
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template latest editor")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///The template type
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template type")]
        public virtual TemplateType Type { get; set; }
    }

    [DataContract]
    public partial class TemplateContent
        : EntityBase<string>
    {
        ///<summary>
        ///The template content name
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template content name", IsRequired=true)]
        [StringLength(50)]
        public virtual string Name { get; set; }

        ///<summary>
        ///The Id of the Template parent of this TemplateContent
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Id of the Template parent of this TemplateContent", IsRequired=true)]
        public virtual string TemplateId { get; set; }

        ///<summary>
        ///The template content
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template content")]
        public virtual LocalizedString Content { get; set; }
    }

    [DataContract]
    public enum TemplateType
    {
        Unknown = 0,
        Email = 1,
        Shipment = 3,
        HtmlDocument = 4,
    }

    [DataContract]
    public partial class TimeZone
        : EntityBase<string>
    {
        ///<summary>
        ///The general display name that represents the time zone
        ///</summary>
        [DataMember]
        [ApiMember(Description="The general display name that represents the time zone")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///The time difference between the current time zone's standard time and Coordinated Universal Time (UTC)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time difference between the current time zone's standard time and Coordinated Universal Time (UTC)")]
        public virtual double BaseUtcOffset { get; set; }

        ///<summary>
        ///Whether the time zone has any daylight saving time rules
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the time zone has any daylight saving time rules")]
        public virtual bool SupportsDaylightSavingTime { get; set; }
    }

    [DataContract]
    public partial class TrackingEntityBase<TId>
        : EntityBase<TId>
    {
        ///<summary>
        ///Date the entity was created
        ///</summary>
        [DataMember]
        [ApiMember(Description="Date the entity was created")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///Identifier of the operator who created the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="Identifier of the operator who created the entity")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///Date that the last modification was applied to the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="Date that the last modification was applied to the entity")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///Identifier of the operator who last modified the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="Identifier of the operator who last modified the entity")]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract]
    public partial class UtcOffsetForTimeZone
    {
        ///<summary>
        ///The offset of a timezone from UTC
        ///</summary>
        [DataMember]
        [ApiMember(Description="The offset of a timezone from UTC")]
        public virtual TimeSpan Offset { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Administration
{

    [DataContract]
    public partial class CronTrigger
    {
        ///<summary>
        ///the trigger name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the trigger name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the trigger affinity group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the trigger affinity group.")]
        public virtual string Group { get; set; }

        ///<summary>
        ///the trigger description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the trigger description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the cron expression time zone.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cron expression time zone.")]
        public virtual string TimeZone { get; set; }

        ///<summary>
        ///the cron expression string.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cron expression string.")]
        public virtual string CronExpression { get; set; }
    }

    [DataContract]
    public partial class RunningScheduledTaskInfo
    {
        ///<summary>
        ///the name of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the scheduled job.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the affinity group of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the affinity group of the scheduled job.")]
        public virtual string Group { get; set; }

        ///<summary>
        ///the task input properties.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the task input properties.")]
        public virtual IDictionary<string, Object> Inputs { get; set; }

        ///<summary>
        ///the identifier of the executing task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the executing task.")]
        public virtual Guid TaskId { get; set; }

        ///<summary>
        ///the trigger which fired the job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the trigger which fired the job.")]
        public virtual TriggerInfo Trigger { get; set; }

        ///<summary>
        ///the actual time the trigger fired.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the actual time the trigger fired.")]
        public virtual DateTime FireTimeUtc { get; set; }

        ///<summary>
        ///the identifier of the scheduler instance running the job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the scheduler instance running the job.")]
        public virtual string SchedulerInstanceId { get; set; }

        ///<summary>
        ///the name of the scheduler running the job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the scheduler running the job.")]
        public virtual string SchedulerName { get; set; }
    }

    [DataContract]
    public partial class ScheduledTaskInfo
    {
        public ScheduledTaskInfo()
        {
            Triggers = new List<TriggerInfo>{};
        }

        ///<summary>
        ///the name of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the scheduled job.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the affinity group of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the affinity group of the scheduled job.")]
        public virtual string Group { get; set; }

        ///<summary>
        ///Gets or sets the scheduled task's activity type name or the workflow path
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the scheduled task's activity type name or the workflow path")]
        public virtual string ActivityTypeNameOrWorkflowPath { get; set; }

        ///<summary>
        ///Gets or sets the scheduled task's type: ActivityClassBased or WorkflowFileBased
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the scheduled task's type: ActivityClassBased or WorkflowFileBased")]
        public virtual ScheduledTaskType Type { get; set; }

        ///<summary>
        ///the task input properties.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the task input properties.")]
        public virtual IDictionary<string, Object> Inputs { get; set; }

        ///<summary>
        ///the task job triggers.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the task job triggers.")]
        public virtual List<TriggerInfo> Triggers { get; set; }
    }

    [DataContract]
    public enum ScheduledTaskType
    {
        ActivityClassBased,
        WorkflowFileBased,
    }

    [DataContract]
    public partial class TaskExecutionLogEntry
    {
        ///<summary>
        ///The unique Id of the log entry
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique Id of the log entry")]
        public virtual string Id { get; set; }

        ///<summary>
        ///Get or set the unique Guid task identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="Get or set the unique Guid task identifier")]
        public virtual string TaskId { get; set; }

        ///<summary>
        ///The TaskLogLevel of the task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The TaskLogLevel of the task.")]
        public virtual TaskLogLevel LogLevel { get; set; }

        ///<summary>
        ///The message logged in the entry
        ///</summary>
        [DataMember]
        [ApiMember(Description="The message logged in the entry")]
        public virtual string Message { get; set; }

        ///<summary>
        ///The time of execution at which the entry was made
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time of execution at which the entry was made")]
        public virtual DateTime ExecutionTime { get; set; }
    }

    [DataContract]
    public partial class TaskInfo
    {
        ///<summary>
        ///The unique Id for the task
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique Id for the task")]
        public virtual Guid TaskId { get; set; }

        ///<summary>
        ///The task name
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task name")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The type of the current task
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the current task")]
        public virtual string Type { get; set; }

        ///<summary>
        ///The task current status
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task current status")]
        public virtual TaskStatus Status { get; set; }

        ///<summary>
        ///The user who requested the task
        ///</summary>
        [DataMember]
        [ApiMember(Description="The user who requested the task")]
        public virtual string Requester { get; set; }

        ///<summary>
        ///The date at which the task was created
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date at which the task was created")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The date at which the task was modified
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date at which the task was modified")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The url to a a resource containing the result of the task execution
        ///</summary>
        [DataMember]
        [ApiMember(Description="The url to a a resource containing the result of the task execution")]
        public virtual string ResultBlobUrl { get; set; }

        ///<summary>
        ///Gets the property bag containing input arguments for this task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets the property bag containing input arguments for this task.")]
        public virtual PropertyBag InputArguments { get; set; }

        ///<summary>
        ///The property bag containing output arguments for this task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing output arguments for this task.")]
        public virtual PropertyBag OutputArguments { get; set; }

        ///<summary>
        ///The number of log entries.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of log entries.")]
        public virtual int LogEntriesCount { get; set; }

        ///<summary>
        ///The reason why the task faulted, if relevant.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reason why the task faulted, if relevant.")]
        public virtual string FaultedReason { get; set; }

        ///<summary>
        ///Value indicating whether a task must be run as part of the specific sequence that the tasks were queued rather than being run at the same time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Value indicating whether a task must be run as part of the specific sequence that the tasks were queued rather than being run at the same time.")]
        public virtual bool IsSequential { get; set; }

        ///<summary>
        ///The number of the task in the sequence it is part of.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of the task in the sequence it is part of.")]
        public virtual long? SequenceNumber { get; set; }

        ///<summary>
        ///The name to identify the sequence that this task is part of. Tasks that must execute in sequence must share the same SequenceGroup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name to identify the sequence that this task is part of. Tasks that must execute in sequence must share the same SequenceGroup")]
        public virtual string SequenceGroup { get; set; }

        ///<summary>
        ///Value indicating what is the expected maximum sequence count.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Value indicating what is the expected maximum sequence count.")]
        public virtual int? SequenceQuota { get; set; }

        ///<summary>
        ///The correlation id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id.")]
        public virtual Guid CorrelationId { get; set; }

        ///<summary>
        ///Gets or sets the type of the workflow activity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the type of the workflow activity.")]
        public virtual string WorkflowActivityType { get; set; }

        ///<summary>
        ///Gets or sets the relative workflow xaml path.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the relative workflow xaml path.")]
        public virtual string WorkflowXamlPath { get; set; }

        ///<summary>
        ///Gets or sets the number of retries to execute the task or resuming a bookmark.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the number of retries to execute the task or resuming a bookmark.")]
        public virtual int RetryCount { get; set; }
    }

    [DataContract]
    public enum TaskLogLevel
    {
        Info,
        Warning,
        Error,
    }

    [DataContract]
    public enum TaskStatus
    {
        Created,
        WaitingToRun,
        Running,
        RanToCompletion,
        Canceled,
        Faulted,
        Idle,
        WaitingToCancel,
        Ignored,
        QueuedForSequence,
        IdleAfterErrorRecovery,
        WaitingToRetry,
        IdleAfterFault,
    }

    [DataContract]
    public partial class TriggerInfo
        : CronTrigger
    {
        ///<summary>
        ///the next time at which the trigger is scheduled to fire.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the next time at which the trigger is scheduled to fire.")]
        public virtual DateTime NextFireTimeUtc { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Configuration
{

    [DataContract]
    public partial class Culture
    {
        ///<summary>
        ///the culture ISO name (ex: en-US)
        ///</summary>
        [DataMember]
        [ApiMember(Description="the culture ISO name (ex: en-US)")]
        public virtual string CultureIso { get; set; }

        ///<summary>
        ///the friendly name of the culture, in US english
        ///</summary>
        [DataMember]
        [ApiMember(Description="the friendly name of the culture, in US english")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///the sorting order
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sorting order")]
        public virtual int SortOrder { get; set; }

        ///<summary>
        ///A value indicating whether the culture is the default culture configured for Overture
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the culture is the default culture configured for Overture")]
        public virtual bool IsDefault { get; set; }

        ///<summary>
        ///a value indicating whether this culture is supported for this installation of Overture
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this culture is supported for this installation of Overture")]
        public virtual bool IsSupported { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Content
{

    [DataContract]
    public partial class TemplateVariable
        : ScopedEntityBase<Guid>
    {
        ///<summary>
        ///The template variable's name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template variable's name.", IsRequired=true)]
        [Required]
        [StringLength(50)]
        public virtual string Name { get; set; }

        ///<summary>
        ///The template variable's description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template variable's description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The template variable's value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template variable's value.")]
        public virtual LocalizedString Value { get; set; }

        ///<summary>
        ///The date that this entity was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date that this entity was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The date that this entity was last modified.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date that this entity was last modified.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///A value indicating who created this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating who created this entity.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///A value indicating who last modified this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating who last modified this entity.")]
        public virtual string LastModifiedBy { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Customers
{

    [DataContract]
    public enum AccountStatus
    {
        Active,
        Inactive,
        RequiresApproval,
    }

    [DataContract]
    public partial class AvailabilityStatus
    {
        ///<summary>
        ///Indicates whether the entity is available.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the entity is available.")]
        public virtual bool IsAvailable { get; set; }

        ///<summary>
        ///The reason for the interruption.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reason for the interruption.")]
        public virtual string Reason { get; set; }

        ///<summary>
        ///The estimated duration of the interruption.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The estimated duration of the interruption.")]
        public virtual Duration EstimatedDuration { get; set; }
    }

    [DataContract]
    public partial class Customer
        : EntityBase<Guid>
    {
        public Customer()
        {
            AddressIds = new List<Guid>{};
            Addresses = new List<Address>{};
            OrganizationIds = new List<Guid>{};
            StoreIds = new List<Guid>{};
            PaymentProfileIds = new List<Guid>{};
        }

        ///<summary>
        ///The current status of the customer account.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The current status of the customer account.")]
        [Required]
        public virtual AccountStatus AccountStatus { get; set; }

        ///<summary>
        ///A list of system-wide identifier uniquely identifying each Customer Address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of system-wide identifier uniquely identifying each Customer Address.")]
        public virtual List<Guid> AddressIds { get; set; }

        ///<summary>
        ///A list of the Customer's Addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of the Customer's Addresses.")]
        public virtual List<Address> Addresses { get; set; }

        ///<summary>
        ///the date the customer was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the customer was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the date that the last modification was applied to the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date that the last modification was applied to the customer.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the email associated with the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email associated with the customer.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///the first name of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the first name of the customer.")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///the last name of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the last name of the customer.")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///the secret question for the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the secret question for the customer.")]
        public virtual string PasswordQuestion { get; set; }

        ///<summary>
        ///the extension, if any, for the telephone number of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension, if any, for the telephone number of the customer.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///the telephone number of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the telephone number of the customer.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///the type of customer (Registered, Guest).
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of customer (Registered, Guest).")]
        [Required]
        public virtual CustomerType CustomerType { get; set; }

        ///<summary>
        ///a string of character representing a unique name used for the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a string of character representing a unique name used for the customer.")]
        public virtual string Username { get; set; }

        ///<summary>
        ///the number for the cellular of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number for the cellular of the customer.")]
        public virtual string CellNumber { get; set; }

        ///<summary>
        ///the phone number at the work place of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the phone number at the work place of the customer.")]
        public virtual string PhoneNumberWork { get; set; }

        ///<summary>
        ///the extension, if any, for the work phone number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension, if any, for the work phone number.")]
        public virtual string PhoneExtensionWork { get; set; }

        ///<summary>
        ///the number to use for the customer fax.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number to use for the customer fax.")]
        public virtual string FaxNumber { get; set; }

        ///<summary>
        ///the extension, if any, for the customer fax.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension, if any, for the customer fax.")]
        public virtual string FaxExtension { get; set; }

        ///<summary>
        ///the preferred communication language of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the preferred communication language of the customer.")]
        public virtual string Language { get; set; }

        ///<summary>
        ///the identifier of the operator who created the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the operator who created the customer.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the identifier of the operator who last modified the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the operator who last modified the customer.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///the date where the customer last interacted with the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date where the customer last interacted with the system.")]
        public virtual DateTime LastActivityDate { get; set; }

        ///<summary>
        ///the date where the customer last logged in the e-commerce website.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date where the customer last logged in the e-commerce website.")]
        public virtual DateTime LastLoginDate { get; set; }

        ///<summary>
        ///the date at which the customer last order was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date at which the customer last order was created.")]
        public virtual DateTime LastOrderDate { get; set; }

        ///<summary>
        ///the order number of the last order of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order number of the last order of the customer.")]
        public virtual string LastOrderNumber { get; set; }

        ///<summary>
        ///the currency used for the customer last order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the currency used for the customer last order.")]
        public virtual string LastOrderCurrency { get; set; }

        ///<summary>
        ///the status of the customer last order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the status of the customer last order.")]
        public virtual string LastOrderStatus { get; set; }

        ///<summary>
        ///the total amount of the customer last order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the total amount of the customer last order.")]
        public virtual decimal LastOrderTotal { get; set; }

        ///<summary>
        ///the total quantity of items for the last order of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the total quantity of items for the last order of the customer.")]
        public virtual int LastOrderItemsCount { get; set; }

        ///<summary>
        ///the total quantity of line items for the last order of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the total quantity of line items for the last order of the customer.")]
        public virtual int LastOrderLineItemsCount { get; set; }

        ///<summary>
        ///the date where the customer last changed his password.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date where the customer last changed his password.")]
        public virtual DateTime LastPasswordChanged { get; set; }

        ///<summary>
        ///the middle name of the person.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the middle name of the person.")]
        public virtual string MiddleName { get; set; }

        ///<summary>
        ///a value indicating whether this customer is a recurring buyer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this customer is a recurring buyer.")]
        public virtual bool IsRecurringBuyer { get; set; }

        ///<summary>
        ///the id of the customer's preferred store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the customer's preferred store.")]
        public virtual Guid PreferredStoreId { get; set; }

        ///<summary>
        ///the time when the account lock down expires.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the time when the account lock down expires.")]
        public virtual DateTime? AccountLockedDownUntil { get; set; }

        ///<summary>
        ///A list of system-wide identifier uniquely identifying each customer's Organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of system-wide identifier uniquely identifying each customer's Organization.")]
        public virtual List<Guid> OrganizationIds { get; set; }

        ///<summary>
        ///A list of system-wide identifier uniquely identifying each customer's Store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of system-wide identifier uniquely identifying each customer's Store.")]
        public virtual List<Guid> StoreIds { get; set; }

        ///<summary>
        ///A list of system-wide identifier uniquely identifying each customer's Payment Profile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of system-wide identifier uniquely identifying each customer's Payment Profile.")]
        public virtual List<Guid> PaymentProfileIds { get; set; }
    }

    [DataContract]
    public partial class CustomerIndexingInformation
        : Customer
    {
        public CustomerIndexingInformation()
        {
            Organizations = new List<Organization>{};
            Stores = new List<Store>{};
            PaymentProfiles = new List<PaymentProfile>{};
            Scopes = new List<string>{};
        }

        ///<summary>
        ///The list of organizations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of organizations.")]
        public virtual List<Organization> Organizations { get; set; }

        ///<summary>
        ///The list of stores.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of stores.")]
        public virtual List<Store> Stores { get; set; }

        ///<summary>
        ///The list of payment profiles.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of payment profiles.")]
        public virtual List<PaymentProfile> PaymentProfiles { get; set; }

        ///<summary>
        ///The list of associated scopes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of associated scopes.")]
        public virtual List<string> Scopes { get; set; }
    }

    [DataContract]
    public partial class CustomerInfo
    {
        public CustomerInfo()
        {
            AddressIds = new List<Guid>{};
            Addresses = new List<AddressInfo>{};
        }

        ///<summary>
        ///The unique identifier of the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the entity.", IsRequired=true)]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The current status (active/inactive/requires approval) of the customer account.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The current status (active/inactive/requires approval) of the customer account.")]
        public virtual AccountStatus AccountStatus { get; set; }

        ///<summary>
        ///The preferred address's Id. (selected by business rule)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The preferred address's Id. (selected by business rule)")]
        public virtual List<Guid> AddressIds { get; set; }

        ///<summary>
        ///The preferred address. (selected by business rule)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The preferred address. (selected by business rule)")]
        public virtual List<AddressInfo> Addresses { get; set; }

        ///<summary>
        ///The date the customer was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the customer was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The date that the last modification was applied to the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date that the last modification was applied to the customer.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The email associated to the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The email associated to the customer.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///The first name of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The first name of the customer.")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///The last name of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The last name of the customer.")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///The extension, if any, for the telephone number of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The extension, if any, for the telephone number of the customer.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///The telephone number of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The telephone number of the customer.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///The type of customer (Registered, Guest).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of customer (Registered, Guest).")]
        public virtual CustomerType CustomerType { get; set; }

        ///<summary>
        ///The preferred communication language of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The preferred communication language of the customer.")]
        public virtual string Language { get; set; }

        ///<summary>
        ///The date where the customer last interacted with the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date where the customer last interacted with the system.")]
        public virtual DateTime LastActivityDate { get; set; }

        ///<summary>
        ///The date where the customer last logged in the e-commerce website.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date where the customer last logged in the e-commerce website.")]
        public virtual DateTime LastLoginDate { get; set; }

        ///<summary>
        ///The date at which the customer last order was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date at which the customer last order was created.")]
        public virtual DateTime LastOrderDate { get; set; }

        ///<summary>
        ///The total amount of the customer last order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total amount of the customer last order.")]
        public virtual decimal LastOrderTotal { get; set; }

        ///<summary>
        ///The total quantity of items for the last order of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total quantity of items for the last order of the customer.")]
        public virtual int LastOrderItemsCount { get; set; }

        ///<summary>
        ///the total quantity of line items for the last order of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the total quantity of line items for the last order of the customer.")]
        public virtual int LastOrderLineItemsCount { get; set; }

        ///<summary>
        ///The date where the customer last changed his password.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date where the customer last changed his password.")]
        public virtual DateTime LastPasswordChanged { get; set; }

        ///<summary>
        ///A value indicating whether this customer is a recurring buyer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this customer is a recurring buyer.")]
        public virtual bool IsRecurringBuyer { get; set; }
    }

    [DataContract]
    public partial class CustomerQueryResult
        : QueryResult<Customer>
    {
    }

    [DataContract]
    public enum CustomerType
    {
        Registered,
        Guest,
        Unregistered,
    }

    [DataContract]
    public partial class CustomProfile
        : TrackingEntityBase<Guid>
    {
        ///<summary>
        ///Unique name given to identify the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Unique name given to identify the entity.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The sort order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sort order.")]
        public virtual int SequenceNumber { get; set; }

        ///<summary>
        ///Indicate whether this entity can be used in business processes or linked to a scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicate whether this entity can be used in business processes or linked to a scope.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///Entity type name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Entity type name.")]
        public virtual string EntityTypeName { get; set; }
    }

    [DataContract]
    public partial class DailySchedule
    {
        public DailySchedule()
        {
            OpeningTimes = new List<ScheduleInterval>{};
        }

        ///<summary>
        ///Indicates whether the store/warehouse is closed on that day of the week.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the store/warehouse is closed on that day of the week.")]
        public virtual bool IsClosed { get; set; }

        ///<summary>
        ///The time intervals of the day during which the store/warehouse is open.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time intervals of the day during which the store/warehouse is open.")]
        public virtual List<ScheduleInterval> OpeningTimes { get; set; }

        ///<summary>
        ///the day of the week to which this daily schedule applies.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the day of the week to which this daily schedule applies.")]
        public virtual DayOfWeek Day { get; set; }

        ///<summary>
        ///Indicates whether the store/warehouse is opened all day on that day of the week.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the store/warehouse is opened all day on that day of the week.")]
        public virtual bool IsOpenedAllDay { get; set; }
    }

    [DataContract]
    public partial class DailyScheduleException
    {
        ///<summary>
        ///The unique identifier for this exception.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for this exception.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The name given for the exception for identification purpose.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name given for the exception for identification purpose.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///Indicates whether the Store/Warehouse is closed on that day.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the Store/Warehouse is closed on that day.")]
        public virtual bool IsClosed { get; set; }

        ///<summary>
        ///The time of day when the Store/Warehouse is open.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time of day when the Store/Warehouse is open.")]
        public virtual ScheduleInterval OpeningTime { get; set; }

        ///<summary>
        ///The date on which the exception starts.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date on which the exception starts.")]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///Gets or sets the date on which the exception ends.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the date on which the exception ends.")]
        public virtual DateTime EndDate { get; set; }

        ///<summary>
        ///Indicating whether the exception is recurrent, thus applying on the same date every year.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicating whether the exception is recurrent, thus applying on the same date every year.")]
        public virtual bool IsRecurrent { get; set; }
    }

    [DataContract]
    public partial class Duration
    {
        ///<summary>
        ///the number of minutes/hours/days for this duration.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number of minutes/hours/days for this duration.")]
        public virtual double Time { get; set; }

        ///<summary>
        /// Gets or sets the time scale.
        ///</summary>
        [DataMember]
        [ApiMember(Description=" Gets or sets the time scale.")]
        public virtual TimeScale TimeScale { get; set; }
    }

    [DataContract]
    public partial class FindOrganizationsQueryResult
        : QueryResult<Organization>
    {
    }

    [DataContract]
    public partial class FindProfileInstancesQueryResult
        : QueryResult<CustomProfile>
    {
    }

    [DataContract]
    public partial class FulfillmentSchedule
    {
        public FulfillmentSchedule()
        {
            OpeningHours = new List<DailySchedule>{};
            OpeningHourExceptions = new List<DailyScheduleException>{};
        }

        ///<summary>
        ///A unique identifier for the FulfillmentLocation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A unique identifier for the FulfillmentLocation.")]
        public virtual string FulfillmentLocationId { get; set; }

        ///<summary>
        ///This collection will contain one OpeningHour for each calendar week day.
        ///</summary>
        [DataMember]
        [ApiMember(Description="This collection will contain one OpeningHour for each calendar week day.")]
        public virtual List<DailySchedule> OpeningHours { get; set; }

        ///<summary>
        ///This collection will contain every exception of the regular hours entered for the store or warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="This collection will contain every exception of the regular hours entered for the store or warehouse.")]
        public virtual List<DailyScheduleException> OpeningHourExceptions { get; set; }

        ///<summary>
        ///the type of the schedule.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of the schedule.")]
        public virtual ScheduleType ScheduleType { get; set; }

        ///<summary>
        ///Gets the property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets the property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class GetCustomersByOrganizationQueryResult
        : QueryResult<CustomerInfo>
    {
    }

    [DataContract]
    public enum LocationClass
    {
        Physical,
        Virtual,
    }

    [DataContract]
    public partial class LocationIndexingInformation
    {
        public LocationIndexingInformation()
        {
            Addresses = new List<Address>{};
            Scopes = new List<string>{};
        }

        ///<summary>
        ///A list of the location's addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of the location's addresses.")]
        public virtual List<Address> Addresses { get; set; }

        ///<summary>
        ///The unique identifier of the location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the location.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The date the location was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the location was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The identifier of the user who created the location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the user who created the location.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The display name of the location. This is a multilingual value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name of the location. This is a multilingual value.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The general description of the location. This is a multilingual value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The general description of the location. This is a multilingual value.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///The email of the location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The email of the location.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///The extension for the fax number of the location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The extension for the fax number of the location.")]
        public virtual string FaxExtension { get; set; }

        ///<summary>
        ///The fax number of the location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fax number of the location.")]
        public virtual string FaxNumber { get; set; }

        ///<summary>
        ///Is this location is currently active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Is this location is currently active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The date of the last modification.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date of the last modification.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The identifier of the user who last modified the location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the user who last modified the location.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///Indicates if this is a physical or a virtual location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if this is a physical or a virtual location.")]
        public virtual LocationClass LocationClass { get; set; }

        ///<summary>
        ///The full name of the manager of the location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The full name of the manager of the location.")]
        public virtual string Manager { get; set; }

        ///<summary>
        ///The name of the location. Each location must have a name that unique in the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the location. Each location must have a name that unique in the system.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///A business centric number to identify the location that could be used to link the location to external data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A business centric number to identify the location that could be used to link the location to external data.")]
        public virtual string Number { get; set; }

        ///<summary>
        ///The extension for the phone number of the location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The extension for the phone number of the location.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///The phone number of the location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The phone number of the location.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///The list of associated scopes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of associated scopes.")]
        public virtual List<string> Scopes { get; set; }

        ///<summary>
        ///A value indicating whether this location supports pickup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this location supports pickup.")]
        public virtual bool SupportPickUp { get; set; }

        ///<summary>
        ///A value indicating whether this location supports shipping.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this location supports shipping.")]
        public virtual bool SupportShipping { get; set; }

        ///<summary>
        ///A value indicating whether this location supports delivery.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this location supports delivery.")]
        public virtual bool SupportDelivery { get; set; }

        ///<summary>
        ///A value indicating whether this location supports ship to store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this location supports ship to store.")]
        public virtual bool SupportShipToStore { get; set; }

        ///<summary>
        ///The timezone of the location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The timezone of the location.")]
        public virtual string TimeZone { get; set; }
    }

    [DataContract]
    public partial class Note
    {
        ///<summary>
        ///The parent identifier of the note.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The parent identifier of the note.")]
        public virtual string ParentId { get; set; }

        ///<summary>
        ///The parent entity name of the note.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The parent entity name of the note.")]
        public virtual string ParentEntityName { get; set; }

        ///<summary>
        ///The content of the note.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The content of the note.")]
        public virtual string Content { get; set; }

        ///<summary>
        ///The date the note was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the note was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The identifier of the user who created the note
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the user who created the note")]
        public virtual string CreatedBy { get; set; }
    }

    [DataContract]
    public partial class OperatingStatus
    {
        ///<summary>
        ///The unique identifier for the Store/Warehouse to which this entity is associated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the Store/Warehouse to which this entity is associated.")]
        public virtual string Id { get; set; }

        ///<summary>
        ///the store/warehouse availability status AvailabilityStatus:  is it currently opened/closed, the reason for closing and the estimated duration.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store/warehouse availability status AvailabilityStatus:  is it currently opened/closed, the reason for closing and the estimated duration.")]
        public virtual AvailabilityStatus AvailabilityStatus { get; set; }

        ///<summary>
        ///the store/warehouse delivery availability status AvailabilityStatus:  is it currently opened/closed, the reason for closing and the estimated duration.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store/warehouse delivery availability status AvailabilityStatus:  is it currently opened/closed, the reason for closing and the estimated duration.")]
        public virtual AvailabilityStatus DeliveryAvailabilityStatus { get; set; }

        ///<summary>
        ///the delivery quote time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the delivery quote time.")]
        public virtual QuoteTime DeliveryQuoteTime { get; set; }

        ///<summary>
        ///the store/warehouse pickup availability status AvailabilityStatus: is it currently opened/closed, the reason for closing and the estimated duration.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store/warehouse pickup availability status AvailabilityStatus: is it currently opened/closed, the reason for closing and the estimated duration.")]
        public virtual AvailabilityStatus PickupAvailabilityStatus { get; set; }

        ///<summary>
        ///the pickup quote time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the pickup quote time.")]
        public virtual QuoteTime PickupQuoteTime { get; set; }

        ///<summary>
        ///the property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class Organization
        : EntityBase<Guid>
    {
        public Organization()
        {
            AddressesIds = new List<Guid>{};
            Addresses = new List<Address>{};
        }

        ///<summary>
        ///the name of the organization. Must be unique.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the organization. Must be unique.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the organization address identifiers.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the organization address identifiers.")]
        public virtual List<Guid> AddressesIds { get; set; }

        ///<summary>
        ///the organization addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the organization addresses.")]
        public virtual List<Address> Addresses { get; set; }

        ///<summary>
        ///whether or not this organization is currently active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether or not this organization is currently active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///the full name of the organization manager
        ///</summary>
        [DataMember]
        [ApiMember(Description="the full name of the organization manager")]
        public virtual string Manager { get; set; }

        ///<summary>
        ///the email of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email of the organization.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///the phone number of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the phone number of the organization.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///the phone extension of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the phone extension of the organization.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///the fax number of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fax number of the organization.")]
        public virtual string FaxNumber { get; set; }

        ///<summary>
        ///the fax extension of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fax extension of the organization.")]
        public virtual string FaxExtension { get; set; }

        ///<summary>
        ///the trading partner number of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the trading partner number of the organization.")]
        public virtual string TradingPartnerNumber { get; set; }

        ///<summary>
        ///the description of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the description of the organization.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the date the organization was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the organization was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the date of the last modification to the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date of the last modification to the organization.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the identifier of the user who created the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the user who created the organization.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the identifier of the user who last modified the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the user who last modified the organization.")]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract]
    public partial class PaymentProfile
        : EntityBase<Guid>
    {
        ///<summary>
        ///the unique identifier of the scope belonging to the payment profile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the scope belonging to the payment profile.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the unique identifier of the provider related to the payment profile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the provider related to the payment profile.")]
        public virtual string ProviderName { get; set; }

        ///<summary>
        ///the list of unique identifier returned by external provider related to the payment profile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of unique identifier returned by external provider related to the payment profile.")]
        public virtual string ExternalIds { get; set; }

        ///<summary>
        ///the additional data specific to payment provider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the additional data specific to payment provider.")]
        public virtual string AdditionalData { get; set; }

        ///<summary>
        ///The store for wich the provider configuration is done.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store for wich the provider configuration is done.")]
        public virtual string OrderLocationId { get; set; }
    }

    [DataContract]
    public partial class ProfileSettings
    {
        public ProfileSettings()
        {
            PropertyBag = new Dictionary<string, string>{};
        }

        ///<summary>
        ///The account lockdown time in minutes
        ///</summary>
        [DataMember]
        [ApiMember(Description="The account lockdown time in minutes")]
        public virtual int AccountLockDownMinutes { get; set; }

        ///<summary>
        ///The flag setting for allowing registered customers without membership (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The flag setting for allowing registered customers without membership (True or False)")]
        public virtual bool AllowRegisteredCustomersWithoutMembership { get; set; }

        ///<summary>
        ///The audit enabled flag (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The audit enabled flag (True or False)")]
        public virtual int AuditEnabled { get; set; }

        ///<summary>
        ///The automatic purging job logging loop wait time in milliseconds
        ///</summary>
        [DataMember]
        [ApiMember(Description="The automatic purging job logging loop wait time in milliseconds")]
        public virtual string AutomaticPurgingJobLoggingLoopWaitTimeInMs { get; set; }

        ///<summary>
        ///The automatic purging job logging number of days to keep data
        ///</summary>
        [DataMember]
        [ApiMember(Description="The automatic purging job logging number of days to keep data")]
        public virtual int AutomaticPurgingJobLoggingNumberOfDaysToKeepData { get; set; }

        ///<summary>
        ///The automatic purging job logging number of rows per batch to delete
        ///</summary>
        [DataMember]
        [ApiMember(Description="The automatic purging job logging number of rows per batch to delete")]
        public virtual int AutomaticPurgingJobLoggingNumberOfRowsPerBatchToDelete { get; set; }

        ///<summary>
        ///The customer search default option (e.g. Search)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer search default option (e.g. Search)")]
        public virtual string CustomerSearchDefaultOption { get; set; }

        ///<summary>
        ///The enable password reset flag
        ///</summary>
        [DataMember]
        [ApiMember(Description="The enable password reset flag")]
        public virtual bool EnablePasswordReset { get; set; }

        ///<summary>
        ///The enable password retrieval flag
        ///</summary>
        [DataMember]
        [ApiMember(Description="The enable password retrieval flag")]
        public virtual bool EnablePasswordRetrieval { get; set; }

        ///<summary>
        ///The maximum invalid password attempts before lockdown occurs
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum invalid password attempts before lockdown occurs")]
        public virtual int MaxInvalidPasswordAttempts { get; set; }

        ///<summary>
        ///The minimum required non alphanumeric characters required for passwords
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum required non alphanumeric characters required for passwords")]
        public virtual int MinRequiredNonAlphanumericCharacters { get; set; }

        ///<summary>
        ///The minimum required password length
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum required password length")]
        public virtual int MinRequiredPasswordLength { get; set; }

        ///<summary>
        ///The password attempt window (number of attempts)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password attempt window (number of attempts)")]
        public virtual int PasswordAttemptWindow { get; set; }

        ///<summary>
        ///The password failed attempt delay in seconds (e.g. 0.5)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password failed attempt delay in seconds (e.g. 0.5)")]
        public virtual double PasswordFailedAttemptDelaySeconds { get; set; }

        ///<summary>
        ///The password reset is auto-generate only flag (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password reset is auto-generate only flag (True or False)")]
        public virtual bool PasswordResetIsAutoGenerateOnly { get; set; }

        ///<summary>
        ///The password encryption salt size
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password encryption salt size")]
        public virtual int PasswordSaltSize { get; set; }

        ///<summary>
        ///The password strategy to use (e.g. Hashed)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password strategy to use (e.g. Hashed)")]
        public virtual string PasswordStrategy { get; set; }

        ///<summary>
        ///The password strength regular expression to use (can be null)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password strength regular expression to use (can be null)")]
        public virtual string PasswordStrengthRegularExpression { get; set; }

        ///<summary>
        ///The requires question and answer flag (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The requires question and answer flag (True or False)")]
        public virtual bool RequiresQuestionAndAnswer { get; set; }

        ///<summary>
        ///The requires unique Email flag (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The requires unique Email flag (True or False)")]
        public virtual bool RequiresUniqueEmail { get; set; }

        ///<summary>
        ///The token expiration in minutes
        ///</summary>
        [DataMember]
        [ApiMember(Description="The token expiration in minutes")]
        public virtual int TokenExpirationMinutes { get; set; }

        ///<summary>
        ///The use Email as username flag (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The use Email as username flag (True or False)")]
        public virtual bool UseEmailAsUsername { get; set; }

        ///<summary>
        ///The use longtext custom attribute flag (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The use longtext custom attribute flag (True or False)")]
        public virtual bool UseLongTextCustomAttribute { get; set; }

        ///<summary>
        ///The username and Email unique by scope (value is a scope, e.g. Global)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username and Email unique by scope (value is a scope, e.g. Global)")]
        public virtual string UsernameAndEmailUniqueByScope { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this command
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this command")]
        public virtual Dictionary<string, string> PropertyBag { get; set; }
    }

    [DataContract]
    public partial class QuoteTime
    {
        ///<summary>
        ///the duration of a quote.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the duration of a quote.")]
        public virtual Duration Duration { get; set; }

        ///<summary>
        ///a value indicating whether the quotes could be delayed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether the quotes could be delayed.")]
        public virtual bool CouldBeDelayed { get; set; }

        ///<summary>
        ///the delay reason.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the delay reason.")]
        public virtual string DelayReason { get; set; }

        ///<summary>
        ///the estimated duration of the delay.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the estimated duration of the delay.")]
        public virtual Duration DelayEstimatedDuration { get; set; }
    }

    [DataContract]
    public partial class ScheduleInterval
    {
        ///<summary>
        ///The date and hour of the day from which the time interval is beginning.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date and hour of the day from which the time interval is beginning.")]
        public virtual TimeSpan BeginingTime { get; set; }

        ///<summary>
        ///The date and hour of the day to which the time interval is ending.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date and hour of the day to which the time interval is ending.")]
        public virtual TimeSpan EndingTime { get; set; }
    }

    [DataContract]
    public enum ScheduleType
    {
        OpeningHours,
        Delivery,
        Pickup,
    }

    [DataContract]
    public enum TimeScale
    {
        Minutes,
        Hours,
        Days,
    }
}

namespace Orckestra.Overture.ServiceModel.Customers.CustomProfiles
{

    [DataContract]
    public partial class AssociationDescriptor
    {
        ///<summary>
        ///the name of the attribute
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the attribute")]
        public virtual string AttributeName { get; set; }

        ///<summary>
        ///the unique identifier for the parent entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier for the parent entity")]
        public virtual Guid ParentId { get; set; }

        ///<summary>
        ///the name of the custom type of the profile instance to which the entity will be associated
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the custom type of the profile instance to which the entity will be associated")]
        public virtual string ParentEntityTypeName { get; set; }

        ///<summary>
        ///the unique identifier for the associated entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier for the associated entity")]
        public virtual Guid Id { get; set; }
    }

    [DataContract]
    public partial class ProfileOperations
    {
        public ProfileOperations()
        {
            AssociationsToAdd = new List<AssociationDescriptor>{};
            AssociationsToRemove = new List<AssociationDescriptor>{};
            ProfilesToAdd = new List<CustomProfile>{};
            ProfilesToUpdate = new List<CustomProfile>{};
            ProfilesToRemove = new List<ProfileReference>{};
        }

        ///<summary>
        ///The list of adding associations between entities
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of adding associations between entities")]
        public virtual List<AssociationDescriptor> AssociationsToAdd { get; set; }

        ///<summary>
        ///The list of removing associations between entities.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of removing associations between entities.")]
        public virtual List<AssociationDescriptor> AssociationsToRemove { get; set; }

        ///<summary>
        ///The list of custom profiles to add.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of custom profiles to add.")]
        public virtual List<CustomProfile> ProfilesToAdd { get; set; }

        ///<summary>
        ///The list of custom profiles to update.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of custom profiles to update.")]
        public virtual List<CustomProfile> ProfilesToUpdate { get; set; }

        ///<summary>
        ///The list of custom profiles to remove.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of custom profiles to remove.")]
        public virtual List<ProfileReference> ProfilesToRemove { get; set; }
    }

    [DataContract]
    public partial class ProfileReference
    {
        ///<summary>
        ///the name (business key) of the custom type of the profile instance represented by this entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name (business key) of the custom type of the profile instance represented by this entity")]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///the unique identifier for the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier for the entity")]
        public virtual Guid Id { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Customers.Membership
{

    [DataContract]
    public partial class ChangePasswordResponse
    {
        ///<summary>
        ///Indicates whether the password was successfully changed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the password was successfully changed.")]
        public virtual bool Success { get; set; }
    }

    [DataContract]
    public partial class ChangeUserNameResponse
    {
        ///<summary>
        ///Indicates whether the username was successfully changed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the username was successfully changed.")]
        public virtual bool Success { get; set; }
    }

    [DataContract]
    public partial class LoginResponse
    {
        ///<summary>
        ///Indicates whether the Login was successful.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the Login was successful.")]
        public virtual bool Success { get; set; }
    }

    [DataContract]
    public partial class MembershipConfiguration
    {
        ///<summary>
        ///Indicates whether the current membership provider is configured to allow customers to reset their passwords
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the current membership provider is configured to allow customers to reset their passwords")]
        public virtual bool EnablePasswordReset { get; set; }

        ///<summary>
        ///Indicates whether the current membership provider is configured to allow users to retrieve their passwords
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the current membership provider is configured to allow users to retrieve their passwords")]
        public virtual bool EnablePasswordRetrieval { get; set; }

        ///<summary>
        ///The number of invalid password or password-answer attempts allowed before the membership user is locked out
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of invalid password or password-answer attempts allowed before the membership user is locked out")]
        public virtual int MaxInvalidPasswordAttempts { get; set; }

        ///<summary>
        ///The minimum number of special characters that must be present in a valid password
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum number of special characters that must be present in a valid password")]
        public virtual int MinRequiredNonAlphanumericCharacters { get; set; }

        ///<summary>
        ///The minimum required length for a password
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum required length for a password")]
        public virtual int MinRequiredPasswordLength { get; set; }

        ///<summary>
        ///The time window (in minutes) between which consecutive failed attempts to provide a valid password or password answer are tracked
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time window (in minutes) between which consecutive failed attempts to provide a valid password or password answer are tracked")]
        public virtual int PasswordAttemptWindow { get; set; }

        ///<summary>
        ///The strategy used to store the password MembershipPasswordStrategy
        ///</summary>
        [DataMember]
        [ApiMember(Description="The strategy used to store the password MembershipPasswordStrategy")]
        public virtual MembershipPasswordStrategy PasswordStrategy { get; set; }

        ///<summary>
        ///The regular expression used to validate the strength level of a password
        ///</summary>
        [DataMember]
        [ApiMember(Description="The regular expression used to validate the strength level of a password")]
        public virtual string PasswordStrengthRegularExpression { get; set; }

        ///<summary>
        ///Indicates whether the default membership provider requires the user to answer a password question (and answer) for password reset and retrieval
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the default membership provider requires the user to answer a password question (and answer) for password reset and retrieval")]
        public virtual bool RequiresQuestionAndAnswer { get; set; }

        ///<summary>
        ///Indicating whether the customer email addresses should be unique across the system
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicating whether the customer email addresses should be unique across the system")]
        public virtual bool RequiresUniqueEmail { get; set; }

        ///<summary>
        ///The expiration time of reset password ticket (in minutes)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expiration time of reset password ticket (in minutes)")]
        public virtual int TokenExpirationMinutes { get; set; }

        ///<summary>
        ///The account lock down time (in minutes)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The account lock down time (in minutes)")]
        public virtual int AccountLockDownMinutes { get; set; }

        ///<summary>
        ///The delay to apply on a failed login attempt
        ///</summary>
        [DataMember]
        [ApiMember(Description="The delay to apply on a failed login attempt")]
        public virtual double PasswordFailedAttemptDelaySeconds { get; set; }
    }

    [DataContract]
    public enum MembershipPasswordStrategy
    {
        Clear,
        Hashed,
        Encrypted,
    }

    [DataContract]
    public partial class ResetPasswordResponse
    {
        ///<summary>
        ///Indicates whether the password was successfully reset.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the password was successfully reset.")]
        public virtual bool Success { get; set; }

        ///<summary>
        ///Ticket generated for the customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="Ticket generated for the customer")]
        public virtual string Ticket { get; set; }
    }

    [DataContract]
    public partial class UnlockUserResponse
    {
        ///<summary>
        ///Indicates whether the unlock was successful.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the unlock was successful.")]
        public virtual bool Success { get; set; }
    }

    [DataContract]
    public partial class ValidateUserResponse
    {
        ///<summary>
        ///Indicates whether the user account was successfully validated
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the user account was successfully validated")]
        public virtual bool Success { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Customers.Stores
{

    [DataContract]
    public partial class CustomerStoresAssociations
    {
        public CustomerStoresAssociations()
        {
            OtherStores = new List<Store>{};
        }

        ///<summary>
        ///The customer's preferred store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer's preferred store.")]
        public virtual Store PreferredStore { get; set; }

        ///<summary>
        ///The customer's associated stores that are not preferred.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer's associated stores that are not preferred.")]
        public virtual List<Store> OtherStores { get; set; }
    }

    [DataContract]
    public partial class FindNearestStoreResult
    {
        ///<summary>
        ///The store id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store id")]
        public virtual Guid StoreId { get; set; }

        ///<summary>
        ///The store name
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store name")]
        public virtual string StoreName { get; set; }

        ///<summary>
        ///The store number
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store number")]
        public virtual string StoreNumber { get; set; }

        ///<summary>
        ///The store's scope id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store's scope id")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The store's address id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store's address id")]
        public virtual Guid AddressId { get; set; }

        ///<summary>
        ///The distance between the store's address and the location defined in the given request. Remark : The distance is in meters
        ///</summary>
        [DataMember]
        [ApiMember(Description="The distance between the store's address and the location defined in the given request. Remark : The distance is in meters")]
        public virtual double Distance { get; set; }
    }

    [DataContract]
    public partial class FindNearestStoresResult
    {
        public FindNearestStoresResult()
        {
            NearestStores = new List<FindNearestStoreResult>{};
        }

        ///<summary>
        ///The nearest stores
        ///</summary>
        [DataMember]
        [ApiMember(Description="The nearest stores")]
        public virtual List<FindNearestStoreResult> NearestStores { get; set; }

        ///<summary>
        ///The total count of stores satisfying the request
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total count of stores satisfying the request")]
        public virtual int TotalCount { get; set; }
    }

    [DataContract]
    public partial class FindStoresQueryResult
        : QueryResult<Store>
    {
    }

    [DataContract]
    public partial class Store
        : IFulfillmentLocationParent
    {
        ///<summary>
        ///the unique identifier of the Store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Store.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the date the Store was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the Store was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The date of the last modification to the Store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date of the last modification to the Store.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the identifier of the user who created the Store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the user who created the Store.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the identifier of the user who last modified the Store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the user who last modified the Store.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///Is this store currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the store to be hidden from many business processes until re-activated. 
        ///</summary>
        [DataMember]
        [ApiMember(Description="Is this store currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the store to be hidden from many business processes until re-activated. ")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///the name of the store. Each store must have a name that unique in the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the store. Each store must have a name that unique in the system.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///a business centric number to identify the store that could be used to link the store to external data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a business centric number to identify the store that could be used to link the store to external data.")]
        public virtual string Number { get; set; }

        ///<summary>
        ///the display name of the store. This is a multilingual value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name of the store. This is a multilingual value.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///the general description of the store. Use this to provide internal (admin) users information about this store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the general description of the store. Use this to provide internal (admin) users information about this store.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///Indicates if this is a physical or virtual store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if this is a physical or virtual store.")]
        public virtual StoreType StoreType { get; set; }

        ///<summary>
        ///Indicates if this is a physical or virtual location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if this is a physical or virtual location.")]
        public virtual LocationClass LocationClass { get; set; }

        ///<summary>
        ///the full name of the manager of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the full name of the manager of the store.")]
        public virtual string Manager { get; set; }

        ///<summary>
        ///the telephone number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the telephone number of the store.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///the extension for the telephone number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension for the telephone number of the store.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///the fax number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fax number of the store.")]
        public virtual string FaxNumber { get; set; }

        ///<summary>
        ///the extension for the fax number of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension for the fax number of the organization.")]
        public virtual string FaxExtension { get; set; }

        ///<summary>
        ///the email of the store. This could be a specific person's address or a general customerService address depending on the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email of the store. This could be a specific person's address or a general customerService address depending on the store.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///the store operating status. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store operating status. This value is not loaded by default.")]
        public virtual OperatingStatus OperatingStatus { get; set; }

        ///<summary>
        ///the store opening hours. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store opening hours. This value is not loaded by default.")]
        public virtual FulfillmentSchedule StoreSchedule { get; set; }

        ///<summary>
        ///the store delivery service opening hours. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store delivery service opening hours. This value is not loaded by default.")]
        public virtual FulfillmentSchedule DeliverySchedule { get; set; }

        ///<summary>
        ///the store pickup opening hours. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store pickup opening hours. This value is not loaded by default.")]
        public virtual FulfillmentSchedule PickUpSchedule { get; set; }

        ///<summary>
        ///the property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///the scope associated to the store. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the scope associated to the store. This value is not loaded by default.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the store's fulfillment location information.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store's fulfillment location information.")]
        public virtual FulfillmentLocation FulfillmentLocation { get; set; }
    }

    [DataContract]
    public enum StoreType
    {
        Physical,
        Virtual,
    }
}

namespace Orckestra.Overture.ServiceModel.Customers.Warehouses
{

    [DataContract]
    public partial class FindWarehousesQueryResult
        : QueryResult<Warehouse>
    {
    }

    [DataContract]
    public partial class Warehouse
        : IFulfillmentLocationParent
    {
        public Warehouse()
        {
            AssociatedScopes = new List<string>{};
        }

        ///<summary>
        ///the unique identifier of the Warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Warehouse.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the date the Warehouse was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the Warehouse was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The date of the last modification to the Warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date of the last modification to the Warehouse.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the identifier of the user who created the Warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the user who created the Warehouse.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the identifier of the user who last modified the Warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the user who last modified the Warehouse.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///Is this warehouse currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the warehouse to be hidden from many business processes until re-activated. 
        ///</summary>
        [DataMember]
        [ApiMember(Description="Is this warehouse currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the warehouse to be hidden from many business processes until re-activated. ")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///the name of the warehouse. Each warehouse must have a name that unique in the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the warehouse. Each warehouse must have a name that unique in the system.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///a business centric number to identify the warehouse that could be used to link the warehouse to external data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a business centric number to identify the warehouse that could be used to link the warehouse to external data.")]
        public virtual string Number { get; set; }

        ///<summary>
        ///the display name of the warehouse. This is a multilingual value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name of the warehouse. This is a multilingual value.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///the general description of the warehouse. Use this to provide internal (admin) users information about this warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the general description of the warehouse. Use this to provide internal (admin) users information about this warehouse.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///Indicates if this is a physical or a virtual location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if this is a physical or a virtual location.")]
        public virtual LocationClass LocationClass { get; set; }

        ///<summary>
        ///the full name of the manager of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the full name of the manager of the warehouse.")]
        public virtual string Manager { get; set; }

        ///<summary>
        ///the telephone number of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the telephone number of the warehouse.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///the extension for the telephone number of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension for the telephone number of the warehouse.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///the fax number of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fax number of the warehouse.")]
        public virtual string FaxNumber { get; set; }

        ///<summary>
        ///the extension for the fax number of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension for the fax number of the warehouse.")]
        public virtual string FaxExtension { get; set; }

        ///<summary>
        ///the email of the warehouse. This could be a specific person's address or a general customerService address depending on the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email of the warehouse. This could be a specific person's address or a general customerService address depending on the warehouse.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///the warehouse operating status. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the warehouse operating status. This value is not loaded by default.")]
        public virtual OperatingStatus OperatingStatus { get; set; }

        ///<summary>
        ///the warehouse opening hours. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the warehouse opening hours. This value is not loaded by default.")]
        public virtual FulfillmentSchedule WarehouseSchedule { get; set; }

        ///<summary>
        ///the warehouse delivery service opening hours. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the warehouse delivery service opening hours. This value is not loaded by default.")]
        public virtual FulfillmentSchedule DeliverySchedule { get; set; }

        ///<summary>
        ///the warehouse pickup opening hours. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the warehouse pickup opening hours. This value is not loaded by default.")]
        public virtual FulfillmentSchedule PickUpSchedule { get; set; }

        ///<summary>
        ///the property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///the warehouse's fulfillment location information.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the warehouse's fulfillment location information.")]
        public virtual FulfillmentLocation FulfillmentLocation { get; set; }

        ///<summary>
        ///The warehouse's associated scopes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The warehouse's associated scopes.")]
        public virtual List<string> AssociatedScopes { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.DataExchange.Requests.ProductPrice
{

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/dataexchange/productprices/{ScopeId}/export", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ExportProductPriceRequest
        : IReturn<TaskInfo>, IPost
    {
        public ExportProductPriceRequest()
        {
            Products = new string[]{};
        }

        ///<summary>
        ///The task id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task id.")]
        public virtual string TaskId { get; set; }

        ///<summary>
        ///The file format of the export, Excel.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The file format of the export, Excel.")]
        [Required]
        public virtual string FileFormat { get; set; }

        ///<summary>
        ///The language to include in the export.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The language to include in the export.")]
        public virtual string Culture { get; set; }

        ///<summary>
        ///The File path in the blob storage.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The File path in the blob storage.")]
        public virtual string FilePath { get; set; }

        ///<summary>
        ///The priceList id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The priceList id.")]
        [Required]
        public virtual string PriceListId { get; set; }

        ///<summary>
        ///The list of products to export.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of products to export.")]
        [Required]
        public virtual string[] Products { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }

        ///<summary>
        ///The scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope.")]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/dataexchange/productprices/{ScopeId}/import", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ImportProductPriceRequest
        : IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///The priceList Id. This value will be ignored when file type is json.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The priceList Id. This value will be ignored when file type is json.")]
        public virtual string PriceListId { get; set; }

        ///<summary>
        ///The path of the file(s) to import.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The path of the file(s) to import.")]
        public virtual string Path { get; set; }

        ///<summary>
        ///The maximum number of validation errors that can be encountered. 0 means infinite number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of validation errors that can be encountered. 0 means infinite number.")]
        public virtual int MaximumErrors { get; set; }

        ///<summary>
        ///The task id. Use this to query the system for the state of the task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task id. Use this to query the system for the state of the task.")]
        public virtual Guid TaskId { get; set; }

        ///<summary>
        ///The file format of the import, Excel or Json
        ///</summary>
        [DataMember]
        [ApiMember(Description="The file format of the import, Excel or Json")]
        [Required]
        public virtual string FileFormat { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }

        ///<summary>
        ///The scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///A value indicating whether or not to filter prices that are already in database before import.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether or not to filter prices that are already in database before import.")]
        public virtual bool ImportDeltaOnly { get; set; }

        ///<summary>
        ///Indicates whether or not the search indexes should be rebuilt after the import. The default value is True (when not set)
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not the search indexes should be rebuilt after the import. The default value is True (when not set)")]
        public virtual bool? RebuildSearchIndex { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.DataExchange.Requests.Products
{

    public partial class ImportProductExtendedOptions
    {
        ///<summary>
        ///Indicates whether the associations of imported products are removed prior to import.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the associations of imported products are removed prior to import.")]
        public virtual bool RemoveImportedProductsAssociations { get; set; }

        ///<summary>
        ///Indicates whether existing associations of imported categories are removed prior to import.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether existing associations of imported categories are removed prior to import.")]
        public virtual bool RemoveImportedCategoriesAssociations { get; set; }

        ///<summary>
        ///Indicates whether all existing product associations are removed prior to import.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether all existing product associations are removed prior to import.")]
        public virtual bool RemoveAllProductAssociations { get; set; }

        ///<summary>
        ///Indicates whether all existing category associations are removed prior to import.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether all existing category associations are removed prior to import.")]
        public virtual bool RemoveAllCategoryAssociations { get; set; }

        ///<summary>
        ///Indicates whether whether [empty attributes are imported], otherwise the latter are ignored.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether whether [empty attributes are imported], otherwise the latter are ignored.")]
        public virtual bool ImportEmptyAttributes { get; set; }

        ///<summary>
        ///Indicates the status of imported products.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the status of imported products.")]
        public virtual string ImportPublicationStatus { get; set; }

        ///<summary>
        ///Indicates the import type, can be full, or products, categories, associations, or relations
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the import type, can be full, or products, categories, associations, or relations")]
        public virtual string ImportType { get; set; }

        ///<summary>
        ///Indicates whether only validation should be done and changes should not be committed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether only validation should be done and changes should not be committed.")]
        public virtual bool ValidationOnly { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/dataexchange/products/{ScopeId}/export", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ProductInformationExportRequest
        : IReturn<TaskInfo>, IPost
    {
        public ProductInformationExportRequest()
        {
            Cultures = new string[]{};
        }

        ///<summary>
        ///The scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The task id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task id.")]
        public virtual string TaskId { get; set; }

        ///<summary>
        ///The file format of the export, JSON, XML or Excel.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The file format of the export, JSON, XML or Excel.")]
        [Required]
        public virtual string FileFormat { get; set; }

        ///<summary>
        ///The languages to include in the export.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The languages to include in the export.")]
        public virtual string[] Cultures { get; set; }

        ///<summary>
        ///The File path in the blob storage.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The File path in the blob storage.")]
        public virtual string FilePath { get; set; }

        ///<summary>
        ///Indicates to include or not the schema.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates to include or not the schema.")]
        public virtual bool IncludeSchema { get; set; }

        ///<summary>
        ///Indicates to include or not the products.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates to include or not the products.")]
        public virtual bool IncludeProducts { get; set; }

        ///<summary>
        ///Indicates to include or not the categories.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates to include or not the categories.")]
        public virtual bool IncludeCategories { get; set; }

        ///<summary>
        ///Indicates to include or not the prices.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates to include or not the prices.")]
        public virtual bool IncludePrices { get; set; }

        ///<summary>
        ///Indicates to include or not the media.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates to include or not the media.")]
        public virtual bool IncludeMedia { get; set; }

        ///<summary>
        ///Indicates to break or not inheritance for Products.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates to break or not inheritance for Products.")]
        public virtual bool BreakInheritance { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }

        ///<summary>
        ///The category to export.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category to export.")]
        public virtual string Category { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/dataexchange/products/{ScopeId}/import", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ProductInformationImportRequest
        : IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///The scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The path of the file(s) to import.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The path of the file(s) to import.")]
        public virtual string Path { get; set; }

        ///<summary>
        ///The name of container which import file exists
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of container which import file exists")]
        public virtual string ContainerName { get; set; }

        ///<summary>
        ///The maximum number of validation errors that can be encountered. 0 means infinite number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of validation errors that can be encountered. 0 means infinite number.")]
        public virtual int MaximumErrors { get; set; }

        ///<summary>
        ///the task id. Use this to query the system for the state of the task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the task id. Use this to query the system for the state of the task.")]
        public virtual Guid TaskId { get; set; }

        ///<summary>
        ///The file format of the import, Zip, JSON, XML or Excel.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The file format of the import, Zip, JSON, XML or Excel.")]
        [Required]
        public virtual string FileFormat { get; set; }

        ///<summary>
        ///Whether or not the import process has to delete the previously existing prices, except for the 'DEFAULT' price list,  for the products and product variants for which the prices are imported.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the import process has to delete the previously existing prices, except for the 'DEFAULT' price list,  for the products and product variants for which the prices are imported.")]
        public virtual bool AllowPricesDeleting { get; set; }

        ///<summary>
        ///Whether or not the import have to delete media which are not specified in the import file.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the import have to delete media which are not specified in the import file.")]
        public virtual bool AllowMediaDeleting { get; set; }

        ///<summary>
        ///Whether or not the indexes are built after the import. The default value is True (when not set).
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the indexes are built after the import. The default value is True (when not set).")]
        public virtual bool? ReIndex { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }

        ///<summary>
        ///Indicates whether or not the search indexes are rebuilt after the import. The default value is True (when not set).
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not the search indexes are rebuilt after the import. The default value is True (when not set).")]
        public virtual bool? RebuildSearchIndex { get; set; }

        ///<summary>
        ///The extended options applied during the import process.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The extended options applied during the import process.")]
        public virtual ImportProductExtendedOptions ExtendedOptions { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/dataexchange/products/{ScopeId}/legacy/import", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ProductInformationLegacyImportRequest
        : IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///The scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The path of the file(s) to import.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The path of the file(s) to import.")]
        public virtual string Path { get; set; }

        ///<summary>
        ///The maximum number of validation errors that can be encountered. 0 means infinite number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of validation errors that can be encountered. 0 means infinite number.")]
        public virtual int MaximumErrors { get; set; }

        ///<summary>
        ///the task id. Use this to query the system for the state of the task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the task id. Use this to query the system for the state of the task.")]
        public virtual Guid TaskId { get; set; }

        ///<summary>
        ///The file format of the import, JSON or XML
        ///</summary>
        [DataMember]
        [ApiMember(Description="The file format of the import, JSON or XML")]
        [Required]
        public virtual string FileFormat { get; set; }

        ///<summary>
        ///Whether or not the import process has to delete the previously existing prices, except for the 'DEFAULT' price list,  for the products and product variants for which the prices are imported.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the import process has to delete the previously existing prices, except for the 'DEFAULT' price list,  for the products and product variants for which the prices are imported.")]
        public virtual bool AllowPricesDeleting { get; set; }

        ///<summary>
        ///Whether or not the import have to delete media which are not specified in the import file.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the import have to delete media which are not specified in the import file.")]
        public virtual bool AllowMediaDeleting { get; set; }

        ///<summary>
        ///Whether or not the indexes are built after the import. The default value is True (when not set).
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the indexes are built after the import. The default value is True (when not set).")]
        public virtual bool? ReIndex { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }

        ///<summary>
        ///Indicates whether or not the search indexes are rebuilt after the import. The default value is True (when not set).
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not the search indexes are rebuilt after the import. The default value is True (when not set).")]
        public virtual bool? RebuildSearchIndex { get; set; }

        ///<summary>
        ///The extended options applied during the import process.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The extended options applied during the import process.")]
        public virtual ImportProductExtendedOptions ExtendedOptions { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Diagnostic
{

    [DataContract]
    public partial class BasicDiagnostic
    {
        ///<summary>
        ///DateTime of the server when executing the request (UTC)
        ///</summary>
        [DataMember]
        [ApiMember(Description="DateTime of the server when executing the request (UTC)")]
        public virtual DateTime ServerDateTime { get; set; }

        ///<summary>
        ///Content of the Accept-Encoding header of the request
        ///</summary>
        [DataMember]
        [ApiMember(Description="Content of the Accept-Encoding header of the request")]
        public virtual string CompressionHeader { get; set; }
    }

    [DataContract]
    public partial class CacheStatus
    {
        public CacheStatus()
        {
            Keys = new List<string>{};
        }

        ///<summary>
        ///Name of the cache
        ///</summary>
        [DataMember]
        [ApiMember(Description="Name of the cache")]
        public virtual string Name { get; set; }

        ///<summary>
        ///Number of items in the cache
        ///</summary>
        [DataMember]
        [ApiMember(Description="Number of items in the cache")]
        public virtual int ItemCount { get; set; }

        ///<summary>
        ///Type of the cache
        ///</summary>
        [DataMember]
        [ApiMember(Description="Type of the cache")]
        public virtual string Type { get; set; }

        ///<summary>
        ///True if the cache can enumerate its keys
        ///</summary>
        [DataMember]
        [ApiMember(Description="True if the cache can enumerate its keys")]
        public virtual bool CanEnumerateKeys { get; set; }

        ///<summary>
        ///Keys in the cache
        ///</summary>
        [DataMember]
        [ApiMember(Description="Keys in the cache")]
        public virtual List<string> Keys { get; set; }
    }

    public partial class ModuleHelpUrl
    {
        ///<summary>
        ///The Orckestra Commerce Cloud platform module name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Orckestra Commerce Cloud platform module name.")]
        public virtual string ModuleName { get; set; }

        ///<summary>
        ///The Help Url for the module specified in the property ModuleName.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Help Url for the module specified in the property ModuleName.")]
        public virtual string HelpUrl { get; set; }
    }

    public partial class VersionInfo
    {
        public VersionInfo()
        {
            ModuleHelpUrls = new List<ModuleHelpUrl>{};
        }

        ///<summary>
        ///The version of the Orckestra Commerce Cloud platform
        ///</summary>
        [DataMember]
        [ApiMember(Description="The version of the Orckestra Commerce Cloud platform")]
        public virtual string VersionOCC { get; set; }

        ///<summary>
        ///The default Help Url for the Orckestra Commerce Cloud platform
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default Help Url for the Orckestra Commerce Cloud platform")]
        public virtual string DefaultHelpUrl { get; set; }

        ///<summary>
        ///The list of Help URLs for Orckestra Commerce Cloud platform modules
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of Help URLs for Orckestra Commerce Cloud platform modules")]
        public virtual List<ModuleHelpUrl> ModuleHelpUrls { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Marketing
{

    [DataContract]
    public partial class Campaign
        : TrackingEntityBase<Guid>
    {
        public Campaign()
        {
            Promotions = new List<Promotion>{};
            ChildScopesInheritance = new Dictionary<string, bool>{};
        }

        ///<summary>
        ///The name of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the campaign.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The description of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the campaign.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The start date of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start date of the campaign.")]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///The end date of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date of the campaign.")]
        public virtual DateTime EndDate { get; set; }

        ///<summary>
        ///The status of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status of the campaign.")]
        public virtual CampaignStatus Status { get; set; }

        ///<summary>
        ///The promotions that are in the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The promotions that are in the campaign.")]
        public virtual List<Promotion> Promotions { get; set; }

        ///<summary>
        ///Indicates whether the campaign allows opting out.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the campaign allows opting out.")]
        public virtual bool AllowOptOut { get; set; }

        ///<summary>
        ///The time zone to use in conjunction with the date properties (Start/End) of this campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time zone to use in conjunction with the date properties (Start/End) of this campaign.")]
        public virtual string TimeZone { get; set; }

        ///<summary>
        ///The type of the campaign (CampaignType Lookup)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the campaign (CampaignType Lookup)")]
        public virtual string Type { get; set; }

        ///<summary>
        ///The priority of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The priority of the campaign.")]
        public virtual int Priority { get; set; }

        ///<summary>
        ///The id of the scope of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the scope of the campaign.")]
        public virtual string Scope { get; set; }

        ///<summary>
        ///A dictionary which contains entries for all child scopes who have the campaign and their opt-in status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A dictionary which contains entries for all child scopes who have the campaign and their opt-in status.")]
        public virtual Dictionary<string, bool> ChildScopesInheritance { get; set; }

        ///<summary>
        ///Indicates whether a person editing the campaign marked the step as complete.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether a person editing the campaign marked the step as complete.")]
        public virtual bool IsEditionStep1Completed { get; set; }

        ///<summary>
        ///Indicates whether a person editing the campaign marked the step as complete.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether a person editing the campaign marked the step as complete.")]
        public virtual bool IsEditionStep2Completed { get; set; }

        ///<summary>
        ///Indicates whether a person editing the campaign marked the step as complete.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether a person editing the campaign marked the step as complete.")]
        public virtual bool IsEditionStep3Completed { get; set; }
    }

    [DataContract]
    public partial class CampaignQueryResult
        : QueryResult<Campaign>
    {
    }

    [DataContract]
    public enum CampaignSearchMode
    {
        Unspecified,
        Current,
        Future,
        Archive,
    }

    [DataContract]
    public enum CampaignStatus
    {
        Unspecified,
        Draft,
        PendingApproval,
        Ready,
        Live,
        Paused,
        Cancelled,
        Expired,
        Rejected,
    }

    [DataContract]
    public partial class ConsumabilityRule
    {
        ///<summary>
        ///The name of the property to use for the rule.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the property to use for the rule.")]
        public virtual string PropertyName { get; set; }

        ///<summary>
        ///The type of the property to use for the rule..
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the property to use for the rule..")]
        public virtual PropertyDataType PropertyType { get; set; }

        ///<summary>
        ///The operation type of the rule
        ///</summary>
        [DataMember]
        [ApiMember(Description="The operation type of the rule")]
        public virtual ConsumabilityRuleOperation Operation { get; set; }

        ///<summary>
        ///The value to use for the rule.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The value to use for the rule.")]
        public virtual string Value { get; set; }

        ///<summary>
        ///The rule target.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The rule target.")]
        public virtual ConsumabilityRuleTarget Target { get; set; }
    }

    [DataContract]
    public enum ConsumabilityRuleOperation
    {
        Equals,
        DoesNotEqual,
        IsGreaterThan,
        IsGreaterThanOrEqualTo,
        IsLessThan,
        IsLessThanOrEqualTo,
        IsBetween,
        IsNotBetween,
        IsBlank,
        IsNotBlank,
        IsAnyOf,
        IsNoneOf,
    }

    [DataContract]
    public enum ConsumabilityRuleTarget
    {
        LineItem,
        Shipment,
    }

    [DataContract]
    public partial class ConsumedItem
    {
        ///<summary>
        ///The promotion id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The promotion id.")]
        public virtual string PromotionId { get; set; }

        ///<summary>
        ///The condition id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The condition id.")]
        public virtual string ConditionId { get; set; }

        ///<summary>
        ///The reward id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reward id.")]
        public virtual string RewardId { get; set; }

        ///<summary>
        ///The lineItem id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The lineItem id.")]
        public virtual string LineItemId { get; set; }

        ///<summary>
        ///The quantity of units consumed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantity of units consumed.")]
        public virtual double Quantity { get; set; }
    }

    [DataContract]
    public partial class ConsumedShipment
    {
        ///<summary>
        ///The shipment identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment identifier")]
        public virtual string ShipmentId { get; set; }
    }

    [DataContract]
    public partial class Coupon
    {
        ///<summary>
        ///The unique identifier of the coupon.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the coupon.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The coupon mode.  This mode is used to know if the coupon is unique for this promotion, or part of a set of coupons.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The coupon mode.  This mode is used to know if the coupon is unique for this promotion, or part of a set of coupons.")]
        public virtual CouponMode Mode { get; set; }

        ///<summary>
        ///The unique identifier of the promotion to which the coupon is associated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the promotion to which the coupon is associated.", IsRequired=true)]
        public virtual Guid PromotionId { get; set; }

        ///<summary>
        ///The coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.")]
        public virtual string CouponCode { get; set; }

        ///<summary>
        ///The coupon display text.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The coupon display text.")]
        public virtual string DisplayText { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether or not the coupon is being applied to the current order. (Cart and draft only)
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether or not the coupon is being applied to the current order. (Cart and draft only)")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether or not the coupon has been consumed in a previous order submission. This will be used to un-consume a coupon if it is no longer active when submitted. (Cart and draft only)
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether or not the coupon has been consumed in a previous order submission. This will be used to un-consume a coupon if it is no longer active when submitted. (Cart and draft only)")]
        public virtual bool HasBeenConsumed { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether or not the coupon has a soft delete. This is used to ensure that coupons that have been previously consumed are not removed before they are de-consumed. (Cart and draft only)
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether or not the coupon has a soft delete. This is used to ensure that coupons that have been previously consumed are not removed before they are de-consumed. (Cart and draft only)")]
        public virtual bool IsDeleted { get; set; }

        ///<summary>
        ///Gets or sets a value to indicate if the coupon is usable and the reason when it is not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value to indicate if the coupon is usable and the reason when it is not.")]
        public virtual CouponState CouponState { get; set; }

        ///<summary>
        ///Gets or sets the number of times the promo code was used.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the number of times the promo code was used.")]
        public virtual int UsedCount { get; set; }
    }

    [DataContract]
    public enum CouponMode
    {
        Unspecified,
        None,
        Single,
        Multiple,
    }

    [DataContract]
    public enum CouponOperationResultCode
    {
        Success,
        CouponCodeNotFound,
        CannotDeleteCouponInUse,
    }

    [DataContract]
    public enum CouponState
    {
        Unspecified,
        Ok,
        NotYetActive,
        Expired,
        GlobalMaximumUsed,
        CustomerMaximumUsed,
        CampaignNotFound,
        CampaignNotLive,
        InvalidCoupon,
        ValidCouponCannotApply,
    }

    [DataContract]
    public partial class DeleteCouponResult
    {
        public DeleteCouponResult()
        {
            ValidationResultCodes = new List<CouponOperationResultCode>{};
        }

        ///<summary>
        ///A value indicating whether this request is success.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="A value indicating whether this request is success.")]
        public virtual bool Success { get; set; }

        ///<summary>
        ///The validation result codes
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The validation result codes")]
        public virtual List<CouponOperationResultCode> ValidationResultCodes { get; set; }
    }

    [DataContract]
    public partial class DeleteSegmentResult
    {
    }

    [DataContract]
    public enum DisambiguationMethod
    {
        NotSpecified,
        LessExpensive,
        MoreExpensive,
    }

    [DataContract]
    public partial class GetTargetingMetadataResponse
    {
        public GetTargetingMetadataResponse()
        {
            TargetingItemsList = new List<TargetingItem>{};
        }

        ///<summary>
        ///A list of TargetingItem.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of TargetingItem.")]
        public virtual List<TargetingItem> TargetingItemsList { get; set; }
    }

    [DataContract]
    public enum ProcessPromotionEngineMode
    {
        Live,
        OnlySavedPromotionsInCart,
    }

    [DataContract]
    public enum ProductPickerMode
    {
        ById,
        BySku,
    }

    [DataContract]
    public partial class PromoCodeItem
    {
        ///<summary>
        ///The promo code.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The promo code.")]
        public virtual string Code { get; set; }

        ///<summary>
        ///The number of times the promo code was used.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of times the promo code was used.")]
        public virtual int UsedCount { get; set; }
    }

    [DataContract]
    public partial class Promotion
        : EntityBase<Guid>
    {
        public Promotion()
        {
            Conditions = new List<PurchaseCondition>{};
            RewardDefinitions = new List<RewardDefinition>{};
            ConsumabilityRules = new List<ConsumabilityRule>{};
        }

        ///<summary>
        ///the Id of the campaign that this promotion belongs to
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Id of the campaign that this promotion belongs to")]
        public virtual Guid CampaignId { get; set; }

        ///<summary>
        ///the name of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the promotion.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the description of the promotion
        ///</summary>
        [DataMember]
        [ApiMember(Description="the description of the promotion")]
        public virtual string Description { get; set; }

        ///<summary>
        ///[Obsolete] the start date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="[Obsolete] the start date.")]
        public virtual DateTime? CouponStartDate { get; set; }

        ///<summary>
        ///[Obsolete] the end date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="[Obsolete] the end date.")]
        public virtual DateTime? CouponEndDate { get; set; }

        ///<summary>
        ///the promotion start date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the promotion start date.")]
        public virtual DateTime? StartDate { get; set; }

        ///<summary>
        ///the promotion end date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the promotion end date.")]
        public virtual DateTime? EndDate { get; set; }

        ///<summary>
        ///the text message to show when the promotion is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the text message to show when the promotion is applied.")]
        public virtual LocalizedString PromotionText { get; set; }

        ///<summary>
        ///the targeting condition (customer requirements) for the promotion to be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the targeting condition (customer requirements) for the promotion to be applied.")]
        public virtual TargetingCondition Targeting { get; set; }

        ///<summary>
        ///the purchase conditions (purchase requirements) for the promotion to be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the purchase conditions (purchase requirements) for the promotion to be applied.")]
        public virtual List<PurchaseCondition> Conditions { get; set; }

        ///<summary>
        ///the reward definitions that are given if the promotion is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the reward definitions that are given if the promotion is applied.")]
        public virtual List<RewardDefinition> RewardDefinitions { get; set; }

        ///<summary>
        ///a copy of the priority of the campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="a copy of the priority of the campaign")]
        public virtual int CampaignPriority { get; set; }

        ///<summary>
        ///the priority of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the priority of the promotion.")]
        public virtual int Priority { get; set; }

        ///<summary>
        ///the number of times that the promotion can be applied to a customer's cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number of times that the promotion can be applied to a customer's cart")]
        public virtual int PromotionLimit { get; set; }

        ///<summary>
        ///the internal UI hints for the Orchestrator
        ///</summary>
        [DataMember]
        [ApiMember(Description="the internal UI hints for the Orchestrator")]
        public virtual string SelectionInfo { get; set; }

        ///<summary>
        ///Indicates whether this promotion is exclusive or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether this promotion is exclusive or not.")]
        public virtual bool IsExclusive { get; set; }

        ///<summary>
        ///Indicates whether discounted items should be excluded when evaluating this promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether discounted items should be excluded when evaluating this promotion.")]
        public virtual bool ExcludeDiscountedItems { get; set; }

        ///<summary>
        ///Indicates whether the condition is re-usable
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the condition is re-usable")]
        public virtual bool AllowConsumedConditionItemsToBeReused { get; set; }

        ///<summary>
        ///Indicates whether the reward is combinable
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the reward is combinable")]
        public virtual bool AllowConsumedRewardItemsToBeReused { get; set; }

        ///<summary>
        ///What CouponMode kind of coupon, if any, is needed to qualify for this promotion. (None, Single, Multiple)
        ///</summary>
        [DataMember]
        [ApiMember(Description="What CouponMode kind of coupon, if any, is needed to qualify for this promotion. (None, Single, Multiple)")]
        public virtual CouponMode CouponMode { get; set; }

        ///<summary>
        /// the global maximum usage (across all customers).
        ///</summary>
        [DataMember]
        [ApiMember(Description=" the global maximum usage (across all customers).")]
        public virtual int CouponMaximumUsageGlobal { get; set; }

        ///<summary>
        ///the maximum usage per customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum usage per customer")]
        public virtual int CouponMaximumUsageCustomer { get; set; }

        ///<summary>
        ///the coupon code used when in single coupon mode. 
        ///</summary>
        [DataMember]
        [ApiMember(Description="the coupon code used when in single coupon mode. ")]
        public virtual string CouponSingleCouponCode { get; set; }

        ///<summary>
        ///the number of the version
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number of the version")]
        public virtual int VersionNumber { get; set; }

        ///<summary>
        ///Indicates whether the promotion is Active
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the promotion is Active")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///Indicates maximum amount of total reward for this promotion
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates maximum amount of total reward for this promotion")]
        public virtual decimal? MaximumRewardAmount { get; set; }

        ///<summary>
        ///Indicates exclusivity of the promotion
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates exclusivity of the promotion")]
        public virtual PromotionExclusivity Exclusivity { get; set; }

        ///<summary>
        ///the DateTime filter. Value can be null to disable filter.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the DateTime filter. Value can be null to disable filter.")]
        public virtual PromotionDatetimeFilter DatetimeFilter { get; set; }

        ///<summary>
        ///the rules used to determine whether an entity should be used when validating the conditions of this promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the rules used to determine whether an entity should be used when validating the conditions of this promotion.")]
        public virtual List<ConsumabilityRule> ConsumabilityRules { get; set; }
    }

    [DataContract]
    public partial class PromotionDatetimeFilter
    {
        ///<summary>
        ///the days of the week when the promotion is valid.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the days of the week when the promotion is valid.")]
        public virtual PromotionDayOfWeek DaysOfWeek { get; set; }

        ///<summary>
        ///the start time of the day when the promotion is valid.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the start time of the day when the promotion is valid.")]
        public virtual DateTime? StartTime { get; set; }

        ///<summary>
        ///the end time of the day when the promotion is valid.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the end time of the day when the promotion is valid.")]
        public virtual DateTime? EndTime { get; set; }
    }

    [Flags]
    [DataContract]
    public enum PromotionDayOfWeek
    {
        Monday = 1,
        Tuesday = 2,
        Wednesday = 4,
        Thursday = 8,
        Friday = 16,
        Saturday = 32,
        Sunday = 64,
    }

    [DataContract]
    public partial class PromotionEngineResult
    {
        public PromotionEngineResult()
        {
            LiveCampaigns = new List<Campaign>{};
            AvailablePromotions = new List<Promotion>{};
            ProcessedPromotions = new List<PromotionProcessingResult>{};
        }

        ///<summary>
        ///The processed customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The processed customer")]
        public virtual Customer Customer { get; set; }

        ///<summary>
        ///The processed cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="The processed cart")]
        public virtual Cart Cart { get; set; }

        ///<summary>
        ///The live campaigns.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The live campaigns.")]
        public virtual List<Campaign> LiveCampaigns { get; set; }

        ///<summary>
        ///The list of all the processed promotions considered available for the customer (i.e. the targeting condition was met), at a given time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of all the processed promotions considered available for the customer (i.e. the targeting condition was met), at a given time.")]
        public virtual List<Promotion> AvailablePromotions { get; set; }

        ///<summary>
        ///The list of all the processed promotions considered, at a given time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of all the processed promotions considered, at a given time.")]
        public virtual List<PromotionProcessingResult> ProcessedPromotions { get; set; }

        ///<summary>
        ///The maximum of processed promotions (500) is reached.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum of processed promotions (500) is reached.")]
        public virtual bool IsMaxProcessedPromotionsReached { get; set; }
    }

    [DataContract]
    public enum PromotionExclusivity
    {
        None,
        Campaign,
        All,
    }

    [DataContract]
    public enum PromotionLevel
    {
        NotSpecified,
        Product,
        Order,
        Shipping,
        Bundle,
        Payment,
        Gift,
    }

    [DataContract]
    public partial class PromotionProcessingResult
    {
        public PromotionProcessingResult()
        {
            ConsumedCoupons = new List<Coupon>{};
            Rewards = new List<Reward>{};
            ConsumedConditionItems = new List<ConsumedItem>{};
            ConsumedConditionShipments = new List<ConsumedShipment>{};
            ConsumedRewardItems = new List<ConsumedItem>{};
            ConsumedRewardShipments = new List<ConsumedShipment>{};
        }

        ///<summary>
        ///The promotion
        ///</summary>
        [DataMember]
        [ApiMember(Description="The promotion")]
        public virtual Promotion Promotion { get; set; }

        ///<summary>
        ///Whether or not the promotion is satisfied
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the promotion is satisfied")]
        public virtual bool IsPromotionSatisfied { get; set; }

        ///<summary>
        ///The list of consumed coupons
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of consumed coupons")]
        public virtual List<Coupon> ConsumedCoupons { get; set; }

        ///<summary>
        ///The list of rewards
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of rewards")]
        public virtual List<Reward> Rewards { get; set; }

        ///<summary>
        ///The list of consumed condition items
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of consumed condition items")]
        public virtual List<ConsumedItem> ConsumedConditionItems { get; set; }

        ///<summary>
        ///The list of consumed condition shipment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of consumed condition shipment")]
        public virtual List<ConsumedShipment> ConsumedConditionShipments { get; set; }

        ///<summary>
        ///The number of consumed reward order
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of consumed reward order")]
        public virtual int ConsumedRewardOrderCount { get; set; }

        ///<summary>
        ///The list of consumed reward items
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of consumed reward items")]
        public virtual List<ConsumedItem> ConsumedRewardItems { get; set; }

        ///<summary>
        ///The list of consumed reward shipments
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of consumed reward shipments")]
        public virtual List<ConsumedShipment> ConsumedRewardShipments { get; set; }
    }

    [DataContract]
    public partial class PromotionSummaries
    {
        public PromotionSummaries()
        {
            Promotions = new List<PromotionSummary>{};
        }

        ///<summary>
        ///the list of PromotionSummary.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of PromotionSummary.")]
        public virtual List<PromotionSummary> Promotions { get; set; }
    }

    [DataContract]
    public partial class PromotionSummary
        : EntityBase<Guid>
    {
        ///<summary>
        ///the name of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the promotion.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the text message to show when the promotion is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the text message to show when the promotion is applied.")]
        public virtual LocalizedString PromotionText { get; set; }

        ///<summary>
        ///the priority of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the priority of the promotion.")]
        public virtual int Priority { get; set; }
    }

    [DataContract]
    public partial class PurchaseCondition
        : EntityBase<Guid>
    {
        public PurchaseCondition()
        {
            Targets = new List<PurchaseConditionTarget>{};
            ConsumabilityRules = new List<ConsumabilityRule>{};
        }

        ///<summary>
        ///The level of the purchase condition: on which part of the cart the condition will be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The level of the purchase condition: on which part of the cart the condition will be applied.")]
        public virtual PromotionLevel Level { get; set; }

        ///<summary>
        ///The type: how the Value will be applied to the Targets.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type: how the Value will be applied to the Targets.")]
        public virtual PurchaseConditionType Type { get; set; }

        ///<summary>
        ///the value of the condition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the value of the condition.")]
        public virtual double Value { get; set; }

        ///<summary>
        ///the UnitOfMeasure (Unit, Kilogram, Liter, etc..) of the condition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the UnitOfMeasure (Unit, Kilogram, Liter, etc..) of the condition.")]
        public virtual string UnitOfMeasure { get; set; }

        ///<summary>
        ///a list of the targets on which the condition will be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of the targets on which the condition will be applied.")]
        public virtual List<PurchaseConditionTarget> Targets { get; set; }

        ///<summary>
        ///a flag indicating whether discounted items should be excluded when evaluating this condition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a flag indicating whether discounted items should be excluded when evaluating this condition.")]
        public virtual bool ExcludeDiscountedItems { get; set; }

        ///<summary>
        ///the rules used to determine whether an entity should be used when validating the conditions of this promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the rules used to determine whether an entity should be used when validating the conditions of this promotion.")]
        public virtual List<ConsumabilityRule> ConsumabilityRules { get; set; }
    }

    [DataContract]
    public partial class PurchaseConditionTarget
    {
        ///<summary>
        ///the type of the target PurchaseConditionTargetType.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of the target PurchaseConditionTargetType.")]
        public virtual PurchaseConditionTargetType TargetType { get; set; }

        ///<summary>
        /// the catalog name of the entity necessary to get the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description=" the catalog name of the entity necessary to get the promotion.")]
        public virtual string CatalogId { get; set; }

        ///<summary>
        ///the unique identifier of the product necessary to get the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the product necessary to get the promotion.")]
        public virtual string ProductId { get; set; }

        ///<summary>
        /// the unique identifier of the variant necessary to get the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description=" the unique identifier of the variant necessary to get the promotion.")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///the identifier of the category necessary to get the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the category necessary to get the promotion.")]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///the shipping provider necessary to get the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the shipping provider necessary to get the promotion.")]
        public virtual string ShippingProviderId { get; set; }

        ///<summary>
        ///the payment method necessary to get the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the payment method necessary to get the promotion.")]
        public virtual string PaymentProviderName { get; set; }

        ///<summary>
        ///the payment method necessary to get the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the payment method necessary to get the promotion.")]
        public virtual string PaymentMethodType { get; set; }

        ///<summary>
        ///the shipping method necessary to get the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the shipping method necessary to get the promotion.")]
        public virtual string FulfillmentMethodName { get; set; }

        ///<summary>
        ///the display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name.")]
        public virtual string DisplayName { get; set; }
    }

    [DataContract]
    public enum PurchaseConditionTargetType
    {
        Product,
        Category,
        Variant,
        FulfillmentMethod,
        PaymentMethod,
    }

    [DataContract]
    public enum PurchaseConditionType
    {
        Quantity,
        Amount,
        FulfillmentMethod,
        PaymentMethod,
        Recurrence,
    }

    [DataContract]
    public partial class RewardDefinition
        : EntityBase<Guid>
    {
        public RewardDefinition()
        {
            RewardTargets = new List<RewardTarget>{};
            ConsumabilityRules = new List<ConsumabilityRule>{};
        }

        ///<summary>
        ///the level of the reward: on which part of the order the promotion is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the level of the reward: on which part of the order the promotion is applied.")]
        public virtual PromotionLevel Level { get; set; }

        ///<summary>
        ///The type of reward. (e.g: Discount or External)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of reward. (e.g: Discount or External)")]
        public virtual RewardType RewardType { get; set; }

        ///<summary>
        ///the type of the value of the reward: how the Value will be applied to the RewardTargets.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of the value of the reward: how the Value will be applied to the RewardTargets.")]
        public virtual RewardValueType ValueType { get; set; }

        ///<summary>
        ///the value of the reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the value of the reward.")]
        public virtual double Value { get; set; }

        ///<summary>
        ///the quantity of targets on which the reward will apply.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the quantity of targets on which the reward will apply.")]
        public virtual decimal Quantity { get; set; }

        ///<summary>
        ///the value indicating whether the reward condition can be less than the quantity specified.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the value indicating whether the reward condition can be less than the quantity specified.")]
        public virtual bool MatchQuantityOrLess { get; set; }

        ///<summary>
        ///the value indicating whether the reward can be more than the quantity specified.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the value indicating whether the reward can be more than the quantity specified.")]
        public virtual bool MatchQuantityOrMore { get; set; }

        ///<summary>
        ///the value indicating whether the reward can use items consumed in the conditions.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the value indicating whether the reward can use items consumed in the conditions.")]
        public virtual bool UseConsumedItemsFromConditions { get; set; }

        ///<summary>
        ///a list of reward targets on which the reward will be applied. 
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of reward targets on which the reward will be applied. ")]
        public virtual List<RewardTarget> RewardTargets { get; set; }

        ///<summary>
        ///the disambiguation method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the disambiguation method.")]
        public virtual DisambiguationMethod Disambiguation { get; set; }

        ///<summary>
        ///the UnitOfMeasure (Unit, Kilogram, Liter, etc..) of the reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the UnitOfMeasure (Unit, Kilogram, Liter, etc..) of the reward.")]
        public virtual string UnitOfMeasure { get; set; }

        ///<summary>
        ///a flag indicating whether discounted items should be excluded when evaluating this reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a flag indicating whether discounted items should be excluded when evaluating this reward.")]
        public virtual bool ExcludeDiscountedItems { get; set; }

        ///<summary>
        ///the rules used to determine whether an entity should be used when validating the conditions of this promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the rules used to determine whether an entity should be used when validating the conditions of this promotion.")]
        public virtual List<ConsumabilityRule> ConsumabilityRules { get; set; }
    }

    [DataContract]
    public partial class RewardTarget
    {
        ///<summary>
        ///the target RewardTargetType.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the target RewardTargetType.")]
        public virtual RewardTargetType TargetType { get; set; }

        ///<summary>
        ///the display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name.")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///the catalog name of the entity on which the promotion will give a reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the catalog name of the entity on which the promotion will give a reward.")]
        public virtual string CatalogId { get; set; }

        ///<summary>
        ///the unique identifier of the product on which the promotion will give a reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the product on which the promotion will give a reward.")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///the unique identifier of the variant on which the promotion will give a reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the variant on which the promotion will give a reward.")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///the identifier of the category on which the promotion will give a reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the category on which the promotion will give a reward.")]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///the identifier of the shipping provider on which the promotion will give a reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the shipping provider on which the promotion will give a reward.")]
        public virtual string ShippingProviderId { get; set; }

        ///<summary>
        ///the name of the Fulfillment method on which the promotion will give a reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the Fulfillment method on which the promotion will give a reward.")]
        public virtual string FulfillmentMethodName { get; set; }

        ///<summary>
        ///the quantity of entities on which the reward will be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the quantity of entities on which the reward will be applied.")]
        public virtual int Quantity { get; set; }
    }

    [DataContract]
    public enum RewardTargetType
    {
        Product,
        Variant,
        Category,
        FulfillmentMethod,
    }

    [DataContract]
    public enum RewardType
    {
        Discount,
        External,
        Gift,
    }

    [DataContract]
    public enum RewardValueType
    {
        Amount,
        Percentage,
        FixedPrice,
    }

    [DataContract]
    public partial class Segment
        : EntityBase<Guid>
    {
        ///<summary>
        ///The name of the segment
        ///</summary>
        [DataMember(Order=0)]
        [Required]
        [ApiMember(Description="The name of the segment")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The name of the description
        ///</summary>
        [DataMember(Order=0)]
        [Required]
        [ApiMember(Description="The name of the description")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The targeting condition (customer requirements) for the promotion to be applied.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The targeting condition (customer requirements) for the promotion to be applied.")]
        public virtual TargetingCondition TargetingCondition { get; set; }

        ///<summary>
        ///Indicates whether the segment is active and usable in promotion
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="Indicates whether the segment is active and usable in promotion")]
        public virtual bool IsActive { get; set; }
    }

    [DataContract]
    public enum SegmentOrderField
    {
        Name,
        Status,
        StartDate,
        EndDate,
        Type,
        Scope,
    }

    [DataContract]
    public partial class SegmentQueryResult
        : QueryResult<Segment>
    {
    }

    [DataContract]
    public enum SegmentStatus
    {
        Unspecified,
        Active,
        Inactive,
    }

    [DataContract]
    public partial class Settings
    {
        ///<summary>
        ///Gets or sets a value indicating whether the product picker fetch products by IDs or by skus.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether the product picker fetch products by IDs or by skus.")]
        public virtual ProductPickerMode ProductPickerMode { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether campaign inheritance is managed at the campaign-level.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether campaign inheritance is managed at the campaign-level.")]
        public virtual bool AllowCampaignLevelInheritanceManagement { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether campaign are inherited by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether campaign are inherited by default.")]
        public virtual bool CampaignsAreInheritedByDefault { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether Order rewards are splitted on LineItems or applied on shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether Order rewards are splitted on LineItems or applied on shipment.")]
        public virtual bool OrderRewardsAreSplittedOnLineItem { get; set; }
    }

    [DataContract]
    public enum TargetingBinaryOperator
    {
        Unspecified,
        And,
        Or,
    }

    [DataContract]
    public enum TargetingCollectionOperator
    {
        Unspecified,
        All,
        Any,
    }

    [DataContract]
    public enum TargetingConditionType
    {
        Unspecified,
        PropertyFilter,
        CollectionFilter,
        SegmentFilter,
        TargetingGroup,
    }

    [DataContract]
    public partial class TargetingItem
    {
        ///<summary>
        ///The display name of the item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name of the item.")]
        public virtual string DisplayName { get; set; }
    }

    [DataContract]
    public enum TargetingOperator
    {
        Unspecified,
        Equals,
        GreaterThan,
        GreaterThanOrEqual,
        LessThan,
        LessThanOrEqual,
        Matches,
        In,
        HasValue,
        IsEmpty,
    }
}

namespace Orckestra.Overture.ServiceModel.Metadata
{

    [DataContract]
    public enum AttributeDataType
    {
        Integer,
        Decimal,
        Boolean,
        Text,
        DateTime,
        Lookup,
        EntityReference,
        CustomType,
        Xml,
        Uniqueidentifier,
        Number,
    }

    [DataContract]
    public partial class AttributeDefinition
    {
        ///<summary>
        ///The name of the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the AttributeDefinition.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The Id of the AttributeDefinition group, if the attribute is associated to a group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Id of the AttributeDefinition group, if the attribute is associated to a group.")]
        public virtual string GroupId { get; set; }

        ///<summary>
        ///The display name given for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name given for the AttributeDefinition.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description for the AttributeDefinition.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///Whether a value is required for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether a value is required for the AttributeDefinition.")]
        public virtual bool IsRequired { get; set; }

        ///<summary>
        ///The display order for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display order for the AttributeDefinition.")]
        public virtual int DisplayOrder { get; set; }

        ///<summary>
        ///The data type for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The data type for the AttributeDefinition.")]
        public virtual AttributeDataType DataType { get; set; }

        ///<summary>
        ///The type of the custom data for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the custom data for the AttributeDefinition.")]
        public virtual string CustomDataType { get; set; }

        ///<summary>
        ///Whether the AttributeDefinition is built-in.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the AttributeDefinition is built-in.")]
        public virtual bool IsBuiltIn { get; set; }

        ///<summary>
        ///Whether multiple values can be specified for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether multiple values can be specified for the AttributeDefinition.")]
        public virtual bool AllowMultipleValues { get; set; }

        ///<summary>
        ///Whether the AttributeDefinition is multilingual and a distinct value can be specified for different cultures.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the AttributeDefinition is multilingual and a distinct value can be specified for different cultures.")]
        public virtual bool Multilingual { get; set; }

        ///<summary>
        ///The default value for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default value for the AttributeDefinition.")]
        public virtual Object DefaultValue { get; set; }

        ///<summary>
        ///The minimum value of the allowed range for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum value of the allowed range for the AttributeDefinition.")]
        public virtual Object Minimum { get; set; }

        ///<summary>
        ///The maximum value of the allowed range for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum value of the allowed range for the AttributeDefinition.")]
        public virtual Object Maximum { get; set; }

        ///<summary>
        ///The name of the reference type for the AttributeDefinition, if DataType is a lookup or an entity reference.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the reference type for the AttributeDefinition, if DataType is a lookup or an entity reference.")]
        public virtual string ReferenceTypeName { get; set; }

        ///<summary>
        ///The AttributeDefinition should be indexed and used for searches.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The AttributeDefinition should be indexed and used for searches.")]
        public virtual bool IsSearchable { get; set; }
    }

    [DataContract]
    public partial class CategoryDefinitionAttributeToAdd
    {
        [DataMember]
        public virtual string AttributeName { get; set; }

        [DataMember]
        public virtual int SequenceNumber { get; set; }
    }

    [DataContract]
    public partial class EntityDefinition
    {
        public EntityDefinition()
        {
            Attributes = new List<AttributeDefinition>{};
        }

        ///<summary>
        ///The display name given for the EntityTypeDefinition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name given for the EntityTypeDefinition")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The unique Overture name for the EntityTypeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique Overture name for the EntityTypeDefinition.")]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///The description for the EntityTypeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description for the EntityTypeDefinition.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///Whether the EntityTypeDefinition is built-in.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the EntityTypeDefinition is built-in.")]
        public virtual bool IsBuiltIn { get; set; }

        ///<summary>
        ///The list of attributes for the EntityTypeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of attributes for the EntityTypeDefinition.")]
        public virtual List<AttributeDefinition> Attributes { get; set; }

        ///<summary>
        ///Whether the EntityTypeDefinition is a shared entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the EntityTypeDefinition is a shared entity.")]
        public virtual bool IsSharedEntity { get; set; }
    }

    [DataContract]
    public partial class Lookup
    {
        public Lookup()
        {
            Values = new List<LookupValue>{};
        }

        ///<summary>
        ///The name for the Lookup. This is the business key. Should be unique and not null.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name for the Lookup. This is the business key. Should be unique and not null.")]
        public virtual string LookupName { get; set; }

        ///<summary>
        ///The list of values available for the Lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of values available for the Lookup.")]
        public virtual List<LookupValue> Values { get; set; }

        ///<summary>
        ///The display name given for the Lookup.  It is kept as a multilingual representation, allowing the display of a language friendly version of the name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name given for the Lookup.  It is kept as a multilingual representation, allowing the display of a language friendly version of the name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description of this lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of this lookup")]
        public virtual string Description { get; set; }

        ///<summary>
        ///If the lookup is active. Lookup can not be used after being deactivated but previous references are not deleted.
        ///</summary>
        [DataMember]
        [ApiMember(Description="If the lookup is active. Lookup can not be used after being deactivated but previous references are not deleted.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///If the lookup value is part of the base system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="If the lookup value is part of the base system.")]
        public virtual bool IsSystem { get; set; }
    }

    [DataContract]
    public partial class LookupValue
    {
        ///<summary>
        ///The unique identifier of the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the entity.", IsRequired=true)]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The unique lookup value name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique lookup value name.")]
        public virtual string Value { get; set; }

        ///<summary>
        ///The name of the lookup for which this value is defined.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the lookup for which this value is defined.")]
        public virtual string LookupId { get; set; }

        ///<summary>
        ///The UI-friendly name of this lookup value
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UI-friendly name of this lookup value")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The number used for ordering the LookupValue in a list.An integer that allows the ordering of the values when they are presented in a list. No restriction is given for the number (e.g. it allows two values to have the same value for this property).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number used for ordering the LookupValue in a list.An integer that allows the ordering of the values when they are presented in a list. No restriction is given for the number (e.g. it allows two values to have the same value for this property).")]
        public virtual int SortOrder { get; set; }

        ///<summary>
        ///If the lookup value is active. Lookup value can not be used after being deactivated but previous references are not deleted.
        ///</summary>
        [DataMember]
        [ApiMember(Description="If the lookup value is active. Lookup value can not be used after being deactivated but previous references are not deleted.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///Whether this lookup value is built-in.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether this lookup value is built-in.")]
        public virtual bool IsSystem { get; set; }
    }

    [DataContract]
    public enum ProductAttributeTarget
    {
        Product,
        ProductAndVariant,
        VariantKey,
    }

    [DataContract]
    public partial class ProductDefinition
    {
        public ProductDefinition()
        {
            Properties = new List<ProductPropertyDefinition>{};
            PropertyGroups = new List<ProductPropertyDefinitionGroup>{};
            VariantProperties = new List<ProductPropertyDefinition>{};
        }

        ///<summary>
        ///The name (business key) of the definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name (business key) of the definition")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The description (non multilingual) of the entity definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description (non multilingual) of the entity definition")]
        public virtual string Description { get; set; }

        ///<summary>
        ///A UI friendly name for the definition. It is multilingual
        ///</summary>
        [DataMember]
        [ApiMember(Description="A UI friendly name for the definition. It is multilingual")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The type of entity for which the definition applies (Product or Category)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of entity for which the definition applies (Product or Category)")]
        public virtual ProductDefinitionType ProductType { get; set; }

        ///<summary>
        ///A number defining the order in which the definition appears in the list
        ///</summary>
        [DataMember]
        [ApiMember(Description="A number defining the order in which the definition appears in the list")]
        public virtual int SequenceNumber { get; set; }

        ///<summary>
        ///The non-grouped properties that are assigned to the definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The non-grouped properties that are assigned to the definition")]
        public virtual List<ProductPropertyDefinition> Properties { get; set; }

        ///<summary>
        ///The groups containing properties that are assigned to the definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The groups containing properties that are assigned to the definition")]
        public virtual List<ProductPropertyDefinitionGroup> PropertyGroups { get; set; }

        ///<summary>
        ///The list of attributes assigned to the definition allowing Variant of a product. An empty collection means that variants are not allowedOnly available for a Product definition, not a Category
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of attributes assigned to the definition allowing Variant of a product. An empty collection means that variants are not allowedOnly available for a Product definition, not a Category")]
        public virtual List<ProductPropertyDefinition> VariantProperties { get; set; }

        ///<summary>
        ///Whether the entity can have list prices associated to it
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the entity can have list prices associated to it")]
        public virtual bool AllowPriceLists { get; set; }
    }

    [DataContract]
    public partial class ProductDefinitionAttributeToAdd
    {
        ///<summary>
        ///The name of the existing attribute to associate to the definition
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The name of the existing attribute to associate to the definition")]
        public virtual string AttributeName { get; set; }

        ///<summary>
        ///Indicates whether attribute should be applied to product itself and/or its variants.
        ///</summary>
        [DataMember(Order=1)]
        [Required]
        [ApiMember(Description="Indicates whether attribute should be applied to product itself and/or its variants.")]
        public virtual ProductAttributeTarget AttributeTarget { get; set; }

        ///<summary>
        ///Affects the order in which attributes are shown when editing a product.
        ///</summary>
        [DataMember(Order=2)]
        [ApiMember(Description="Affects the order in which attributes are shown when editing a product.")]
        public virtual int SequenceNumber { get; set; }

        ///<summary>
        ///The order of a key variant attribute.
        ///</summary>
        [DataMember(Order=3)]
        [ApiMember(Description="The order of a key variant attribute.")]
        public virtual int? KeyVariantOrder { get; set; }

        ///<summary>
        ///Gets or sets a value inticating whether the attribute is used for variant grouping
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="Gets or sets a value inticating whether the attribute is used for variant grouping")]
        public virtual bool IsVariantGroup { get; set; }
    }

    [DataContract]
    public enum ProductDefinitionType
    {
        Product,
        Category,
    }

    [DataContract]
    public partial class ProductLookupDefinition
    {
        ///<summary>
        ///The lookup definition of the attribute
        ///</summary>
        [DataMember]
        [ApiMember(Description="The lookup definition of the attribute")]
        public virtual bool AllowMultipleSelection { get; set; }

        ///<summary>
        ///The lookup definition of the attribute
        ///</summary>
        [DataMember]
        [ApiMember(Description="The lookup definition of the attribute")]
        public virtual string LookupName { get; set; }
    }

    [DataContract]
    public partial class ProductPropertyDefinitionGroup
    {
        public ProductPropertyDefinitionGroup()
        {
            Properties = new List<ProductPropertyDefinition>{};
        }

        ///<summary>
        ///A number representing the order in which the group will be displayed in the list of groups
        ///</summary>
        [DataMember]
        [ApiMember(Description="A number representing the order in which the group will be displayed in the list of groups")]
        public virtual int DisplayOrder { get; set; }

        ///<summary>
        ///The list of attributes associated with the group
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of attributes associated with the group")]
        public virtual List<ProductPropertyDefinition> Properties { get; set; }

        ///<summary>
        ///The name (unchangeable) of the group (business key)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name (unchangeable) of the group (business key)")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The UI friendly name of the group. It is multilingual
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UI friendly name of the group. It is multilingual")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///Whether the group is a system (un-editable) group
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the group is a system (un-editable) group")]
        public virtual bool IsSystem { get; set; }

        ///<summary>
        ///A description for the group. Not multilingual
        ///</summary>
        [DataMember]
        [ApiMember(Description="A description for the group. Not multilingual")]
        public virtual string Description { get; set; }
    }

    [DataContract]
    public partial class ProductPropertyDefinitionGroupQueryResult
        : QueryResult<ProductPropertyDefinitionGroup>
    {
    }

    [DataContract]
    public partial class ProfileAttributeGroup
    {
        ///<summary>
        ///A number representing the order in which the group will be displayed in the list of groups
        ///</summary>
        [DataMember]
        [ApiMember(Description="A number representing the order in which the group will be displayed in the list of groups")]
        public virtual int DisplayOrder { get; set; }

        ///<summary>
        ///The name (unchangeable) of the group (business key)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name (unchangeable) of the group (business key)")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The UI friendly name of the group. It is multilingual
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UI friendly name of the group. It is multilingual")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///Whether the group is a system (not editable) group
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the group is a system (not editable) group")]
        public virtual bool IsSystem { get; set; }

        ///<summary>
        ///A description for the group. Not multilingual
        ///</summary>
        [DataMember]
        [ApiMember(Description="A description for the group. Not multilingual")]
        public virtual string Description { get; set; }
    }

    [DataContract]
    public enum PropertyDataType
    {
        Number,
        Boolean,
        Text,
        DateTime,
        Decimal,
        Currency,
        Lookup,
        RichText,
    }

    [DataContract]
    public partial class SaveAttributeDefinition
    {
        ///<summary>
        ///The name of the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the AttributeDefinition.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The Id of the AttributeDefinition group, if the attribute is associated to a group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Id of the AttributeDefinition group, if the attribute is associated to a group.")]
        public virtual string GroupId { get; set; }

        ///<summary>
        ///The display name given for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name given for the AttributeDefinition.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description for the AttributeDefinition.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///Whether a value is required for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether a value is required for the AttributeDefinition.")]
        public virtual bool IsRequired { get; set; }

        ///<summary>
        ///The display order for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display order for the AttributeDefinition.")]
        public virtual int DisplayOrder { get; set; }

        ///<summary>
        ///The data type for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The data type for the AttributeDefinition.")]
        public virtual AttributeDataType DataType { get; set; }

        ///<summary>
        ///The type of the custom data for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the custom data for the AttributeDefinition.")]
        public virtual string CustomDataType { get; set; }

        ///<summary>
        ///Whether the AttributeDefinition is built-in.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the AttributeDefinition is built-in.")]
        public virtual bool IsBuiltIn { get; set; }

        ///<summary>
        ///Whether multiple values can be specified for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether multiple values can be specified for the AttributeDefinition.")]
        public virtual bool AllowMultipleValues { get; set; }

        ///<summary>
        ///Whether the AttributeDefinition is multilingual and a distinct value can be specified for different cultures.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the AttributeDefinition is multilingual and a distinct value can be specified for different cultures.")]
        public virtual bool Multilingual { get; set; }

        ///<summary>
        ///The default value for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default value for the AttributeDefinition.")]
        public virtual ValueTypeWrapper DefaultValue { get; set; }

        ///<summary>
        ///The minimum value of the allowed range for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum value of the allowed range for the AttributeDefinition.")]
        public virtual ValueTypeWrapper Minimum { get; set; }

        ///<summary>
        ///The maximum value of the allowed range for the AttributeDefinition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum value of the allowed range for the AttributeDefinition.")]
        public virtual ValueTypeWrapper Maximum { get; set; }

        ///<summary>
        ///The name of the reference type for the AttributeDefinition, if DataType is a lookup or an entity reference.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the reference type for the AttributeDefinition, if DataType is a lookup or an entity reference.")]
        public virtual string ReferenceTypeName { get; set; }

        ///<summary>
        ///The AttributeDefinition should be indexed and used for searches.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The AttributeDefinition should be indexed and used for searches.")]
        public virtual bool IsSearchable { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Orders
{

    [DataContract]
    public enum AdditionalFeeCalculationRule
    {
        PerUnit,
        PerLineItem,
    }

    [DataContract]
    public partial class Cart
        : TrackingEntityBase<Guid>
    {
        public Cart()
        {
            Coupons = new List<Coupon>{};
            Shipments = new List<Shipment>{};
            OriginalPromotions = new List<PromotionVersion>{};
            Payments = new List<Payment>{};
        }

        ///<summary>
        ///the version of the cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="the version of the cart")]
        public virtual string CartVersion { get; set; }

        ///<summary>
        ///the ID of the customer owning this cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the ID of the customer owning this cart.", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///the name of the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the cart.", IsRequired=true)]
        public virtual string Name { get; set; }

        ///<summary>
        ///the cart type, according to the CartType lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cart type, according to the CartType lookup.")]
        public virtual string CartType { get; set; }

        ///<summary>
        ///the cart source.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cart source.")]
        public virtual string Source { get; set; }

        ///<summary>
        ///the collection of coupon codes included in the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of coupon codes included in the order.")]
        public virtual List<Coupon> Coupons { get; set; }

        ///<summary>
        ///the collection of shipments associated to this order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of shipments associated to this order.")]
        public virtual List<Shipment> Shipments { get; set; }

        ///<summary>
        ///the currency ISO code under which the items are sold 'Currency.IsoCode'.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the currency ISO code under which the items are sold 'Currency.IsoCode'.")]
        public virtual string BillingCurrency { get; set; }

        ///<summary>
        ///the computed sum of all discounts applied to the cart (including order, line item and fulfillment level discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the computed sum of all discounts applied to the cart (including order, line item and fulfillment level discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? DiscountTotal { get; set; }

        ///<summary>
        ///the computed sum of all shipment cost. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the computed sum of all shipment cost. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? FulfillmentCost { get; set; }

        ///<summary>
        ///the computed sum of all line items totals, including line item and order level discount. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the computed sum of all line items totals, including line item and order level discount. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? SubTotal { get; set; }

        ///<summary>
        ///the computed sum of all tax amount for the order. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the computed sum of all tax amount for the order. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? TaxTotal { get; set; }

        ///<summary>
        ///the total amount of all line items merchandise without discounts. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the total amount of all line items merchandise without discounts. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? MerchandiseTotal { get; set; }

        ///<summary>
        ///the total amount of adjustments.  This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the total amount of adjustments.  This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? AdjustmentTotal { get; set; }

        ///<summary>
        ///the grand total for the cart. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the grand total for the cart. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? Total { get; set; }

        ///<summary>
        ///the status of the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the status of the cart.")]
        public virtual string Status { get; set; }

        ///<summary>
        ///the unique identifier of the scope associated to the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the scope associated to the cart.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the customer information.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the customer information.")]
        public virtual CustomerSummary Customer { get; set; }

        ///<summary>
        ///the order location information.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order location information.")]
        public virtual OrderLocationSummary OrderLocation { get; set; }

        ///<summary>
        ///the sum of LineItems totals without discount.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sum of LineItems totals without discount.")]
        public virtual decimal LineItemsTotalWithoutDiscount { get; set; }

        ///<summary>
        ///the minimum value between the sum of LineItem.DiscountAmount and LineItemsTotalWithoutDiscount.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the minimum value between the sum of LineItem.DiscountAmount and LineItemsTotalWithoutDiscount.")]
        public virtual decimal LineItemLevelDiscount { get; set; }

        ///<summary>
        ///the sum of LineItems totals.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sum of LineItems totals.")]
        public virtual decimal LineItemsTotal { get; set; }

        ///<summary>
        ///the sum of LineItems totals.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sum of LineItems totals.")]
        public virtual decimal? AdditionalFeeTotal { get; set; }

        ///<summary>
        ///the sum of Shipments discounts. Shipment.DiscountAmount.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sum of Shipments discounts. Shipment.DiscountAmount.")]
        public virtual decimal FulfillmentLevelDiscountTotal { get; set; }

        ///<summary>
        ///the fulfillment cost without discount.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment cost without discount.")]
        public virtual decimal FulfillmentCostWithoutDiscount { get; set; }

        ///<summary>
        ///the sum of Discounts amounts.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sum of Discounts amounts.")]
        public virtual decimal ShipmentLevelDiscountTotal { get; set; }

        ///<summary>
        ///the sum of LineItems totals without discount.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sum of LineItems totals without discount.")]
        public virtual decimal SubTotalDiscount { get; set; }

        ///<summary>
        ///the culture in which the cart is being processed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the culture in which the cart is being processed.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///the line item count.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the line item count.")]
        public virtual int ItemCount { get; set; }

        ///<summary>
        ///the promotion versions applied for the original order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the promotion versions applied for the original order.")]
        public virtual List<PromotionVersion> OriginalPromotions { get; set; }

        ///<summary>
        ///The collection of payments to use for this order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of payments to use for this order.")]
        public virtual List<Payment> Payments { get; set; }
    }

    [DataContract]
    public partial class CartProductSummary
    {
        ///<summary>
        ///the bag in which the custom product attributes are stored.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the bag in which the custom product attributes are stored.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///the display name of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name of the product.")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///the UnitOfMeasure of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the UnitOfMeasure of the product.")]
        public virtual string UnitOfMeasure { get; set; }

        ///<summary>
        ///the ItemFormat of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the ItemFormat of the product.")]
        public virtual decimal ItemFormat { get; set; }

        ///<summary>
        ///the Brand of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Brand of the product.")]
        public virtual string Brand { get; set; }

        ///<summary>
        ///The weight UOM of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The weight UOM of the product.")]
        public virtual string ProductWeightUOM { get; set; }

        ///<summary>
        ///The weight of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The weight of the product.")]
        public virtual decimal? ProductWeight { get; set; }

        ///<summary>
        ///the PrimaryParentCategoryId of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the PrimaryParentCategoryId of the product.")]
        public virtual string PrimaryParentCategoryId { get; set; }

        ///<summary>
        ///True if the product has no price.
        ///</summary>
        [DataMember]
        [ApiMember(Description="True if the product has no price.")]
        public virtual bool IsProductWithoutPrice { get; set; }

        ///<summary>
        ///a value indicating whether the item allows selection without scan
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether the item allows selection without scan")]
        public virtual bool AllowSelectionWithoutScan { get; set; }
    }

    [DataContract]
    public partial class CartSummary
        : EntityBase<Guid>
    {
        public CartSummary()
        {
            ShipmentSummaries = new List<ShipmentSummary>{};
        }

        ///<summary>
        ///the list of shipment summaries.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of shipment summaries.")]
        public virtual List<ShipmentSummary> ShipmentSummaries { get; set; }

        ///<summary>
        ///the ID of the customer owning this cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the ID of the customer owning this cart.", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///the name of the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the cart.", IsRequired=true)]
        public virtual string Name { get; set; }

        ///<summary>
        ///the cart type, according to the CartType lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cart type, according to the CartType lookup.")]
        public virtual string CartType { get; set; }

        ///<summary>
        ///the cart source.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cart source.")]
        public virtual string Source { get; set; }

        ///<summary>
        ///the currency ISO code under which the items are sold 'Currency.IsoCode'.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the currency ISO code under which the items are sold 'Currency.IsoCode'.")]
        public virtual string BillingCurrency { get; set; }

        ///<summary>
        ///discount amount applied on the cart, independently from line item and shipping discounts.
        ///</summary>
        [DataMember]
        [ApiMember(Description="discount amount applied on the cart, independently from line item and shipping discounts.")]
        public virtual decimal? DiscountAmount { get; set; }

        ///<summary>
        ///the computed sum of all discounts applied to the cart (including order, line item and shipping level discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the computed sum of all discounts applied to the cart (including order, line item and shipping level discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? DiscountTotal { get; set; }

        ///<summary>
        ///the computed sum of all shipment amounts. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the computed sum of all shipment amounts. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? ShippingTotal { get; set; }

        ///<summary>
        ///the computed sum of all line items totals, including line item and order level discount. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the computed sum of all line items totals, including line item and order level discount. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? SubTotal { get; set; }

        ///<summary>
        ///the computed sum of all tax amount for the order. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the computed sum of all tax amount for the order. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? TaxTotal { get; set; }

        ///<summary>
        ///the total amount of all line items merchandise without discounts. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the total amount of all line items merchandise without discounts. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? MerchandiseTotal { get; set; }

        ///<summary>
        ///the grand total for the cart. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the grand total for the cart. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? Total { get; set; }

        ///<summary>
        ///discount amount applied on the cart, independently from line item and shipping discounts.
        ///</summary>
        [DataMember]
        [ApiMember(Description="discount amount applied on the cart, independently from line item and shipping discounts.")]
        public virtual decimal? AdditionalFeeTotal { get; set; }

        ///<summary>
        ///the scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the scope.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///Date the entity was created
        ///</summary>
        [DataMember]
        [ApiMember(Description="Date the entity was created")]
        public virtual DateTime Created { get; set; }
    }

    [DataContract]
    public partial class CountShipmentFulfillmentInfos
    {
        ///<summary>
        ///The number of shipments fulfillment information
        ///</summary>
        [DataMember(Name="Count")]
        [ApiMember(Description="The number of shipments fulfillment information")]
        public virtual int Count { get; set; }
    }

    [DataContract]
    public partial class CustomerSummary
    {
        ///<summary>
        ///the first name of the customer owning this cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the first name of the customer owning this cart.")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///Gets or set the last name of the customer owning this cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or set the last name of the customer owning this cart")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///Gets or set the middle name of the customer owning this cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or set the middle name of the customer owning this cart")]
        public virtual string MiddleName { get; set; }

        ///<summary>
        ///the email address of the customer owning this cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email address of the customer owning this cart.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///the phone number of the customer owning this cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the phone number of the customer owning this cart.")]
        public virtual string Phone { get; set; }

        ///<summary>
        ///the type of the customer owning this cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of the customer owning this cart.")]
        public virtual CustomerType Type { get; set; }
    }

    [DataContract]
    public partial class DayAvailability
    {
        public DayAvailability()
        {
            SlotInstances = new List<SlotInstance>{};
        }

        ///<summary>
        ///the date that the slot instances are for.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date that the slot instances are for.")]
        public virtual DateTime Date { get; set; }

        ///<summary>
        ///the slot instances.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the slot instances.")]
        public virtual List<SlotInstance> SlotInstances { get; set; }
    }

    [DataContract]
    public partial class DayAvailabilityResult
    {
        public DayAvailabilityResult()
        {
            ScheduleResults = new List<DayAvailability>{};
        }

        ///<summary>
        ///the date schedule availability
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date schedule availability")]
        public virtual List<DayAvailability> ScheduleResults { get; set; }
    }

    [DataContract]
    public partial class ExecutionMessage
    {
        ///<summary>
        ///The id of the message.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the message.")]
        public virtual string MessageId { get; set; }

        ///<summary>
        ///The message description. Used for describing the message with more information.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The message description. Used for describing the message with more information.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///The severity of the message.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The severity of the message.")]
        public virtual ExecutionMessageSeverity Severity { get; set; }

        ///<summary>
        ///The contextual data of the message
        ///</summary>
        [DataMember]
        [ApiMember(Description="The contextual data of the message")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public enum ExecutionMessageSeverity
    {
        Unspecified,
        Info,
        Warning,
        Error,
        Failure,
    }

    [DataContract]
    public partial class FindFulfillmentLocationsQueryResult
        : QueryResult<FulfillmentLocation>
    {
    }

    [DataContract]
    public partial class FulfillmentAvailability
    {
        ///<summary>
        ///Gets or sets a value whether fulfillment is available.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value whether fulfillment is available.")]
        public virtual bool? Status { get; set; }
    }

    [DataContract]
    public partial class FulfillmentLocation
    {
        public FulfillmentLocation()
        {
            AddressIds = new List<Guid>{};
            Addresses = new List<Address>{};
            Schedules = new List<FulfillmentSchedule>{};
        }

        ///<summary>
        ///The unique identifier of the fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the fulfillment location.", IsRequired=true)]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///Indicates if this is a physical or virtual location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if this is a physical or virtual location.")]
        public virtual LocationClass LocationClass { get; set; }

        ///<summary>
        ///The type of the fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the fulfillment location.")]
        public virtual FulfillmentLocationType Type { get; set; }

        ///<summary>
        ///the unique identifiers of the addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifiers of the addresses.")]
        public virtual List<Guid> AddressIds { get; set; }

        ///<summary>
        ///The fulfillment location's addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location's addresses.")]
        public virtual List<Address> Addresses { get; set; }

        ///<summary>
        ///The state of the fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The state of the fulfillment location")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The name of the fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the fulfillment location")]
        public virtual string Name { get; set; }

        ///<summary>
        ///A business centric number to identify the fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="A business centric number to identify the fulfillment location")]
        public virtual string Number { get; set; }

        ///<summary>
        ///The display name of the fulfillment location. This is a multilingual value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name of the fulfillment location. This is a multilingual value.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///Available types of fulfillment methods for the fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Available types of fulfillment methods for the fulfillment location.")]
        public virtual ICollection<FulfillmentMethodType> SupportedFulfillmentMethodTypes { get; set; }

        ///<summary>
        ///a value indicating whether this location supports pickup for transferred items, and at the same time doesn't allow pickup from inventory.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this location supports pickup for transferred items, and at the same time doesn't allow pickup from inventory.")]
        public virtual bool IsPickUpLocation { get; set; }

        ///<summary>
        ///a value indicating whether this location supports pickup both for transferred items and from inventory
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this location supports pickup both for transferred items and from inventory")]
        public virtual bool SupportPickUp { get; set; }

        ///<summary>
        ///a value indicating whether this store supports delivery for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this store supports delivery for order fulfillment.")]
        public virtual bool SupportDelivery { get; set; }

        ///<summary>
        ///a value indicating whether this store supports shipping for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this store supports shipping for order fulfillment.")]
        public virtual bool SupportShipping { get; set; }

        ///<summary>
        ///a value indicating whether this store supports ship to store for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this store supports ship to store for order fulfillment.")]
        public virtual bool SupportShipToStore { get; set; }

        ///<summary>
        ///The list of 'Schedule' of the fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of 'Schedule' of the fulfillment location.")]
        public virtual List<FulfillmentSchedule> Schedules { get; set; }

        ///<summary>
        ///the timezone in which the schedule hours were set.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the timezone in which the schedule hours were set.")]
        public virtual string TimeZone { get; set; }

        ///<summary>
        ///the date the Store/Warehouse was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the Store/Warehouse was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The date of the last modification to the fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date of the last modification to the fulfillment location.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the identifier of the user who created the fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the user who created the fulfillment location.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the identifier of the user who last modified the Store or Warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the user who last modified the Store or Warehouse.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///a value indicating whether this fulfillment location manage his own schedule for delivery
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this fulfillment location manage his own schedule for delivery")]
        public virtual bool DeliveryScheduleManaged { get; set; }

        ///<summary>
        ///a value indicating whether this fulfillment location manage his own schedule for pickup
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this fulfillment location manage his own schedule for pickup")]
        public virtual bool PickUpScheduleManaged { get; set; }

        ///<summary>
        ///a value indicating whether this fulfillment location has inventory enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this fulfillment location has inventory enabled")]
        public virtual bool IsInventoryEnabled { get; set; }

        ///<summary>
        ///the inventory location identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="the inventory location identifier")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///the inventory provider identifier to use for this fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="the inventory provider identifier to use for this fulfillment location")]
        public virtual string InventoryProviderId { get; set; }

        ///<summary>
        ///a value indicating whether inventory availability to promise is enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether inventory availability to promise is enabled")]
        public virtual bool IsAtpEnabled { get; set; }

        ///<summary>
        ///the delivery quote time
        ///</summary>
        [DataMember]
        [ApiMember(Description="the delivery quote time")]
        public virtual double DeliveryQuoteTime { get; set; }

        ///<summary>
        ///the delivery quote time scale
        ///</summary>
        [DataMember]
        [ApiMember(Description="the delivery quote time scale")]
        public virtual TimeScale DeliveryQuoteTimeScale { get; set; }

        ///<summary>
        ///the pickup quote time
        ///</summary>
        [DataMember]
        [ApiMember(Description="the pickup quote time")]
        public virtual double PickupQuoteTime { get; set; }

        ///<summary>
        ///the pickup quote time scale
        ///</summary>
        [DataMember]
        [ApiMember(Description="the pickup quote time scale")]
        public virtual TimeScale PickupQuoteTimeScale { get; set; }

        ///<summary>
        ///the fulfillment transition type  driven from FulfillmentTransitionType lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment transition type  driven from FulfillmentTransitionType lookup")]
        public virtual string FulfillmentTransitionType { get; set; }

        ///<summary>
        ///the fulfillment transition cut off time - only the time portion is considered
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment transition cut off time - only the time portion is considered")]
        public virtual DateTime FulfillmentTransitionCutOffTime { get; set; }

        ///<summary>
        ///the fulfillment transition lead time
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment transition lead time")]
        public virtual decimal FulfillmentTransitionLeadTime { get; set; }
    }

    [DataContract]
    public partial class FulfillmentLocationDelayCalculationResult
    {
        ///<summary>
        ///the fulfillment location id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment location id.", IsRequired=true)]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the start date and time for the delayin utc.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the start date and time for the delayin utc.", IsRequired=true)]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///the end date and time for the delay in utc.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the end date and time for the delay in utc.", IsRequired=true)]
        public virtual DateTime EndDate { get; set; }
    }

    [DataContract]
    public partial class FulfillmentLocationsDelayCalculationResult
    {
        public FulfillmentLocationsDelayCalculationResult()
        {
            Results = new List<FulfillmentLocationDelayCalculationResult>{};
        }

        ///<summary>
        ///Gets or sets a value whether fulfillment is available.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value whether fulfillment is available.")]
        public virtual List<FulfillmentLocationDelayCalculationResult> Results { get; set; }
    }

    [DataContract]
    public enum FulfillmentLocationType
    {
        Unspecified,
        Store,
        Warehouse,
    }

    [DataContract]
    public partial class FulfillmentMethod
        : EntityBase<Guid>
    {
        ///<summary>
        ///The name of the Fulfillment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the Fulfillment method.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The UI-friendly name for this shipping method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UI-friendly name for this shipping method.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The UI-friendly carrier display name for this shipping method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UI-friendly carrier display name for this shipping method.")]
        public virtual LocalizedString CarrierOptionDisplayName { get; set; }

        ///<summary>
        ///The carrier name for this shipping method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier name for this shipping method.")]
        public virtual string CarrierName { get; set; }

        ///<summary>
        ///The carrier service level for this shipping method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier service level for this shipping method.")]
        public virtual string CarrierServiceLevel { get; set; }

        ///<summary>
        ///The shipping provider unique id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipping provider unique id.")]
        public virtual Guid ShippingProviderId { get; set; }

        ///<summary>
        ///The date at which the delivery is expected.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date at which the delivery is expected.")]
        public virtual DateTime? ExpectedDeliveryDate { get; set; }

        ///<summary>
        ///The cost of this shipping for this cart/order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The cost of this shipping for this cart/order.")]
        public virtual double Cost { get; set; }

        ///<summary>
        ///The unique identifier of the shipment associated to this shipment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the shipment associated to this shipment method.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The FulfillmentMethodType to which the method belongs.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The FulfillmentMethodType to which the method belongs.")]
        public virtual FulfillmentMethodType FulfillmentMethodType { get; set; }

        ///<summary>
        ///The tax category to use for tax on shipping. This value value is read from the ShippingProvider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax category to use for tax on shipping. This value value is read from the ShippingProvider.")]
        public virtual string TaxCategory { get; set; }
    }

    [DataContract]
    public partial class FulfillmentMethodInfo
    {
        ///<summary>
        ///the name of the shipping method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the shipping method.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the UI-friendly name for this shipping method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the UI-friendly name for this shipping method.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///the shipping provider id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the shipping provider id.")]
        public virtual string ShippingProviderId { get; set; }

        ///<summary>
        ///The FulfillmentMethodType to which the method belongs
        ///</summary>
        [DataMember]
        [ApiMember(Description="The FulfillmentMethodType to which the method belongs")]
        public virtual FulfillmentMethodType FulfillmentMethodType { get; set; }
    }

    [DataContract]
    public enum FulfillmentMethodType
    {
        Unspecified,
        PickUp,
        Delivery,
        Shipping,
        ShipToStore,
    }

    [DataContract]
    public partial class FulfillmentOrder
    {
        public FulfillmentOrder()
        {
            FulfillmentShipments = new List<FulfillmentShipment>{};
        }

        ///<summary>
        ///The id of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the order.")]
        public virtual string Id { get; set; }

        ///<summary>
        ///The order number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order number.")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///The scope id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The customer id who made the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer id who made the order.")]
        public virtual string CustomerId { get; set; }

        ///<summary>
        ///The complete name of the customer who made the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The complete name of the customer who made the order.")]
        public virtual string CustomerName { get; set; }

        ///<summary>
        ///The total of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total of the order.")]
        public virtual decimal Total { get; set; }

        ///<summary>
        ///The currency ISO code under which the items are sold 'Currency.IsoCode'.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The currency ISO code under which the items are sold 'Currency.IsoCode'.")]
        public virtual string BillingCurrency { get; set; }

        ///<summary>
        ///The date when the order as created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date when the order as created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The list of fulfillment shipments for this order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of fulfillment shipments for this order.")]
        public virtual List<FulfillmentShipment> FulfillmentShipments { get; set; }
    }

    [DataContract]
    public partial class FulfillmentOrderQueryResult
        : QueryResult<FulfillmentOrder>
    {
    }

    [DataContract]
    public enum FulfillmentScheduleMode
    {
        Asap,
        Specified,
    }

    [DataContract]
    public partial class FulfillmentShipment
        : EntityBase<Guid>
    {
        public FulfillmentShipment()
        {
            SLAs = new List<OrderFulfillmentSLA>{};
            FulfillmentExceptions = new List<FulfillmentException>{};
            AllowedManualTransitions = new List<string>{};
        }

        ///<summary>
        ///The address to use as destination for the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The address to use as destination for the shipment.")]
        public virtual Address ShippingAddress { get; set; }

        ///<summary>
        ///The expected delivery date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expected delivery date.")]
        public virtual DateTime? ExpectedDeliveryDate { get; set; }

        ///<summary>
        ///The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.")]
        public virtual Guid? PickUpLocationId { get; set; }

        ///<summary>
        ///The fulfillment location id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location id.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The fulfillment provider id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment provider id.")]
        public virtual Guid ShippingProviderId { get; set; }

        ///<summary>
        ///The begin date and time scheduled for the fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The begin date and time scheduled for the fulfillment.")]
        public virtual DateTime? FulfillmentScheduledTimeBeginDate { get; set; }

        ///<summary>
        ///The end date and time scheduled for the fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date and time scheduled for the fulfillment.")]
        public virtual DateTime? FulfillmentScheduledTimeEndDate { get; set; }

        ///<summary>
        ///The execution result of the shipment processing.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The execution result of the shipment processing.")]
        public virtual ProcessingResult ExecutionResult { get; set; }

        ///<summary>
        ///The fulfillment SLAs.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment SLAs.")]
        public virtual List<OrderFulfillmentSLA> SLAs { get; set; }

        ///<summary>
        ///The fulfillment exceptions.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment exceptions.")]
        public virtual List<FulfillmentException> FulfillmentExceptions { get; set; }

        ///<summary>
        ///A value indicating whether the shipment is processing.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the shipment is processing.")]
        public virtual bool IsProcessing { get; set; }

        ///<summary>
        ///The Fulfillment Method Type that will be used to complete the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Fulfillment Method Type that will be used to complete the shipment.")]
        public virtual FulfillmentMethodType FulfillmentMethodType { get; set; }

        ///<summary>
        ///The current status of the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The current status of the shipment.")]
        public virtual string Status { get; set; }

        ///<summary>
        ///The name of the aggregated status when applicable.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the aggregated status when applicable.")]
        public virtual string AggregatedStatus { get; set; }

        ///<summary>
        ///The number of items in the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of items in the shipment.")]
        public virtual int NbItems { get; set; }

        ///<summary>
        ///The number of units in the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of units in the shipment.")]
        public virtual double NbUnits { get; set; }

        ///<summary>
        ///Date the shipment fullfillment was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Date the shipment fullfillment was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///Date that the last modification was applied to the shipment fullfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Date that the last modification was applied to the shipment fullfillment.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The shipment tracking number provided by the shipping provider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment tracking number provided by the shipping provider.")]
        public virtual string TrackingNumber { get; set; }

        ///<summary>
        ///The shipment return tracking number provided by the shipping provider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment return tracking number provided by the shipping provider.")]
        public virtual string ReturnTrackingNumber { get; set; }

        ///<summary>
        ///a list of allowed manual transitions from the shipment current status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of allowed manual transitions from the shipment current status.")]
        public virtual List<string> AllowedManualTransitions { get; set; }
    }

    [DataContract]
    public partial class GetFulfillmentLocationByIdElapsedTimeResult
    {
        ///<summary>
        ///The elapsed seconds for store opening times.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The elapsed seconds for store opening times.", IsRequired=true)]
        public virtual int ElapsedSeconds { get; set; }
    }

    [DataContract]
    public partial class GetPaymentHistoryQueryResult
        : QueryResult<PaymentHistory>
    {
    }

    public partial interface IFulfillmentLocationParent
    {
        OperatingStatus OperatingStatus { get; set; }
    }

    public partial interface ILineItemInfo
    {
        ///<summary>
        ///The unique identifier of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product.", IsRequired=true)]
        string ProductId { get; set; }

        ///<summary>
        ///The unique identifier of the product variant, if there is one.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product variant, if there is one.")]
        string VariantId { get; set; }

        ///<summary>
        ///if the product is to be gift-wrapped, a message to be written on it.
        ///</summary>
        [DataMember]
        [ApiMember(Description="if the product is to be gift-wrapped, a message to be written on it.")]
        string GiftMessage { get; set; }

        ///<summary>
        ///whether or not the item will wrapped in a gift presentation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether or not the item will wrapped in a gift presentation.")]
        bool GiftWrap { get; set; }

        ///<summary>
        ///The number of items bought for this Product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of items bought for this Product.", IsRequired=true)]
        double Quantity { get; set; }

        ///<summary>
        ///Gets or sets the placed price of the line item at the moment the cart was submitted either on order creation or order modification. This value is set automatically by the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the placed price of the line item at the moment the cart was submitted either on order creation or order modification. This value is set automatically by the system.")]
        decimal? PlacedPrice { get; set; }

        ///<summary>
        ///The property bag containing extended/custom properties for this request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended/custom properties for this request.")]
        PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The unique identifier of the LineItem to create.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the LineItem to create.")]
        Guid Id { get; set; }
    }

    [DataContract]
    public partial class LineItem
        : LineItemInfo, ILineItemInfo
    {
        public LineItem()
        {
            Rewards = new List<Reward>{};
            AdditionalFees = new List<LineItemAdditionalFee>{};
        }

        ///<summary>
        ///The unique identifier of the catalog where the product belongs.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the catalog where the product belongs.", IsRequired=true)]
        public virtual string CatalogId { get; set; }

        ///<summary>
        ///the summary of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the summary of the product.")]
        public virtual CartProductSummary ProductSummary { get; set; }

        ///<summary>
        ///The placed quantity of product to purchase at the moment the cart was submitted either on order creation or order modification. This value is set automatically by the system. A decimal number can be used for products sold with a unit of measure (pounds, kilos, etc.).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The placed quantity of product to purchase at the moment the cart was submitted either on order creation or order modification. This value is set automatically by the system. A decimal number can be used for products sold with a unit of measure (pounds, kilos, etc.).")]
        public virtual double PlacedQuantity { get; set; }

        ///<summary>
        ///The pricing summary of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The pricing summary of the product.")]
        public virtual PricingCalculationSummary PricingCalculationSummary { get; set; }

        ///<summary>
        ///The price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.")]
        public virtual decimal? ListPrice { get; set; }

        ///<summary>
        ///The price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.")]
        public virtual decimal? CurrentPrice { get; set; }

        ///<summary>
        ///The default price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.")]
        public virtual decimal? DefaultListPrice { get; set; }

        ///<summary>
        ///The current regular price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The current regular price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.")]
        public virtual decimal? RegularPrice { get; set; }

        ///<summary>
        ///The default price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.")]
        public virtual decimal? DefaultPrice { get; set; }

        ///<summary>
        ///The unique identifier of the shipment to use for this item. The shipment reference must be available within the same cart or order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the shipment to use for this item. The shipment reference must be available within the same cart or order.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The amount for all discounts applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount for all discounts applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? DiscountAmount { get; set; }

        ///<summary>
        ///The total amount for this line item, including discounts (list price * quantity - discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total amount for this line item, including discounts (list price * quantity - discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? Total { get; set; }

        ///<summary>
        ///The LineItem status, according to the LineItemStatus lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The LineItem status, according to the LineItemStatus lookup.")]
        public virtual string Status { get; set; }

        ///<summary>
        ///The LineItem inventory reservation status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The LineItem inventory reservation status.")]
        public virtual ReservationStatus? ReservationStatus { get; set; }

        ///<summary>
        ///The LineItem Sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="The LineItem Sku")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The total amount for this line item, including discounts (list price * quantity - discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total amount for this line item, including discounts (list price * quantity - discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal TotalWithoutDiscount { get; set; }

        ///<summary>
        ///The collection of RewardDefinitions to apply on this line item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of RewardDefinitions to apply on this line item.")]
        public virtual List<Reward> Rewards { get; set; }

        ///<summary>
        ///The collection of additional fees to apply on this line item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of additional fees to apply on this line item.")]
        public virtual List<LineItemAdditionalFee> AdditionalFees { get; set; }

        ///<summary>
        ///The amount for all line item additional fees applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount for all line item additional fees applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? AdditionalFeeAmount { get; set; }

        ///<summary>
        ///the product definition name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the product definition name.")]
        public virtual string ProductDefinitionName { get; set; }

        ///<summary>
        ///the key value attributes values.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the key value attributes values.")]
        public virtual PropertyBag KvaValues { get; set; }

        ///<summary>
        ///item is a gift
        ///</summary>
        [DataMember]
        [ApiMember(Description="item is a gift")]
        public virtual bool IsGiftItem { get; set; }

        ///<summary>
        ///the key value attributes display values.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the key value attributes display values.")]
        public virtual PropertyBag KvaDisplayValues { get; set; }
    }

    [DataContract]
    public partial class LineItemAdditionalFee
    {
        ///<summary>
        ///The unique identifier of the additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the additional fee.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The name of the additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the additional fee.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The display name of the additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name of the additional fee.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description of the additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the additional fee.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The amount of the additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount of the additional fee.")]
        public virtual decimal Amount { get; set; }

        ///<summary>
        ///Indicates whether additional fee is taxable or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether additional fee is taxable or not.")]
        public virtual bool Taxable { get; set; }

        ///<summary>
        ///The tax category of the line item additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax category of the line item additional fee.")]
        public virtual string TaxCategory { get; set; }

        ///<summary>
        ///The calculation of the additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The calculation of the additional fee.")]
        public virtual AdditionalFeeCalculationRule CalculationRule { get; set; }
    }

    [DataContract]
    public partial class LineItemInfo
        : EntityBase<Guid>
    {
        ///<summary>
        ///The unique identifier of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product.", IsRequired=true)]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The unique identifier of the product variant, if there is one.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product variant, if there is one.")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///if the product is to be gift-wrapped, a message to be written on it.
        ///</summary>
        [DataMember]
        [ApiMember(Description="if the product is to be gift-wrapped, a message to be written on it.")]
        public virtual string GiftMessage { get; set; }

        ///<summary>
        ///whether or not the item will wrapped in a gift presentation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether or not the item will wrapped in a gift presentation.")]
        public virtual bool GiftWrap { get; set; }

        ///<summary>
        ///The number of items bought for this Product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of items bought for this Product.", IsRequired=true)]
        public virtual double Quantity { get; set; }

        ///<summary>
        ///Gets or sets the placed price of the line item at the moment the cart was submitted either on order creation or order modification. This value is set automatically by the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the placed price of the line item at the moment the cart was submitted either on order creation or order modification. This value is set automatically by the system.")]
        public virtual decimal? PlacedPrice { get; set; }

        ///<summary>
        ///the name of the recurring order program.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the recurring order program.")]
        public virtual string RecurringOrderProgramName { get; set; }

        ///<summary>
        ///the name of the recurring order program frequency.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the recurring order program frequency.")]
        public virtual string RecurringOrderFrequencyName { get; set; }

        ///<summary>
        ///the id of the recurring line item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the recurring line item.")]
        public virtual Guid? RecurringOrderLineItemId { get; set; }
    }

    [DataContract]
    public partial class LineItemSummary
        : EntityBase<Guid>
    {
        ///<summary>
        ///The unique identifier of the catalog where the product belongs.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the catalog where the product belongs.", IsRequired=true)]
        public virtual string CatalogId { get; set; }

        ///<summary>
        ///The unique identifier of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product", IsRequired=true)]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The unique identifier of the product variant if the purchased product is a variant
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product variant if the purchased product is a variant")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///The UI-friendly display name for the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UI-friendly display name for the product.")]
        public virtual string ProductDisplayName { get; set; }

        ///<summary>
        ///The quantity of product to purchase. A decimal number can be used for products sold with a unit of measure (pounds, kilos, etc.).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantity of product to purchase. A decimal number can be used for products sold with a unit of measure (pounds, kilos, etc.).")]
        public virtual double Quantity { get; set; }

        ///<summary>
        ///The price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.")]
        public virtual decimal? CurrentPrice { get; set; }

        ///<summary>
        ///The type of the current price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the current price")]
        public virtual string CurrentPricePriceListType { get; set; }

        ///<summary>
        ///The id of the current price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the current price")]
        public virtual string CurrentPricePriceListId { get; set; }

        ///<summary>
        ///The category of the current price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category of the current price")]
        public virtual string CurrentPricePriceListCategory { get; set; }

        ///<summary>
        ///The current regular price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The current regular price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.")]
        public virtual decimal? RegularPrice { get; set; }

        ///<summary>
        ///The id of the regular price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the regular price")]
        public virtual string RegularPricePriceListId { get; set; }

        ///<summary>
        ///The category of the regular price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category of the regular price")]
        public virtual string RegularPricePriceListCategory { get; set; }

        ///<summary>
        ///The price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.")]
        public virtual decimal? ListPrice { get; set; }

        ///<summary>
        ///The amount for all discounts applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount for all discounts applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? DiscountAmount { get; set; }

        ///<summary>
        ///The amount for all discounts applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount for all discounts applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? AdditionalFeeAmount { get; set; }

        ///<summary>
        ///The total amount for this line item, including discounts (list price * quantity - discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total amount for this line item, including discounts (list price * quantity - discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? Total { get; set; }

        ///<summary>
        ///The unique identifier of the shipment to use for this item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the shipment to use for this item")]
        public virtual string ShipmentId { get; set; }

        ///<summary>
        ///The LineItem Sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="The LineItem Sku")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///the UnitOfMeasure of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the UnitOfMeasure of the product.")]
        public virtual string UnitOfMeasure { get; set; }

        ///<summary>
        ///the ItemFormat of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the ItemFormat of the product.")]
        public virtual decimal? ItemFormat { get; set; }

        [DataMember]
        public virtual string RecurringOrderProgramName { get; set; }

        [DataMember]
        public virtual string RecurringOrderFrequencyName { get; set; }

        [DataMember]
        public virtual Guid? RecurringOrderLineItemId { get; set; }

        [DataMember]
        public virtual string Status { get; set; }
    }

    [DataContract]
    public partial class Order
    {
        ///<summary>
        ///the id of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the order.")]
        public virtual string Id { get; set; }

        ///<summary>
        ///the order status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order status.")]
        public virtual string OrderStatus { get; set; }

        ///<summary>
        ///the source of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the source of the order.")]
        public virtual string Source { get; set; }

        ///<summary>
        ///the version of the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the version of the entity.")]
        public virtual string EntityVersion { get; set; }

        ///<summary>
        ///the date when the order as created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date when the order as created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the user id of the user that created the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the user id of the user that created the order.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the date when the order was last modified.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date when the order was last modified.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the user id of the user that last modified the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the user id of the user that last modified the order.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///the order number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order number.")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///the transaction order number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the transaction order number.")]
        public virtual int TransactionOrderNumber { get; set; }

        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the line item count.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the line item count.")]
        public virtual int ItemCount { get; set; }

        ///<summary>
        ///the customer id who made the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the customer id who made the order.")]
        public virtual string CustomerId { get; set; }

        ///<summary>
        ///the complete name of the customer who made the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the complete name of the customer who made the order.")]
        public virtual string CustomerName { get; set; }

        ///<summary>
        ///the cart to be used to create this order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cart to be used to create this order.")]
        public virtual Cart Cart { get; set; }
    }

    [DataContract]
    public partial class OrderedProductInfo
    {
        ///<summary>
        ///The item's Sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="The item's Sku")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The unique identifier for the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the product")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The unique identifier of the product variant, if exists
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product variant, if exists")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///The number of times a customer ordered any amount of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of times a customer ordered any amount of the product")]
        public virtual int OrderedNumberOfTimes { get; set; }
    }

    [DataContract]
    public partial class OrderHistoryItem
    {
        ///<summary>
        ///The id of the item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the item.")]
        public virtual string Id { get; set; }

        ///<summary>
        ///The date this item was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date this item was created.")]
        public virtual DateTime CreatedDate { get; set; }

        ///<summary>
        ///The user that created the item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The user that created the item.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///The oder number related to this item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The oder number related to this item.")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///The category of this history item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category of this history item.")]
        public virtual string Category { get; set; }

        ///<summary>
        ///The entity id related to this history item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The entity id related to this history item.")]
        public virtual string EntityId { get; set; }

        ///<summary>
        ///The shipment id related to this item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment id related to this item.")]
        public virtual string ShipmentId { get; set; }

        ///<summary>
        ///The fulfillment location id related to this item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location id related to this item.")]
        public virtual string FulfillmentLocationId { get; set; }

        ///<summary>
        ///The comment associated to this history item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The comment associated to this history item.")]
        public virtual string Comment { get; set; }

        ///<summary>
        ///The old value related to this history change.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The old value related to this history change.")]
        public virtual string OldValue { get; set; }

        ///<summary>
        ///The new value related to this history change.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The new value related to this history change.")]
        public virtual string NewValue { get; set; }

        ///<summary>
        ///The reason selected for this history change.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reason selected for this history change.")]
        public virtual string Reason { get; set; }

        ///<summary>
        ///Dictionary containing custom data for this item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Dictionary containing custom data for this item.")]
        public virtual PropertyBag CustomData { get; set; }
    }

    [DataContract]
    public partial class OrderItem
    {
        public OrderItem()
        {
            ShipmentItems = new List<ShipmentItem>{};
            ValidationResults = new List<ValidationResult>{};
            Messages = new List<ExecutionMessage>{};
        }

        ///<summary>
        ///The id of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the order.")]
        public virtual string Id { get; set; }

        ///<summary>
        ///The order status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order status.")]
        public virtual string OrderStatus { get; set; }

        ///<summary>
        ///The date when the order as created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date when the order as created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The order number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order number.")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///The scope id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The customer id who made the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer id who made the order.")]
        public virtual string CustomerId { get; set; }

        ///<summary>
        ///The complete name of the customer who made the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The complete name of the customer who made the order.")]
        public virtual string CustomerName { get; set; }

        ///<summary>
        ///The email of customer who made the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The email of customer who made the order.")]
        public virtual string CustomerEmail { get; set; }

        ///<summary>
        ///The total of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total of the order.")]
        public virtual decimal Total { get; set; }

        ///<summary>
        ///The currency ISO code under which the items are sold 'Currency.IsoCode'.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The currency ISO code under which the items are sold 'Currency.IsoCode'.")]
        public virtual string BillingCurrency { get; set; }

        ///<summary>
        ///The list of shipments for this order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of shipments for this order.")]
        public virtual List<ShipmentItem> ShipmentItems { get; set; }

        ///<summary>
        ///execution result of the order post processing.
        ///</summary>
        [DataMember]
        [ApiMember(Description="execution result of the order post processing.")]
        public virtual ProcessingResult PostProcessingExecutionResult { get; set; }

        ///<summary>
        ///The validation results when the order was post processed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The validation results when the order was post processed.")]
        public virtual List<ValidationResult> ValidationResults { get; set; }

        ///<summary>
        ///The execution messages when the order was post processed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The execution messages when the order was post processed.")]
        public virtual List<ExecutionMessage> Messages { get; set; }

        ///<summary>
        ///The source of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The source of the order.")]
        public virtual string Source { get; set; }

        ///<summary>
        ///The property bag of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag of the order.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class OrderLocationSummary
    {
        ///<summary>
        ///Get or set the name of the order location that will process the cart and to which the order is associated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Get or set the name of the order location that will process the cart and to which the order is associated.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///Get or set the sytem wide unique number of the order location that will process the cart and to which the order is associated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Get or set the sytem wide unique number of the order location that will process the cart and to which the order is associated.")]
        public virtual string Number { get; set; }

        ///<summary>
        ///Get or set the email of the order location that will process the cart and to which the order is associated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Get or set the email of the order location that will process the cart and to which the order is associated.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///Get or set TimeZone email of the order location that will process the cart and to which the order is associated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Get or set TimeZone email of the order location that will process the cart and to which the order is associated.")]
        public virtual string TimeZone { get; set; }
    }

    [DataContract]
    public partial class OrderLockInfo
    {
        ///<summary>
        ///the id of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the order.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the order status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order status.")]
        public virtual Guid ShipmentId { get; set; }
    }

    [DataContract]
    public partial class OrderQueryResult
        : QueryResult<OrderItem>
    {
    }

    [DataContract]
    public partial class OrderSettings
    {
        ///<summary>
        ///determine if the changes made to an order will be audited
        ///</summary>
        [DataMember]
        [ApiMember(Description="determine if the changes made to an order will be audited")]
        public virtual bool IsOrderAuditEnabled { get; set; }

        ///<summary>
        ///whether order processing is enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether order processing is enabled")]
        public virtual bool IsFulfillmentProcessingEnabled { get; set; }

        ///<summary>
        ///whether order edition is enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether order edition is enabled")]
        public virtual bool IsOrderEditionEnabled { get; set; }

        ///<summary>
        ///the cart expiration days
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cart expiration days")]
        public virtual int CartExpirationDays { get; set; }

        ///<summary>
        ///the default total workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the default total workflow")]
        public virtual string DefaultCartTotalWorkflow { get; set; }

        ///<summary>
        ///the default checkout workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the default checkout workflow")]
        public virtual string DefaultCartCheckoutWorkflow { get; set; }

        ///<summary>
        ///the default checkout workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the default checkout workflow")]
        public virtual string DefaultOrderProcessingWorkflow { get; set; }

        ///<summary>
        ///the default checkout workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the default checkout workflow")]
        public virtual string DefaultOrderTotalWorkflow { get; set; }

        ///<summary>
        ///the default submit order workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the default submit order workflow")]
        public virtual string DefaultSubmitOrderWorkflow { get; set; }

        ///<summary>
        ///the order post processing workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order post processing workflow")]
        public virtual string OrderPostProcessingWorkflow { get; set; }

        ///<summary>
        ///the order canceled workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order canceled workflow")]
        public virtual string OrderCanceledWorkflow { get; set; }

        ///<summary>
        ///the order value maximum filter
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order value maximum filter")]
        public virtual int OrderValueMaximumFilter { get; set; }

        ///<summary>
        ///the customer search is limited to the current and child scopes only
        ///</summary>
        [DataMember]
        [ApiMember(Description="the customer search is limited to the current and child scopes only")]
        public virtual bool LimitCustomerSearchToCurrentAndChildScopes { get; set; }

        ///<summary>
        ///allows the final total of a shipment to be modified
        ///</summary>
        [DataMember]
        [ApiMember(Description="allows the final total of a shipment to be modified")]
        public virtual bool AllowManualAdjustmentsOfShipmentTotal { get; set; }

        ///<summary>
        ///store picker default tab in the new order wizard
        ///</summary>
        [DataMember]
        [ApiMember(Description="store picker default tab in the new order wizard")]
        public virtual string StorePickerDefaultTab { get; set; }

        ///<summary>
        ///the list of inventory statuses available to order
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of inventory statuses available to order")]
        public virtual string OrderableInventoryStatuses { get; set; }

        ///<summary>
        ///a value indicating whether in store picking is allowed
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether in store picking is allowed")]
        public virtual bool IsInStorePickingAllowed { get; set; }

        ///<summary>
        ///the default checkout workflow for recurring orders
        ///</summary>
        [DataMember]
        [ApiMember(Description="the default checkout workflow for recurring orders")]
        public virtual string DefaultRecurringOrderCartCheckoutWorkflow { get; set; }

        ///<summary>
        ///the recurring order creation error email address
        ///</summary>
        [DataMember]
        [ApiMember(Description="the recurring order creation error email address")]
        public virtual string RecurringOrderCreationErrorEmailAddress { get; set; }

        ///<summary>
        ///the regular expression used to validate tracking numbers
        ///</summary>
        [DataMember]
        [ApiMember(Description="the regular expression used to validate tracking numbers")]
        public virtual string TrackingNumberValidationRegExp { get; set; }

        ///<summary>
        ///the property bag containing extended properties for this command
        ///</summary>
        [DataMember]
        [ApiMember(Description="the property bag containing extended properties for this command")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///the editable shipment states
        ///</summary>
        [DataMember]
        [ApiMember(Description="the editable shipment states")]
        public virtual string EditableShipmentStates { get; set; }
    }

    [DataContract]
    public partial class Payment
        : EntityBase<Guid>
    {
        ///<summary>
        ///The billing address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The billing address.")]
        public virtual Address BillingAddress { get; set; }

        ///<summary>
        ///The payment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment method.")]
        public virtual PaymentMethod PaymentMethod { get; set; }

        ///<summary>
        ///The amount of this payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount of this payment.")]
        public virtual decimal Amount { get; set; }

        ///<summary>
        ///The unique identifier of the billing address to use for this payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the billing address to use for this payment.")]
        public virtual Guid BillingAddressId { get; set; }

        ///<summary>
        ///The status of the payment. Typical values will include: Outstanding, Verified, Authorized, Paid
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status of the payment. Typical values will include: Outstanding, Verified, Authorized, Paid")]
        public virtual string PaymentStatus { get; set; }

        ///<summary>
        ///the date when the payment was made.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date when the payment was made.")]
        public virtual DateTime? PaymentDate { get; set; }

        ///<summary>
        ///The creation date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The creation date.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The identity of the user who created the payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identity of the user who created the payment.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The last modification date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The last modification date.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The identity of the user who modified the payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identity of the user who modified the payment.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///the payment capture action
        ///</summary>
        [DataMember]
        [ApiMember(Description="the payment capture action")]
        public virtual PaymentCaptureAction PaymentCaptureAction { get; set; }
    }

    [DataContract]
    public partial class PaymentCaptureAction
    {
        ///<summary>
        ///The url to capture the payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The url to capture the payment.")]
        public virtual string PaymentCaptureUrl { get; set; }

        ///<summary>
        ///The window mode.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The window mode.")]
        public virtual PaymentCaptureAction.WindowModeEnum WindowMode { get; set; }

        public enum WindowModeEnum
        {
            Overlay,
        }
    }

    [DataContract]
    public partial class PaymentHistory
    {
        ///<summary>
        ///The id of the item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the item.")]
        public virtual string Id { get; set; }

        ///<summary>
        ///The date this item was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date this item was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The user that created the item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The user that created the item.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The order Id related to this item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order Id related to this item.")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///The internal order number related to this item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The internal order number related to this item.")]
        public virtual string TransactionOrderNumber { get; set; }

        ///<summary>
        ///The category of this history item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category of this history item.")]
        public virtual string Category { get; set; }

        ///<summary>
        ///The entity id related to this history item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The entity id related to this history item.")]
        public virtual string Subcategory { get; set; }

        [DataMember]
        public virtual string PaymentId { get; set; }

        ///<summary>
        ///The comment associated to this payment history.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The comment associated to this payment history.")]
        public virtual string Comment { get; set; }

        ///<summary>
        ///The transaction id of this payment history.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The transaction id of this payment history.")]
        public virtual string TransactionId { get; set; }

        ///<summary>
        ///The transaction date of this payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The transaction date of this payment.")]
        public virtual DateTime TransactionDate { get; set; }

        ///<summary>
        ///The amount of this payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount of this payment.")]
        public virtual decimal Amount { get; set; }

        ///<summary>
        ///Dictionary containing data for this item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Dictionary containing data for this item.")]
        public virtual PropertyBag Data { get; set; }

        ///<summary>
        ///The transaction status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The transaction status.")]
        public virtual string TransactionStatus { get; set; }
    }

    [DataContract]
    public partial class PaymentMethod
    {
        ///<summary>
        ///The unique identifier for this payment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for this payment method.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The UI-friendly name of the payment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UI-friendly name of the payment method.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///Whether this payment method is currently enabled and can be used.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether this payment method is currently enabled and can be used.")]
        public virtual bool Enabled { get; set; }

        ///<summary>
        ///The PaymentMethodType that is associated with this payment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The PaymentMethodType that is associated with this payment method.")]
        public virtual PaymentMethodType Type { get; set; }

        ///<summary>
        ///The name of the associated payment provider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the associated payment provider.")]
        public virtual string PaymentProviderName { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this object.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this object.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///Whether this payment method is used when none are specified
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether this payment method is used when none are specified")]
        public virtual bool Default { get; set; }
    }

    [DataContract]
    public enum PaymentMethodType
    {
        CreditCard,
        SavedCreditCard,
        GiftCertificate,
        PurchaseOrder,
        CashCard,
        Cash,
        Debit,
        OnSiteCredit,
        OnSiteDebit,
        Cheque,
        OnSiteUnspecified,
        Paypal,
    }

    [DataContract]
    public partial class PricingCalculationSummary
    {
        ///<summary>
        ///The type of the current price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the current price")]
        public virtual string CurrentPricePriceListType { get; set; }

        ///<summary>
        ///The id of the current price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the current price")]
        public virtual string CurrentPricePriceListId { get; set; }

        ///<summary>
        ///The category of the current price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category of the current price")]
        public virtual string CurrentPricePriceListCategory { get; set; }

        ///<summary>
        ///The id of the regular price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the regular price")]
        public virtual string RegularPricePriceListId { get; set; }

        ///<summary>
        ///The category of the regular price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category of the regular price")]
        public virtual string RegularPricePriceListCategory { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class ProcessedCart
        : Cart
    {
        public ProcessedCart()
        {
            Messages = new List<ExecutionMessage>{};
            ValidationResults = new List<ValidationResult>{};
        }

        ///<summary>
        ///A list of execution messages which provides information about the result of an operation or of an activity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of execution messages which provides information about the result of an operation or of an activity.")]
        public virtual List<ExecutionMessage> Messages { get; set; }

        ///<summary>
        ///A list of validation results which represent the result of one or more validations being performed on an entity during workflow executions for example.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of validation results which represent the result of one or more validations being performed on an entity during workflow executions for example.")]
        public virtual List<ValidationResult> ValidationResults { get; set; }
    }

    [DataContract]
    public partial class PromotionVersion
    {
        ///<summary>
        ///The campaign Id which the promotion belongs.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The campaign Id which the promotion belongs.")]
        public virtual string CampaignId { get; set; }

        ///<summary>
        ///the promotion Identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the promotion Identifier.")]
        public virtual string PromotionId { get; set; }

        ///<summary>
        ///The version number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The version number.")]
        public virtual int VersionNumber { get; set; }
    }

    [DataContract]
    public partial class Reward
        : EntityBase<Guid>
    {
        ///<summary>
        ///The unique identifier of the promotion giving this reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the promotion giving this reward.")]
        public virtual Guid PromotionId { get; set; }

        ///<summary>
        ///The version number of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The version number of the promotion.")]
        public virtual int PromotionVersion { get; set; }

        ///<summary>
        ///The id of the campaign of the promotion giving this reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the campaign of the promotion giving this reward.")]
        public virtual Guid CampaignId { get; set; }

        ///<summary>
        ///The description of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the promotion.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The level of effectivity of this reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The level of effectivity of this reward.")]
        public virtual RewardLevel Level { get; set; }

        ///<summary>
        ///The type of reward. (e.g: Discount or External)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of reward. (e.g: Discount or External)")]
        public virtual RewardType RewardType { get; set; }

        ///<summary>
        ///The relative object Id (LineItem.Id or Shipment.Id) depending of the Reward.Level.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The relative object Id (LineItem.Id or Shipment.Id) depending of the Reward.Level.")]
        public virtual Guid RelatedObjectId { get; set; }

        ///<summary>
        ///The fixed amount for this reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fixed amount for this reward.")]
        public virtual decimal Amount { get; set; }

        ///<summary>
        ///The name of the campaign of the promotion giving this reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the campaign of the promotion giving this reward.")]
        public virtual string CampaignName { get; set; }

        ///<summary>
        ///The promotion name for this reward.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The promotion name for this reward.")]
        public virtual string PromotionName { get; set; }
    }

    [DataContract]
    public enum RewardLevel
    {
        LineItem,
        Shipment,
        FulfillmentMethod,
        None,
    }

    [DataContract]
    public partial class SetFulfillmentLocationInventoryManagementResult
    {
        ///<summary>
        ///a value indicating whether the operation was completed successfully.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether the operation was completed successfully.")]
        public virtual bool IsSuccess { get; set; }

        ///<summary>
        ///the number of the fulfillment location using the specfied inventory location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number of the fulfillment location using the specfied inventory location identifier.")]
        public virtual string AlreadyUsedNumber { get; set; }

        ///<summary>
        ///the name of the fulfillment location using the specfied inventory location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the fulfillment location using the specfied inventory location identifier.")]
        public virtual string AlreadyUsedName { get; set; }
    }

    [DataContract]
    public partial class Shipment
        : EntityBase<Guid>
    {
        public Shipment()
        {
            LineItems = new List<LineItem>{};
            Rewards = new List<Reward>{};
            Taxes = new List<Tax>{};
            AdditionalFees = new List<ShipmentAdditionalFee>{};
        }

        ///<summary>
        ///The Fulfillment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Fulfillment method.")]
        public virtual FulfillmentMethod FulfillmentMethod { get; set; }

        ///<summary>
        ///The address to use as destination for the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The address to use as destination for the shipment.")]
        public virtual Address Address { get; set; }

        ///<summary>
        ///The shipment tracking number provided by the shipping provider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment tracking number provided by the shipping provider.")]
        public virtual string TrackingNumber { get; set; }

        ///<summary>
        ///The shipment return tracking number provided by the shipping provider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment return tracking number provided by the shipping provider.")]
        public virtual string ReturnTrackingNumber { get; set; }

        ///<summary>
        ///The shipment status, according to the Shipping Status lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment status, according to the Shipping Status lookup.")]
        public virtual string Status { get; set; }

        ///<summary>
        ///The amount to pay for the shipment. The amount is usually set using the shipping method during the workflow execution.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount to pay for the shipment. The amount is usually set using the shipping method during the workflow execution.")]
        public virtual decimal? Amount { get; set; }

        ///<summary>
        ///The discount amount to apply on the shipment. The sum of all applicable discounts, usually calculated during the workflow execution.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The discount amount to apply on the shipment. The sum of all applicable discounts, usually calculated during the workflow execution.")]
        public virtual decimal? DiscountAmount { get; set; }

        ///<summary>
        ///The total amount for the shipment, including discounts.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total amount for the shipment, including discounts.")]
        public virtual decimal? Total { get; set; }

        ///<summary>
        ///The expected delivery date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expected delivery date.")]
        public virtual DateTime? ExpectedDeliveryDate { get; set; }

        ///<summary>
        ///The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.")]
        public virtual Guid? PickUpLocationId { get; set; }

        ///<summary>
        ///The fulfillment location id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location id.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The fulfillment location type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location type.")]
        public virtual FulfillmentLocationType FulfillmentLocationType { get; set; }

        ///<summary>
        ///The fulfillment schedule mode.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment schedule mode.")]
        public virtual FulfillmentScheduleMode FulfillmentScheduleMode { get; set; }

        ///<summary>
        ///The begin date and time scheduled for the fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The begin date and time scheduled for the fulfillment.")]
        public virtual DateTime? FulfillmentScheduledTimeBeginDate { get; set; }

        ///<summary>
        ///The end date and time scheduled for the fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date and time scheduled for the fulfillment.")]
        public virtual DateTime? FulfillmentScheduledTimeEndDate { get; set; }

        ///<summary>
        ///The last assigned date for the fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The last assigned date for the fulfillment.")]
        public virtual DateTime? FulfillmentLastAssignedDate { get; set; }

        ///<summary>
        ///the reservation number for the scheduled fulfillment date and time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the reservation number for the scheduled fulfillment date and time.")]
        public virtual string FulfillmentScheduleReservationNumber { get; set; }

        ///<summary>
        ///the date the fulfillment reservation was done.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the fulfillment reservation was done.")]
        public virtual DateTime? FulfillmentScheduleReservationDate { get; set; }

        ///<summary>
        ///The shipment adjustment amount.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment adjustment amount.")]
        public virtual decimal? AdjustmentAmount { get; set; }

        ///<summary>
        ///The shipment adjustment note.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment adjustment note.")]
        public virtual string AdjustmentNote { get; set; }

        ///<summary>
        ///The collection of items included in the order. A line item represents a product and its quantity that the customer places in the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of items included in the order. A line item represents a product and its quantity that the customer places in the cart.")]
        public virtual List<LineItem> LineItems { get; set; }

        ///<summary>
        ///The collection of rewards to apply on this shipment. The collection is usually filled during the workflow execution.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of rewards to apply on this shipment. The collection is usually filled during the workflow execution.")]
        public virtual List<Reward> Rewards { get; set; }

        ///<summary>
        ///The id of the tax provider that will be used to calculate taxes on this shipment line items. The provider is usually used during the workflow execution, in the CalculateTaxes activity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the tax provider that will be used to calculate taxes on this shipment line items. The provider is usually used during the workflow execution, in the CalculateTaxes activity.")]
        public virtual Guid TaxProviderId { get; set; }

        ///<summary>
        ///The collection of taxes to apply on this shipment line items. The collection is usually filled during the workflow execution.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of taxes to apply on this shipment line items. The collection is usually filled during the workflow execution.")]
        public virtual List<Tax> Taxes { get; set; }

        ///<summary>
        ///the total of all taxes to apply on the shipment. The sum of all applicable taxes, usually calculated during the workflow execution.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the total of all taxes to apply on the shipment. The sum of all applicable taxes, usually calculated during the workflow execution.")]
        public virtual decimal? TaxTotal { get; set; }

        ///<summary>
        ///The collection of additional fees to apply on this line item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of additional fees to apply on this line item.")]
        public virtual List<ShipmentAdditionalFee> AdditionalFees { get; set; }

        ///<summary>
        ///The amount for all shipment additional fees applied to this shipment. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount for all shipment additional fees applied to this shipment. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.")]
        public virtual decimal? AdditionalFeeAmount { get; set; }

        ///<summary>
        ///the date the shipment is processed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the shipment is processed.")]
        public virtual DateTime ProcessingDate { get; set; }

        ///<summary>
        ///the date when the order as created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date when the order as created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the user id of the user that created the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the user id of the user that created the shipment.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the date when the shipment was last modified.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date when the shipment was last modified.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the user id of the user that last modified the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the user id of the user that last modified the shipment.")]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract]
    public partial class ShipmentAdditionalFee
    {
        ///<summary>
        ///The unique identifier of the additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the additional fee.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The name of the additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the additional fee.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The display name of the additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name of the additional fee.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description of the additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the additional fee.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The amount of the additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount of the additional fee.")]
        public virtual decimal Amount { get; set; }

        ///<summary>
        ///The amount of the additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount of the additional fee.")]
        public virtual bool Taxable { get; set; }

        ///<summary>
        ///The tax category of the shipment additional fee.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax category of the shipment additional fee.")]
        public virtual string TaxCategory { get; set; }
    }

    [DataContract]
    public partial class ShipmentDocument
    {
        ///<summary>
        ///the id of the shipment document.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the shipment document.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the id of the associated shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the associated shipment.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the id of the order associated to the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the order associated to the shipment.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///name of the media.
        ///</summary>
        [DataMember]
        [ApiMember(Description="name of the media.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the path of the shipment document in the blob.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the path of the shipment document in the blob.")]
        public virtual string Path { get; set; }

        ///<summary>
        ///additional notes related to the confirmation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="additional notes related to the confirmation.")]
        public virtual string AdditionalNotes { get; set; }

        ///<summary>
        ///the date when the pickup confirmation was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date when the pickup confirmation was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the user id of the user that created the pickup confirmation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the user id of the user that created the pickup confirmation.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the value of the base64 media.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the value of the base64 media.")]
        public virtual string Document { get; set; }

        ///<summary>
        ///document type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="document type.")]
        public virtual string DocumentType { get; set; }

        ///<summary>
        ///the height of the image.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the height of the image.")]
        public virtual double ImageHeight { get; set; }

        ///<summary>
        ///the width of the image.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the width of the image.")]
        public virtual double ImageWidth { get; set; }

        ///<summary>
        ///the name of the person who picked up the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the person who picked up the shipment.")]
        public virtual string Recipient { get; set; }

        ///<summary>
        ///type of proof used to identify receiver.
        ///</summary>
        [DataMember]
        [ApiMember(Description="type of proof used to identify receiver.")]
        public virtual string ProofOfIdentity { get; set; }

        ///<summary>
        ///the last modified date of the shipment document.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the last modified date of the shipment document.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the user who last modified the shipment acquired confirmatio.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the user who last modified the shipment acquired confirmatio.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///The content type of the blob object.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The content type of the blob object.")]
        public virtual string ContentType { get; set; }
    }

    [DataContract]
    public partial class ShipmentDocumentQueryResult
        : QueryResult<ShipmentDocument>
    {
    }

    [DataContract]
    public partial class ShipmentDocumentSummary
    {
        ///<summary>
        ///the id of the shipment document.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the shipment document.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the id of the associated shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the associated shipment.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the id of the order associated to the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the order associated to the shipment.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///name of the document.
        ///</summary>
        [DataMember]
        [ApiMember(Description="name of the document.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///document type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="document type.")]
        public virtual string DocumentType { get; set; }

        ///<summary>
        ///public uri.
        ///</summary>
        [DataMember]
        [ApiMember(Description="public uri.")]
        public virtual string PublicUri { get; set; }
    }

    [DataContract]
    public partial class ShipmentDocumentSummaryQueryResult
        : QueryResult<ShipmentDocumentSummary>
    {
    }

    [DataContract]
    public partial class ShipmentFulfillmentInfo
    {
        public ShipmentFulfillmentInfo()
        {
            ValidationResults = new List<ValidationResult>{};
            ExecutionMessages = new List<ExecutionMessage>{};
            AllowedManualTransitions = new List<string>{};
        }

        ///<summary>
        ///The Id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Id")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The OrderId
        ///</summary>
        [DataMember]
        [ApiMember(Description="The OrderId")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The Order Number
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Order Number")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///The Scope Name
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Scope Name")]
        public virtual string ScopeName { get; set; }

        ///<summary>
        ///The PickUpLocationId
        ///</summary>
        [DataMember]
        [ApiMember(Description="The PickUpLocationId")]
        public virtual Guid? PickUpLocationId { get; set; }

        ///<summary>
        ///The FulfillmentScheduledTimeBeginDate
        ///</summary>
        [DataMember]
        [ApiMember(Description="The FulfillmentScheduledTimeBeginDate")]
        public virtual DateTime? FulfillmentScheduledTimeBeginDate { get; set; }

        ///<summary>
        ///The FulfillmentScheduledTimeEndDate
        ///</summary>
        [DataMember]
        [ApiMember(Description="The FulfillmentScheduledTimeEndDate")]
        public virtual DateTime? FulfillmentScheduledTimeEndDate { get; set; }

        ///<summary>
        ///The FulfillmentLastAssignedDate
        ///</summary>
        [DataMember]
        [ApiMember(Description="The FulfillmentLastAssignedDate")]
        public virtual DateTime? FulfillmentLastAssignedDate { get; set; }

        ///<summary>
        ///The FulfillmentLocationId
        ///</summary>
        [DataMember]
        [ApiMember(Description="The FulfillmentLocationId")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The fulfillment provider identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment provider identifier")]
        public virtual Guid FulfillmentProviderId { get; set; }

        ///<summary>
        ///The FulFillmentType
        ///</summary>
        [DataMember]
        [ApiMember(Description="The FulFillmentType")]
        public virtual FulfillmentMethodType FulFillmentType { get; set; }

        ///<summary>
        ///The Status
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Status")]
        public virtual string Status { get; set; }

        ///<summary>
        ///The CustomerName
        ///</summary>
        [DataMember]
        [ApiMember(Description="The CustomerName")]
        public virtual string CustomerName { get; set; }

        ///<summary>
        ///The Customer Email
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Customer Email")]
        public virtual string CustomerEmail { get; set; }

        ///<summary>
        ///The Customer Phone
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Customer Phone")]
        public virtual string CustomerPhone { get; set; }

        ///<summary>
        ///The Address
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Address")]
        public virtual Address Address { get; set; }

        ///<summary>
        ///NbItems
        ///</summary>
        [DataMember]
        [ApiMember(Description="NbItems")]
        public virtual int NbItems { get; set; }

        ///<summary>
        ///NbUnits
        ///</summary>
        [DataMember]
        [ApiMember(Description="NbUnits")]
        public virtual double NbUnits { get; set; }

        ///<summary>
        ///The Validation Results
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Validation Results")]
        public virtual List<ValidationResult> ValidationResults { get; set; }

        ///<summary>
        ///The Execution Messages
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Execution Messages")]
        public virtual List<ExecutionMessage> ExecutionMessages { get; set; }

        ///<summary>
        ///The Execution Result
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Execution Result")]
        public virtual ProcessingResult ExecutionResult { get; set; }

        ///<summary>
        ///The total amount for the shipment, including discounts.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total amount for the shipment, including discounts.")]
        public virtual decimal? Total { get; set; }

        ///<summary>
        ///The currency ISO code under which the items are sold 'Currency.IsoCode'.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The currency ISO code under which the items are sold 'Currency.IsoCode'.")]
        public virtual string BillingCurrency { get; set; }

        ///<summary>
        ///The value indicating whether or not the shipment has a note.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The value indicating whether or not the shipment has a note.")]
        public virtual bool HasNotes { get; set; }

        ///<summary>
        ///The order creation date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order creation date.")]
        public virtual DateTime OrderCreatedDate { get; set; }

        ///<summary>
        ///The order total amount.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order total amount.")]
        public virtual decimal? OrderTotal { get; set; }

        ///<summary>
        ///Date the ShipmentFulfillmentInfo was created
        ///</summary>
        [DataMember]
        [ApiMember(Description="Date the ShipmentFulfillmentInfo was created")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///Identifier of the operator who created the ShipmentFulfillmentInfo
        ///</summary>
        [DataMember]
        [ApiMember(Description="Identifier of the operator who created the ShipmentFulfillmentInfo")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///Date that the last modification was applied to the ShipmentFulfillmentInfo
        ///</summary>
        [DataMember]
        [ApiMember(Description="Date that the last modification was applied to the ShipmentFulfillmentInfo")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///Identifier of the operator who last modified the ShipmentFulfillmentInfo
        ///</summary>
        [DataMember]
        [ApiMember(Description="Identifier of the operator who last modified the ShipmentFulfillmentInfo")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///A list of allowed manual transition
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of allowed manual transition")]
        public virtual List<string> AllowedManualTransitions { get; set; }
    }

    [DataContract]
    public partial class ShipmentFulfillmentInfoQueryResult
        : QueryResult<ShipmentFulfillmentInfo>
    {
    }

    [DataContract]
    public partial class ShipmentItem
        : EntityBase<Guid>
    {
        public ShipmentItem()
        {
            ValidationResults = new List<ValidationResult>{};
            Messages = new List<ExecutionMessage>{};
            SLAs = new List<OrderFulfillmentSLA>{};
        }

        ///<summary>
        ///The address to use as destination for the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The address to use as destination for the shipment.")]
        public virtual Address ShippingAddress { get; set; }

        ///<summary>
        ///The expected delivery date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expected delivery date.")]
        public virtual DateTime? ExpectedDeliveryDate { get; set; }

        ///<summary>
        ///The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.")]
        public virtual Guid? PickUpLocationId { get; set; }

        ///<summary>
        ///The fulfillment location id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location id.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The begin date and time scheduled for the fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The begin date and time scheduled for the fulfillment.")]
        public virtual DateTime? FulfillmentScheduledTimeBeginDate { get; set; }

        ///<summary>
        ///The end date and time scheduled for the fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date and time scheduled for the fulfillment.")]
        public virtual DateTime? FulfillmentScheduledTimeEndDate { get; set; }

        ///<summary>
        ///The execution result of the shipment processing.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The execution result of the shipment processing.")]
        public virtual ProcessingResult ExecutionResult { get; set; }

        ///<summary>
        ///The validation results when the shipment was processed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The validation results when the shipment was processed.")]
        public virtual List<ValidationResult> ValidationResults { get; set; }

        ///<summary>
        ///The execution messages when the shipment was processed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The execution messages when the shipment was processed.")]
        public virtual List<ExecutionMessage> Messages { get; set; }

        [DataMember(Order=4)]
        public virtual List<OrderFulfillmentSLA> SLAs { get; set; }
    }

    [DataContract]
    public partial class ShipmentSplitItem
    {
        ///<summary>
        ///The line item identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The line item identifier.")]
        public virtual Guid LineItemId { get; set; }

        ///<summary>
        ///The quantity to split.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantity to split.")]
        public virtual double Quantity { get; set; }
    }

    [DataContract]
    public partial class ShipmentSummary
    {
        public ShipmentSummary()
        {
            LineItems = new List<LineItemSummary>{};
        }

        ///<summary>
        ///The unique identifier of the shipment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the shipment")]
        public virtual string ShipmentId { get; set; }

        ///<summary>
        ///The total of the shipment including discounts
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total of the shipment including discounts")]
        public virtual decimal? Total { get; set; }

        ///<summary>
        ///Reward amount applied on the shipment
        ///</summary>
        [DataMember]
        [ApiMember(Description="Reward amount applied on the shipment")]
        public virtual decimal? DiscountAmount { get; set; }

        ///<summary>
        ///The list of lineitems
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of lineitems")]
        public virtual List<LineItemSummary> LineItems { get; set; }
    }

    [DataContract]
    public partial class SlotInstance
    {
        ///<summary>
        ///The slot that was mapped to the specific day.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The slot that was mapped to the specific day.")]
        public virtual TimeSlot Slot { get; set; }

        ///<summary>
        ///The reservation summary for the slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation summary for the slot.")]
        public virtual SlotReservationSummary SlotReservationSummary { get; set; }

        ///<summary>
        ///The current state (avaiability) of the slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The current state (avaiability) of the slot.")]
        public virtual SlotState State { get; set; }

        ///<summary>
        ///An optional hint that the provider may provide to indicate why the slot is unavailable.
        ///</summary>
        [DataMember]
        [ApiMember(Description="An optional hint that the provider may provide to indicate why the slot is unavailable.")]
        public virtual string Hint { get; set; }
    }

    [DataContract]
    public partial class SlotReservationSummary
    {
        ///<summary>
        ///The maximum reservations for the timeslot. (Based on Quota from timeslot).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum reservations for the timeslot. (Based on Quota from timeslot).")]
        public virtual int MaximumReservations { get; set; }

        ///<summary>
        ///The calculated availability for the timeslot. (Quota - TentativeTotal - ConfirmedTotal).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The calculated availability for the timeslot. (Quota - TentativeTotal - ConfirmedTotal).")]
        public virtual int CalculatedAvailable { get; set; }

        ///<summary>
        ///The total tentative reservations for the timeslot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total tentative reservations for the timeslot.")]
        public virtual int TentativeTotal { get; set; }

        ///<summary>
        ///The total confirmed reservations for the timeslot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total confirmed reservations for the timeslot.")]
        public virtual int ConfirmedTotal { get; set; }

        ///<summary>
        ///The total pre-existing reservations for the timeslot (tentative and confirmed).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total pre-existing reservations for the timeslot (tentative and confirmed).")]
        public virtual int PreExistingTotal { get; set; }
    }

    [DataContract]
    public enum SlotState
    {
        Unspecified,
        Available,
        Unavailable,
        Full,
    }

    [DataContract]
    public partial class Tax
    {
        public Tax()
        {
            LineItemIds = new List<Guid>{};
        }

        ///<summary>
        ///The unique identifier of the tax.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the tax.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The tax code. For example, this could be GST or HST in Canada.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax code. For example, this could be GST or HST in Canada.")]
        public virtual string Code { get; set; }

        ///<summary>
        ///The tax UI-friendly display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax UI-friendly display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The percentage to apply for this tax.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The percentage to apply for this tax.")]
        public virtual double Percentage { get; set; }

        ///<summary>
        ///The tax amount to apply this tax percentage on. This should be the total of the LineItem prices.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax amount to apply this tax percentage on. This should be the total of the LineItem prices.")]
        public virtual decimal? TaxAmount { get; set; }

        ///<summary>
        ///The cost of the tax to pay. This should be the rounded TaxAmount * Percentage.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The cost of the tax to pay. This should be the rounded TaxAmount * Percentage.")]
        public virtual decimal? TaxTotal { get; set; }

        ///<summary>
        ///The unique identifier of the tax category.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the tax category.")]
        public virtual Guid TaxCategoryId { get; set; }

        ///<summary>
        ///The unique identifier of all the LineItem on which the tax is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of all the LineItem on which the tax is applied.")]
        public virtual List<Guid> LineItemIds { get; set; }

        ///<summary>
        ///Indicates that this item is the tax for the shipping charge
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates that this item is the tax for the shipping charge")]
        public virtual bool IsShippingTax { get; set; }

        ///<summary>
        ///Indicates that this item is the tax for the additionbal shipping fees
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates that this item is the tax for the additionbal shipping fees")]
        public virtual bool IsShippingFeeTax { get; set; }

        ///<summary>
        ///The id of the shipment if this tax IsShippingTax or IsShippingFeeTax.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the shipment if this tax IsShippingTax or IsShippingFeeTax.")]
        public virtual Guid TaxForShipmentId { get; set; }
    }

    [DataContract]
    public partial class TaxCategory
    {
        ///<summary>
        ///the tax category ID.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax category ID.")]
        public virtual string Id { get; set; }

        ///<summary>
        ///a value indicating whether this category is only for system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this category is only for system.")]
        public virtual bool IsSystem { get; set; }

        ///<summary>
        ///the tax category name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax category name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///a value indicating whether this tax category is active or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this tax category is active or not.")]
        public virtual bool IsSupported { get; set; }

        ///<summary>
        ///the textual description of the tax category object.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the textual description of the tax category object.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the tax category display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax category display name.")]
        public virtual LocalizedString DisplayName { get; set; }
    }

    [DataContract]
    public partial class TaxProviderDetails
    {
        ///<summary>
        ///The display name of this tax provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name of this tax provider")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///The identifier for this provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier for this provider")]
        public virtual Guid TaxProviderId { get; set; }

        ///<summary>
        ///The name of this provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of this provider")]
        public virtual string Name { get; set; }
    }

    [DataContract]
    public partial class TimeSlot
    {
        public TimeSlot()
        {
            QuotaExceptions = new List<TimeSlotQuotaException>{};
        }

        ///<summary>
        ///The unique identifier of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the time slot.", IsRequired=true)]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The unique identifier of a fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of a fulfillment location.", IsRequired=true)]
        public virtual Guid FulfillmentLocationlId { get; set; }

        ///<summary>
        ///The fulfillment location type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location type.", IsRequired=true)]
        public virtual FulfillmentMethodType Type { get; set; }

        ///<summary>
        ///The day of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The day of the time slot.", IsRequired=true)]
        public virtual DayOfWeek Day { get; set; }

        ///<summary>
        ///The start time of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start time of the time slot.", IsRequired=true)]
        public virtual TimeSpan SlotBeginTime { get; set; }

        ///<summary>
        ///The end time of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end time of the time slot.", IsRequired=true)]
        public virtual TimeSpan SlotEndTime { get; set; }

        ///<summary>
        ///The comment of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The comment of the time slot.")]
        public virtual string Comment { get; set; }

        ///<summary>
        ///The quota of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quota of the time slot.", IsRequired=true)]
        public virtual int? Quota { get; set; }

        ///<summary>
        ///The quota exceptions of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quota exceptions of the time slot.", IsRequired=true)]
        public virtual List<TimeSlotQuotaException> QuotaExceptions { get; set; }

        ///<summary>
        ///Indicates whether the time slot is deleted.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the time slot is deleted.", IsRequired=true)]
        public virtual bool IsDeleted { get; set; }
    }

    public partial class TimeSlotQuotaException
    {
        ///<summary>
        ///The quota exception identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quota exception identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The timeslot identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The timeslot identifier.")]
        public virtual Guid TimeSlotId { get; set; }

        ///<summary>
        ///The effective date of the exception.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The effective date of the exception.")]
        public virtual DateTime ExceptionDate { get; set; }

        ///<summary>
        ///The quota override.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quota override.")]
        public virtual int Quota { get; set; }

        ///<summary>
        ///The date the exception was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the exception was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The identifier of the operator who created the exception.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who created the exception.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The date the exception was last modified.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the exception was last modified.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The identifier of the operator who last modified the exception.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who last modified the exception.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///The name of the exception.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the exception.")]
        public virtual string Name { get; set; }
    }

    [DataContract]
    public partial class TimeSlotQuotaExceptionResult
    {
        public TimeSlotQuotaExceptionResult()
        {
            QuotaExceptions = new List<TimeSlotQuotaException>{};
        }

        [DataMember]
        public virtual List<TimeSlotQuotaException> QuotaExceptions { get; set; }
    }

    [DataContract]
    public partial class TimeSlotReservation
    {
        ///<summary>
        ///The unique identifier of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the time slot.", IsRequired=true)]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The unique identifier of a fulfillment location timeslot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of a fulfillment location timeslot.", IsRequired=true)]
        public virtual Guid FulfillmentLocationTimeSlotId { get; set; }

        ///<summary>
        ///The unique identifier of a fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of a fulfillment location.", IsRequired=true)]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The cart scope id associated with the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The cart scope id associated with the reservation.", IsRequired=true)]
        public virtual string CartScopeId { get; set; }

        ///<summary>
        ///The cart customer id associated with the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The cart customer id associated with the reservation.", IsRequired=true)]
        public virtual Guid CartCustomerId { get; set; }

        ///<summary>
        ///The cart name associated with the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The cart name associated with the reservation.", IsRequired=true)]
        public virtual string CartName { get; set; }

        ///<summary>
        ///The unique identifier of an order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of an order.")]
        public virtual Guid? OrderId { get; set; }

        ///<summary>
        ///The order number associated with the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order number associated with the reservation.")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///The unique identifier of a shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of a shipment.")]
        public virtual Guid? ShipmentId { get; set; }

        ///<summary>
        ///The reservation status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation status.", IsRequired=true)]
        public virtual TimeslotReservationStatus ReservationStatus { get; set; }

        ///<summary>
        ///The reservation date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation date.", IsRequired=true)]
        public virtual DateTime ReservationDate { get; set; }

        ///<summary>
        ///The reservation expiry time. Required for Tentative status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation expiry time. Required for Tentative status.")]
        public virtual DateTime? ExpiryDateTime { get; set; }

        ///<summary>
        ///The reservation expiry warning time. Required for Tentative status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation expiry warning time. Required for Tentative status.")]
        public virtual DateTime? ExpiryWarningDateTime { get; set; }

        ///<summary>
        ///The reservation comment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation comment.")]
        public virtual string Comment { get; set; }

        ///<summary>
        ///The number of renewals performed on this reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of renewals performed on this reservation.")]
        public virtual int NumberOfRenewals { get; set; }

        ///<summary>
        ///The maximum number of renewals that can be performed on this reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of renewals that can be performed on this reservation.")]
        public virtual int? MaxNumberOfRenewals { get; set; }

        ///<summary>
        ///The user who created the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The user who created the reservation.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The date and time the reservation was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date and time the reservation was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The user who last modified the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The user who last modified the reservation.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///The date and time the reservation was last modified.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date and time the reservation was last modified.")]
        public virtual DateTime? LastModified { get; set; }
    }

    [DataContract]
    public partial class TimeSlotReservationResult
    {
        public TimeSlotReservationResult()
        {
            Reservations = new List<TimeSlotReservation>{};
        }

        [DataMember]
        public virtual List<TimeSlotReservation> Reservations { get; set; }
    }

    [DataContract]
    public enum TimeslotReservationStatus
    {
        Tentative = 1,
        Confirmed = 2,
        Expired = 3,
        Voided = 4,
    }
}

namespace Orckestra.Overture.ServiceModel.Orders.Fulfillment
{

    public partial class FulfillmentException
    {
        ///<summary>
        ///The fulfillment exception identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment exception identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order identifier.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment identifier.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The shipment fulfillment state.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment fulfillment state.")]
        public virtual string ShipmentFulfillmentStatus { get; set; }

        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location identifier.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The pickup location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The pickup location identifier.")]
        public virtual Guid? PickUpLocationId { get; set; }

        ///<summary>
        ///The line item identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The line item identifier.")]
        public virtual Guid LineItemId { get; set; }

        ///<summary>
        ///The reason lookup value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reason lookup value.")]
        public virtual string ReasonLookupValue { get; set; }

        ///<summary>
        ///The note.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The note.")]
        public virtual string Note { get; set; }

        ///<summary>
        ///The value indicating whether the exception is deleted.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The value indicating whether the exception is deleted.")]
        public virtual bool IsDeleted { get; set; }

        ///<summary>
        ///The date the exception was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the exception was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The identifier of the operator who created the exception.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who created the exception.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The date the exception was last modified.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the exception was last modified.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The identifier of the operator who last modified the exception.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who last modified the exception.")]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract]
    public partial class FulfillmentExceptionResult
    {
        public FulfillmentExceptionResult()
        {
            FulfillmentExceptions = new List<FulfillmentException>{};
        }

        ///<summary>
        ///The list of fulfillment exceptions.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of fulfillment exceptions.")]
        public virtual List<FulfillmentException> FulfillmentExceptions { get; set; }
    }

    [DataContract]
    public partial class OrderFulfillmentState
    {
        public OrderFulfillmentState()
        {
            ShipmentFulfillmentStates = new List<ShipmentFulfillmentState>{};
            ProcessingValidationResults = new List<ValidationResult>{};
            ProcessingMessages = new List<ExecutionMessage>{};
        }

        ///<summary>
        ///the unique system identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system identifier")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///a calculated value assessment whether the whole order can be put on hold. This occurs only if all shipments can be put on hold.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a calculated value assessment whether the whole order can be put on hold. This occurs only if all shipments can be put on hold.")]
        public virtual bool IsHoldable { get; set; }

        ///<summary>
        ///a calculated value assessment whether the whole order can be put canceled. This occurs only if all shipments can be put on canceled.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a calculated value assessment whether the whole order can be put canceled. This occurs only if all shipments can be put on canceled.")]
        public virtual bool IsCancelable { get; set; }

        ///<summary>
        ///the current order status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the current order status.")]
        public virtual string Status { get; set; }

        ///<summary>
        ///the list of the order's list of shipment fulfillment state.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of the order's list of shipment fulfillment state.")]
        public virtual List<ShipmentFulfillmentState> ShipmentFulfillmentStates { get; set; }

        ///<summary>
        ///value indicating whether if the order is being processed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="value indicating whether if the order is being processed.")]
        public virtual bool IsProcessing { get; set; }

        ///<summary>
        ///The execution result of the order post processing.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The execution result of the order post processing.")]
        public virtual ProcessingResult ProcessingExecutionResult { get; set; }

        ///<summary>
        ///The validation results when the order was processed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The validation results when the order was processed.")]
        public virtual List<ValidationResult> ProcessingValidationResults { get; set; }

        ///<summary>
        ///The execution messages when the order was processed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The execution messages when the order was processed.")]
        public virtual List<ExecutionMessage> ProcessingMessages { get; set; }

        ///<summary>
        ///The order number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order number.")]
        public virtual string OrderNumber { get; set; }
    }

    [DataContract]
    public partial class ShipmentFulfillmentState
    {
        public ShipmentFulfillmentState()
        {
            NextStatuses = new List<string>{};
            AllowedManualTransitions = new List<string>{};
            AllowedStatusChanges = new List<string>{};
            Messages = new List<ExecutionMessage>{};
            ValidationResults = new List<ValidationResult>{};
        }

        ///<summary>
        ///the unique system shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system shipment identifier.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the current status of the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the current status of the shipment.")]
        public virtual string Status { get; set; }

        ///<summary>
        ///a list of the potential status the shipment could transition to from its current status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of the potential status the shipment could transition to from its current status.")]
        public virtual List<string> NextStatuses { get; set; }

        ///<summary>
        ///a list of allowed manual transitions from the shipment current status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of allowed manual transitions from the shipment current status.")]
        public virtual List<string> AllowedManualTransitions { get; set; }

        ///<summary>
        ///a list of allowed status changes that can be requested.  Requesting any other changes will fail.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of allowed status changes that can be requested.  Requesting any other changes will fail.")]
        public virtual List<string> AllowedStatusChanges { get; set; }

        ///<summary>
        ///a flag indicating that the shipment changes can be reprocessed within the fulfillment workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="a flag indicating that the shipment changes can be reprocessed within the fulfillment workflow")]
        public virtual bool AllowsShipmentChangesProcessing { get; set; }

        ///<summary>
        ///a value indicating whether if that fulfillment is finished for this shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether if that fulfillment is finished for this shipment.")]
        public virtual bool IsFinished { get; set; }

        ///<summary>
        ///The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.")]
        public virtual Guid? PickUpLocationId { get; set; }

        ///<summary>
        ///the unique identifier of the fulfillment location that will complete the shipment process.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the fulfillment location that will complete the shipment process.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the fulfillment provider identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment provider identifier.")]
        public virtual Guid FulfillmentProviderId { get; set; }

        ///<summary>
        ///the FulfillmentMethodType that will be used to complete the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the FulfillmentMethodType that will be used to complete the shipment.")]
        public virtual FulfillmentMethodType FulfillmentMethodType { get; set; }

        ///<summary>
        ///the scheduled time at which fulfillment will begin.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the scheduled time at which fulfillment will begin.")]
        public virtual DateTime? FulfillmentScheduledTimeBeginDate { get; set; }

        ///<summary>
        ///the scheduled time at which fulfillment will end.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the scheduled time at which fulfillment will end.")]
        public virtual DateTime? FulfillmentScheduledTimeEndDate { get; set; }

        ///<summary>
        ///the fulfillment location scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment location scope.")]
        public virtual string FulfillmentLocationScope { get; set; }

        ///<summary>
        ///The creation date of the shipment fulfillment state.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The creation date of the shipment fulfillment state.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the identity of the user who created the state.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identity of the user who created the state.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the last modification date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the last modification date.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the identity of the user who modified the state.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identity of the user who modified the state.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///the fulfillment task Id associated with the shipment processing.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment task Id associated with the shipment processing.")]
        public virtual Guid? TaskId { get; set; }

        ///<summary>
        ///the fulfillment task status associated with the shipment processing.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment task status associated with the shipment processing.")]
        public virtual string TaskStatus { get; set; }

        ///<summary>
        ///the UTC datetime until when the shipment state and content will be exclusively open for modifications by the fulfillment workflow task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the UTC datetime until when the shipment state and content will be exclusively open for modifications by the fulfillment workflow task.")]
        public virtual DateTime? LockedForTaskProcessingUntil { get; set; }

        ///<summary>
        ///a value indicating whether if the shipment is being processed or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether if the shipment is being processed or not.")]
        public virtual bool IsProcessing { get; set; }

        ///<summary>
        ///the date and time on which the shipment was last processed
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date and time on which the shipment was last processed")]
        public virtual DateTime? ShipmentLastProcessedOn { get; set; }

        ///<summary>
        ///the execution result of the shipment processing
        ///</summary>
        [DataMember]
        [ApiMember(Description="the execution result of the shipment processing")]
        public virtual ProcessingResult ExecutionResult { get; set; }

        ///<summary>
        ///The execution messages when the shipment was processed
        ///</summary>
        [DataMember]
        [ApiMember(Description="The execution messages when the shipment was processed")]
        public virtual List<ExecutionMessage> Messages { get; set; }

        ///<summary>
        ///the validation results when the shipment was processed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the validation results when the shipment was processed.")]
        public virtual List<ValidationResult> ValidationResults { get; set; }

        ///<summary>
        ///the date on which the shipment is ready to be processed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date on which the shipment is ready to be processed.")]
        public virtual DateTime? ReadyToBeginFulfillmentOn { get; set; }

        ///<summary>
        ///the fulfillment workflow is in error.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment workflow is in error.")]
        public virtual bool WorkflowInError { get; set; }

        ///<summary>
        ///the fulfillment workflow is resumable.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment workflow is resumable.")]
        public virtual bool IsResumable { get; set; }

        ///<summary>
        ///the path of the fulfillment workflow.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the path of the fulfillment workflow.")]
        public virtual string TaskWorkflowXamlPath { get; set; }

        ///<summary>
        ///the number of times the workflow was restarted after an error.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number of times the workflow was restarted after an error.")]
        public virtual int RetryCount { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Orders.Fulfillment.Carriers
{

    public partial class FulfillmentCarrierAddress
    {
        public virtual string AddressName { get; set; }
        public virtual string City { get; set; }
        public virtual string CountryCode { get; set; }
        public virtual string RegionCode { get; set; }
        public virtual string Line1 { get; set; }
        public virtual string Line2 { get; set; }
        public virtual string FirstName { get; set; }
        public virtual string LastName { get; set; }
        public virtual string PhoneNumber { get; set; }
        public virtual string PhoneExtension { get; set; }
        public virtual string PostalCode { get; set; }
        public virtual string Email { get; set; }
        public virtual string Notes { get; set; }
        public virtual bool IsResidential { get; set; }
        public virtual PropertyBag PropertyBag { get; set; }
    }

    public partial class FulfillmentCarrierDocument
    {
        public virtual string QuoteDocumentId { get; set; }
        public virtual string DocumentFormat { get; set; }
        public virtual string QuoteId { get; set; }
        public virtual string TrackingNumber { get; set; }
        public virtual string TrackingUrl { get; set; }
        public virtual string LabelUrl { get; set; }
        public virtual string ManifestReferenceId { get; set; }
        public virtual string ManifestUrl { get; set; }
    }

    public partial class FulfillmentCarrierDocumentToRetrieve
    {
        public virtual string ConfirmationId { get; set; }
        public virtual string QuoteId { get; set; }
    }

    public partial class FulfillmentCarrierImage
    {
        public virtual int Size { get; set; }
        public virtual string Url { get; set; }
    }

    public partial class FulfillmentCarrierManifest
    {
        public FulfillmentCarrierManifest()
        {
            Documents = new List<FulfillmentCarrierDocument>{};
            Issues = new List<FulfillmentCarrierManifestIssue>{};
        }

        public virtual string QuoteId { get; set; }
        public virtual Guid FulfillmentCarrierId { get; set; }
        public virtual string CarrierAccountIdOutbound { get; set; }
        public virtual string CarrierNameOutbound { get; set; }
        public virtual string CarrierServiceLevelOutbound { get; set; }
        public virtual string CultureName { get; set; }
        public virtual List<FulfillmentCarrierDocument> Documents { get; set; }
        public virtual List<FulfillmentCarrierManifestIssue> Issues { get; set; }
    }

    public partial class FulfillmentCarrierManifestIssue
    {
        public virtual string TransactionId { get; set; }
        public virtual Guid PackageId { get; set; }
        public virtual string OrderInformation { get; set; }
        public virtual string Message { get; set; }
        public virtual string MessageLocalized { get; set; }
    }

    [DataContract]
    public enum FulfillmentCarrierManifestRequirement
    {
        Unknown,
        Required,
        NotRequired,
        Excluded,
    }

    [DataContract]
    public enum FulfillmentCarrierManifestStatus
    {
        None,
        Pending,
        Manifested,
        Error,
    }

    public partial class FulfillmentCarrierOrderLocation
    {
        public virtual Guid Id { get; set; }
        public virtual string Name { get; set; }
        public virtual string Number { get; set; }
        public virtual string Email { get; set; }
        public virtual string TimeZone { get; set; }
    }

    public partial class FulfillmentCarrierPackage
    {
        public FulfillmentCarrierPackage()
        {
            Items = new List<FulfillmentCarrierPackageItem>{};
        }

        public virtual Guid PackageId { get; set; }
        public virtual string PackageType { get; set; }
        public virtual string WeightUOM { get; set; }
        public virtual decimal Weight { get; set; }
        public virtual string DistanceUOM { get; set; }
        public virtual decimal Length { get; set; }
        public virtual decimal Height { get; set; }
        public virtual decimal Width { get; set; }
        public virtual List<FulfillmentCarrierPackageItem> Items { get; set; }
    }

    public partial class FulfillmentCarrierPackageItem
    {
        public virtual string Name { get; set; }
        public virtual string Sku { get; set; }
        public virtual double Quantity { get; set; }
        public virtual string UnitOfMeasure { get; set; }
        public virtual string WeightUOM { get; set; }
        public virtual decimal Weight { get; set; }
        public virtual decimal ValueAmount { get; set; }
        public virtual string ValueCurrency { get; set; }
        public virtual string CountryCodeOfOrigin { get; set; }
    }

    public partial class FulfillmentCarrierQuote
    {
        public FulfillmentCarrierQuote()
        {
            FulfillmentCarrierImages = new List<FulfillmentCarrierImage>{};
        }

        public virtual string QuoteId { get; set; }
        public virtual Guid FulfillmentCarrierId { get; set; }
        public virtual decimal Cost { get; set; }
        public virtual string Currency { get; set; }
        public virtual string FulfillmentCarrierName { get; set; }
        public virtual string FulfillmentCarrierService { get; set; }
        public virtual string FulfillmentCarrierServiceDescription { get; set; }
        public virtual string FulfillmentCarrierServiceOther { get; set; }
        public virtual string FulfillmentCarrierServiceOtherDescription { get; set; }
        public virtual int? FulfillmentCarrierDeliveryDuration { get; set; }
        public virtual string FulfillmentCarrierDeliveryDurationDescription { get; set; }
        public virtual List<FulfillmentCarrierImage> FulfillmentCarrierImages { get; set; }
        public virtual DateTime? ExpectedDeliveryDate { get; set; }
        public virtual bool IsReturn { get; set; }
    }

    public partial class FulfillmentCarrierQuoteConfirmation
    {
        public FulfillmentCarrierQuoteConfirmation()
        {
            Documents = new List<FulfillmentCarrierDocument>{};
        }

        public virtual string ConfirmationId { get; set; }
        public virtual string QuoteId { get; set; }
        public virtual Guid PackageId { get; set; }
        public virtual bool IsReturn { get; set; }
        public virtual Guid FulfillmentCarrierId { get; set; }
        public virtual string CarrierAccountIdOutbound { get; set; }
        public virtual string CarrierAccountNameOutbound { get; set; }
        public virtual string CarrierNameOutbound { get; set; }
        public virtual decimal CarrierOutboundCost { get; set; }
        public virtual string CarrierServiceLevelOutbound { get; set; }
        public virtual string CarrierDocumentEntityTypeRelationship { get; set; }
        public virtual FulfillmentCarrierManifestRequirement CarrierManifestRequirement { get; set; }
        public virtual List<FulfillmentCarrierDocument> Documents { get; set; }
    }

    public partial class FulfillmentCarrierQuoteMessage
    {
        public virtual string Code { get; set; }
        public virtual string Source { get; set; }
        public virtual string Text { get; set; }
    }

    public partial class FulfillmentCarrierQuoteToConfirm
    {
        public virtual string QuoteId { get; set; }
        public virtual FulfillmentCarrierPackage Package { get; set; }
        public virtual FulfillmentCarrierAddress AddressFrom { get; set; }
        public virtual FulfillmentCarrierAddress AddressTo { get; set; }
        public virtual FulfillmentCarrierAddress AddressBilling { get; set; }
        public virtual bool IsReturn { get; set; }
    }

    public partial class FulfillmentCarrierQuoteToRefund
    {
        public virtual string ConfirmationId { get; set; }
        public virtual string QuoteId { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Orders.Fulfillment.Competitions
{

    [DataContract]
    public partial class FulfillmentCompetition
    {
        public FulfillmentCompetition()
        {
            FulfillmentCompetitionLocations = new List<FulfillmentCompetitionLocation>{};
        }

        ///<summary>
        ///The fulfillment competition identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment competition identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The identifier of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the order.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The identifier of the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the shipment.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The date the fulfillment competition was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the fulfillment competition was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The identifier of the operator who created the fulfillment competition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who created the fulfillment competition.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The date that the last modification was applied to the fulfillment competition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date that the last modification was applied to the fulfillment competition.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The identifier of the operator who last modified the fulfillment competition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who last modified the fulfillment competition.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///The status of the fulfillment competition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status of the fulfillment competition.")]
        public virtual FulfillmentCompetitionStatus Status { get; set; }

        ///<summary>
        ///The list of fulfillment competition locations that are going to compete for fulfillment of the specified shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of fulfillment competition locations that are going to compete for fulfillment of the specified shipment.")]
        public virtual List<FulfillmentCompetitionLocation> FulfillmentCompetitionLocations { get; set; }
    }

    [DataContract]
    public partial class FulfillmentCompetitionLocation
    {
        ///<summary>
        ///The identifier of the fulfillment location that is part of the competition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the fulfillment location that is part of the competition.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The status of the fulfillment competition location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status of the fulfillment competition location.")]
        public virtual FulfillmentCompetitionLocationStatus Status { get; set; }

        ///<summary>
        ///The date the fulfillment competition location was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the fulfillment competition location was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The identifier of the operator who created the fulfillment competition location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who created the fulfillment competition location.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The date that the last modification was applied to the fulfillment competition location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date that the last modification was applied to the fulfillment competition location.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The identifier of the operator who last modified the fulfillment competition location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who last modified the fulfillment competition location.")]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract]
    public enum FulfillmentCompetitionLocationStatus
    {
        Participant,
        Winner,
        OptedOut,
    }

    [DataContract]
    public partial class FulfillmentCompetitionQueryResult
        : QueryResult<FulfillmentCompetition>
    {
    }

    [DataContract]
    public enum FulfillmentCompetitionStatus
    {
        Pending,
        InProgress,
        Abandoned,
        Completed,
        Canceled,
        Expired,
    }
}

namespace Orckestra.Overture.ServiceModel.Orders.Fulfillment.Packages
{

    [DataContract]
    public partial class FulfillmentPackage
    {
        public FulfillmentPackage()
        {
            FulfillmentPackageItems = new List<FulfillmentPackageItem>{};
        }

        ///<summary>
        ///The fulfillment package identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The fulfillment package type identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package type identifier.")]
        public virtual Guid FulfillmentPackageTypeId { get; set; }

        ///<summary>
        ///The fulfillment package type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package type.")]
        public virtual FulfillmentPackageType FulfillmentPackageType { get; set; }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The serial shipping container code (SSCC).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The serial shipping container code (SSCC).")]
        public virtual string SerialShippingContainerCode { get; set; }

        ///<summary>
        ///The package unit of measure for weight.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The package unit of measure for weight.")]
        public virtual string WeightUOM { get; set; }

        ///<summary>
        ///The package weight.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The package weight.")]
        public virtual decimal? Weight { get; set; }

        ///<summary>
        ///The total amount value for the fulfillment package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total amount value for the fulfillment package.")]
        public virtual decimal Total { get; set; }

        ///<summary>
        ///The tracking number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tracking number.")]
        public virtual string TrackingNumber { get; set; }

        ///<summary>
        ///The tracking url.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tracking url.")]
        public virtual string TrackingUrl { get; set; }

        ///<summary>
        ///The tracking reference id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tracking reference id.")]
        public virtual string TrackingReferenceId { get; set; }

        ///<summary>
        ///The return tracking number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The return tracking number.")]
        public virtual string ReturnTrackingNumber { get; set; }

        ///<summary>
        ///The return tracking url.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The return tracking url.")]
        public virtual string ReturnTrackingUrl { get; set; }

        ///<summary>
        ///The return tracking reference id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The return tracking reference id.")]
        public virtual string ReturnTrackingReferenceId { get; set; }

        ///<summary>
        ///The fulfillment package items.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package items.")]
        public virtual List<FulfillmentPackageItem> FulfillmentPackageItems { get; set; }

        ///<summary>
        ///The date the fulfillment package was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the fulfillment package was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The identifier of the operator who created the fulfillment package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who created the fulfillment package.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The date that the last modification was applied to the fulfillment package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date that the last modification was applied to the fulfillment package.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The identifier of the operator who last modified the fulfillment package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who last modified the fulfillment package.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///The date the package was manifested.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the package was manifested.")]
        public virtual DateTime? Manifested { get; set; }

        ///<summary>
        ///The identifier of the operator who manifested the fulfillment package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who manifested the fulfillment package.")]
        public virtual string ManifestedBy { get; set; }

        ///<summary>
        ///The manifest reference id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The manifest reference id.")]
        public virtual string ManifestReferenceId { get; set; }

        ///<summary>
        ///The manifest url.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The manifest url.")]
        public virtual string ManifestUrl { get; set; }

        ///<summary>
        ///The carrier account id used for the package on outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier account id used for the package on outbound.")]
        public virtual string CarrierAccountIdOutbound { get; set; }

        ///<summary>
        ///The carrier account name used for the package on outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier account name used for the package on outbound.")]
        public virtual string CarrierAccountNameOutbound { get; set; }

        ///<summary>
        ///The carrier name used for the package on outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier name used for the package on outbound.")]
        public virtual string CarrierNameOutbound { get; set; }

        ///<summary>
        ///The carrier sevice level used for the package on outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier sevice level used for the package on outbound.")]
        public virtual string CarrierServiceLevelOutbound { get; set; }

        ///<summary>
        ///The carrier manifest requirement.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier manifest requirement.")]
        public virtual FulfillmentCarrierManifestRequirement CarrierManifestRequirement { get; set; }

        ///<summary>
        ///The carrier manifest status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier manifest status.")]
        public virtual FulfillmentCarrierManifestStatus CarrierManifestStatus { get; set; }

        ///<summary>
        ///The carrier outbound cost.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier outbound cost.")]
        public virtual decimal CarrierOutboundCost { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this package.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class FulfillmentPackageItem
    {
        ///<summary>
        ///The fulfillment package item identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package item identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order identifier.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment identifier.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The line item identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The line item identifier.")]
        public virtual Guid LineItemId { get; set; }

        ///<summary>
        ///The picking mission item identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The picking mission item identifier.")]
        public virtual Guid? PickingMissionItemId { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this package.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class FulfillmentPackageItemTransferInfo
    {
        ///<summary>
        ///The fulfillment package item identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package item identifier.")]
        public virtual Guid Id { get; set; }
    }

    [DataContract]
    public partial class FulfillmentPackageResult
    {
        public FulfillmentPackageResult()
        {
            Result = new List<FulfillmentPackage>{};
        }

        ///<summary>
        ///The list of resulting fulfillment packages.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of resulting fulfillment packages.")]
        public virtual List<FulfillmentPackage> Result { get; set; }
    }

    [DataContract]
    public partial class FulfillmentPackageType
    {
        ///<summary>
        ///The fulfillment package type identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package type identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The fulfillment package type display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package type display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The fulfillment package type short display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package type short display name.")]
        public virtual LocalizedString ShortDisplayName { get; set; }

        ///<summary>
        ///The fulfillment package type description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package type description.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The Distance UOM.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Distance UOM.")]
        public virtual string DistanceUOM { get; set; }

        ///<summary>
        ///The UOM Length.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UOM Length.")]
        public virtual decimal Length { get; set; }

        ///<summary>
        ///The UOM Height.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UOM Height.")]
        public virtual decimal Height { get; set; }

        ///<summary>
        ///The UOM Width.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UOM Width.")]
        public virtual decimal Width { get; set; }

        ///<summary>
        ///The date The fulfillment package type was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date The fulfillment package type was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the identifier of the operator who created the fulfillment package type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the operator who created the fulfillment package type.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the date that the last modification was applied to the fulfillment package type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date that the last modification was applied to the fulfillment package type.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The identifier of the operator who last modified the fulfillment package type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who last modified the fulfillment package type.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///The active flag for the fulfillment package Type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The active flag for the fulfillment package Type.")]
        public virtual bool IsActive { get; set; }
    }

    [DataContract]
    public partial class FulfillmentPackageTypeResult
    {
        public FulfillmentPackageTypeResult()
        {
            Result = new List<FulfillmentPackageType>{};
        }

        ///<summary>
        ///The list of resulting fulfillment package types
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of resulting fulfillment package types")]
        public virtual List<FulfillmentPackageType> Result { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Orders.Fulfillment.SLA
{

    [DataContract]
    public partial class FulfillmentSLA
    {
        ///<summary>
        ///The fulfillment sla identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment sla identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment identifier.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="The order identifier.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location identifier.")]
        public virtual Guid? FulfillmentLocationId { get; set; }

        ///<summary>
        ///The name.
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="The name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The delay before the sla will expire.
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="The delay before the sla will expire.")]
        public virtual int DelayInMinutes { get; set; }

        ///<summary>
        ///The warning time before the sla will expire.
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="The warning time before the sla will expire.")]
        public virtual int ExpiryWarningTimeInMinutes { get; set; }

        ///<summary>
        ///The time when the sla will expire.
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="The time when the sla will expire.")]
        public virtual DateTime ExpirationDate { get; set; }

        ///<summary>
        ///A value indicating whether the fulfillment sla is active.
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="A value indicating whether the fulfillment sla is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///the date the fulfillment sla was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the fulfillment sla was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The identifier of the operator who created the fulfillment sla.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who created the fulfillment sla.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The date that the last modification was applied to the fulfillment sla.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date that the last modification was applied to the fulfillment sla.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The identifier of the operator who last modified the fulfillment sla.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who last modified the fulfillment sla.")]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract]
    public partial class OrderFulfillmentSLA
    {
        ///<summary>
        ///The fulfillment sla identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment sla identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment identifier.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order identifier.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location identifier.")]
        public virtual Guid? FulfillmentLocationId { get; set; }

        ///<summary>
        ///The name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The time when the sla will expire.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time when the sla will expire.")]
        public virtual DateTime ExpirationDate { get; set; }

        ///<summary>
        ///The expiry warning time in minutes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expiry warning time in minutes.")]
        public virtual int? ExpiryWarningTimeInMinutes { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Orders.InventoryReservation
{

    [DataContract]
    public partial class ChangeInventoryReservedItemsStockStatusResult
    {
        public ChangeInventoryReservedItemsStockStatusResult()
        {
            InventoryReservedItems = new List<InventoryReservedItem>{};
        }

        ///<summary>
        ///The list of inventory reserved items that got their stock status updated
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of inventory reserved items that got their stock status updated")]
        public virtual List<InventoryReservedItem> InventoryReservedItems { get; set; }
    }

    [DataContract]
    public partial class InventoryItemAvailabilityEvaluationRequest
    {
        public InventoryItemAvailabilityEvaluationRequest()
        {
            InventoryLocationIds = new string[]{};
        }

        ///<summary>
        ///The line item identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The line item identifier")]
        public virtual Guid LineItemId { get; set; }

        ///<summary>
        ///The line item sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="The line item sku")]
        public virtual string LineItemSku { get; set; }

        ///<summary>
        ///The quantity to evaluate
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantity to evaluate")]
        public virtual double Quantity { get; set; }

        ///<summary>
        ///The inventory location ids
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location ids")]
        public virtual string[] InventoryLocationIds { get; set; }
    }

    [DataContract]
    public partial class InventoryItemAvailabilityEvaluationResult
    {
        ///<summary>
        ///The line item identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The line item identifier")]
        public virtual Guid LineItemId { get; set; }

        ///<summary>
        ///The line item sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="The line item sku")]
        public virtual string LineItemSku { get; set; }

        ///<summary>
        ///The requested quantity
        ///</summary>
        [DataMember]
        [ApiMember(Description="The requested quantity")]
        public virtual double RequestedQuantity { get; set; }

        ///<summary>
        ///The in stock quantity
        ///</summary>
        [DataMember]
        [ApiMember(Description="The in stock quantity")]
        public virtual double InStockQuantity { get; set; }

        ///<summary>
        ///The back orderable quantity
        ///</summary>
        [DataMember]
        [ApiMember(Description="The back orderable quantity")]
        public virtual double BackOrderableQuantity { get; set; }

        ///<summary>
        ///The out of stock quantity
        ///</summary>
        [DataMember]
        [ApiMember(Description="The out of stock quantity")]
        public virtual double OutOfStockQuantity { get; set; }

        ///<summary>
        ///The reserved quantity
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reserved quantity")]
        public virtual double ReservedQuantity { get; set; }

        ///<summary>
        ///The back order reserved quantity
        ///</summary>
        [DataMember]
        [ApiMember(Description="The back order reserved quantity")]
        public virtual double BackOrderReservedQuantity { get; set; }
    }

    [DataContract]
    public partial class InventoryItemReservationRequest
    {
        ///<summary>
        ///The line item identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The line item identifier")]
        public virtual Guid LineItemId { get; set; }

        ///<summary>
        ///The line item sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="The line item sku")]
        public virtual string LineItemSku { get; set; }

        ///<summary>
        ///The reserved quantity
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reserved quantity")]
        public virtual double Quantity { get; set; }
    }

    [DataContract]
    public partial class InventoryReservationResult
    {
        public InventoryReservationResult()
        {
            InventoryReservedItems = new List<InventoryReservedItem>{};
            FailedReservationItems = new List<InventoryItemReservationRequest>{};
        }

        ///<summary>
        ///The list of Inventory reserved items
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of Inventory reserved items")]
        public virtual List<InventoryReservedItem> InventoryReservedItems { get; set; }

        ///<summary>
        ///The list of failed reservation items
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of failed reservation items")]
        public virtual List<InventoryItemReservationRequest> FailedReservationItems { get; set; }
    }

    [DataContract]
    public partial class InventoryReservedItem
    {
        ///<summary>
        ///The reservation identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation identifier")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The unique identifier of the order, order draft or cart (according to the owner type)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order, order draft or cart (according to the owner type)")]
        public virtual Guid OwnerId { get; set; }

        ///<summary>
        ///The Owner type
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Owner type")]
        public virtual OwnerType OwnerType { get; set; }

        ///<summary>
        ///The line item identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The line item identifier")]
        public virtual Guid LineItemId { get; set; }

        ///<summary>
        ///The line item sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="The line item sku")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The quantity of the reservation
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantity of the reservation")]
        public virtual double Quantity { get; set; }

        ///<summary>
        ///The inventory reservation stock status
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory reservation stock status")]
        public virtual StockStatus StockStatus { get; set; }

        ///<summary>
        ///The inventory reservation status
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory reservation status")]
        public virtual ReservationStatus ReservationStatus { get; set; }

        ///<summary>
        ///The inventory location Id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location Id")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The created date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The created date")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The last modified date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The last modified date")]
        public virtual DateTime Modified { get; set; }

        ///<summary>
        ///The last user who modified the item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The last user who modified the item")]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract]
    public enum OwnerType
    {
        Order,
        Cart,
        OrderDraft,
    }

    [DataContract]
    public enum ReservationStatus
    {
        Planned,
        Confirmed,
        Canceled,
    }

    [DataContract]
    public enum StockStatus
    {
        InStock,
        PreOrder,
        BackOrder,
    }
}

namespace Orckestra.Overture.ServiceModel.Orders.Picking
{

    [DataContract]
    public partial class MissionItem
    {
        ///<summary>
        ///the picking mission item identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the picking mission item identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order identifier.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///the shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the shipment identifier.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the line item identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the line item identifier.")]
        public virtual Guid LineItemId { get; set; }

        ///<summary>
        ///the product identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the product identifier.")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///the variant identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the variant identifier.")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///the catalog identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the catalog identifier.")]
        public virtual string CatalogId { get; set; }

        ///<summary>
        ///the sku.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sku.")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///the requested quantity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the requested quantity.")]
        public virtual double RequestedQuantity { get; set; }

        ///<summary>
        ///the picked quantity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the picked quantity.")]
        public virtual double PickedQuantity { get; set; }

        ///<summary>
        ///the mission item status
        ///</summary>
        [DataMember]
        [ApiMember(Description="the mission item status")]
        public virtual MissionItemStatus Status { get; set; }

        ///<summary>
        ///the mission item picking condition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the mission item picking condition.")]
        public virtual MissionItemPickingCondition PickingCondition { get; set; }
    }

    [DataContract]
    public partial class MissionItemPickedQuantity
    {
        ///<summary>
        ///the picking mission item identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the picking mission item identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the picked quantity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the picked quantity.")]
        public virtual double PickedQuantity { get; set; }
    }

    [DataContract]
    public enum MissionItemPickingCondition
    {
        AllToBePicked,
        AllowPartiallyPicked,
        AllowAllOrNothingToBePicked,
    }

    [DataContract]
    public enum MissionItemStatus
    {
        NonePicked,
        AllPicked,
        PartiallyPicked,
    }

    [DataContract]
    public partial class PickingMission
    {
        public PickingMission()
        {
            MissionItems = new List<MissionItem>{};
        }

        ///<summary>
        ///the picking mission identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the picking mission identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the picking mission number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the picking mission number.")]
        public virtual string MissionNumber { get; set; }

        ///<summary>
        ///the scope identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment location identifier.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the picking mission items.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the picking mission items.")]
        public virtual List<MissionItem> MissionItems { get; set; }

        ///<summary>
        ///the current picking mission status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the current picking mission status.")]
        public virtual PickingMissionStatus Status { get; set; }

        ///<summary>
        ///the date the picking has been started.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the picking has been started.")]
        public virtual DateTime? StartedOn { get; set; }

        ///<summary>
        ///the date the picking has been completed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the picking has been completed.")]
        public virtual DateTime? CompletedOn { get; set; }

        ///<summary>
        ///the identifier of the picker who started the picking mission.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the picker who started the picking mission.")]
        public virtual string Picker { get; set; }

        ///<summary>
        ///the date the picking mission was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the picking mission was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the identifier of the operator who created the picking mission.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the operator who created the picking mission.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the date that the last modification was applied to the picking mission.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date that the last modification was applied to the picking mission.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the identifier of the operator who last modified the picking mission.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the operator who last modified the picking mission.")]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract]
    public partial class PickingMissionResult
    {
        public PickingMissionResult()
        {
            Result = new List<PickingMission>{};
        }

        ///<summary>
        ///the list of resulting picking mission
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of resulting picking mission")]
        public virtual List<PickingMission> Result { get; set; }
    }

    [DataContract]
    public enum PickingMissionStatus
    {
        Pending,
        Ready,
        InProgress,
        Completed,
        Canceled,
        CompletedWithExceptions,
    }
}

namespace Orckestra.Overture.ServiceModel.Orders.Processing
{

    [DataContract]
    public enum OrderProcessingExecutionResult
    {
        Success,
        Ignored,
        Interruption,
        Failure,
    }

    [DataContract]
    public partial class OrderProcessingResult
    {
        public OrderProcessingResult()
        {
            Messages = new List<ExecutionMessage>{};
            ProcessingExceptions = new List<Exception>{};
            ValidationResults = new List<ValidationResult>{};
            Arguments = new Dictionary<string, Object>{};
            ShipmentFulfillmentReadinessInfos = new List<ShipmentFulfillmentReadinessInfo>{};
        }

        ///<summary>
        ///the resulting order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the resulting order.")]
        public virtual Order ResultingOrder { get; set; }

        ///<summary>
        ///the result of the execution.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the result of the execution.")]
        public virtual OrderProcessingExecutionResult ExecutionResult { get; set; }

        ///<summary>
        ///the collection of messages collected during the workflow execution.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of messages collected during the workflow execution.")]
        public virtual List<ExecutionMessage> Messages { get; set; }

        ///<summary>
        ///the list of unhandled exceptions that occurred during the workflow execution.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of unhandled exceptions that occurred during the workflow execution.")]
        public virtual List<Exception> ProcessingExceptions { get; set; }

        ///<summary>
        ///a collection of validation results that were applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a collection of validation results that were applied.")]
        public virtual List<ValidationResult> ValidationResults { get; set; }

        ///<summary>
        ///a collection of worflow arguments (In and Out).
        ///</summary>
        [DataMember]
        [ApiMember(Description="a collection of worflow arguments (In and Out).")]
        public virtual Dictionary<string, Object> Arguments { get; set; }

        ///<summary>
        ///a collection of Shipment Fulfillment Readiness Information.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a collection of Shipment Fulfillment Readiness Information.")]
        public virtual List<ShipmentFulfillmentReadinessInfo> ShipmentFulfillmentReadinessInfos { get; set; }
    }

    [DataContract]
    public enum ProcessingResult
    {
        Success,
        Warning,
        Error,
        Critical,
        Failure,
    }

    [DataContract]
    public partial class ShipmentFulfillmentReadinessInfo
    {
        ///<summary>
        ///the unique system shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system shipment identifier.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the date indicating when the shipment is ready to be processed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date indicating when the shipment is ready to be processed.")]
        public virtual DateTime? ReadyToBeginFulfillmentOn { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Orders.RMA
{

    [DataContract]
    public partial class Rma
    {
        public Rma()
        {
            RmaItems = new List<RmaItem>{};
        }

        ///<summary>
        ///the unique identifier of the RMA
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the RMA")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///Scope identifier
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="Scope identifier")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///RMA number
        ///</summary>
        [DataMember]
        [ApiMember(Description="RMA number")]
        public virtual string RmaNumber { get; set; }

        ///<summary>
        ///External RMA number
        ///</summary>
        [DataMember]
        [ApiMember(Description="External RMA number")]
        public virtual string RmaExternalNumber { get; set; }

        ///<summary>
        ///The Order Number related to the RMA
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Order Number related to the RMA")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///the Identifier of the Customer who owns the RMA
        ///</summary>
        [DataMember(Order=2)]
        [ApiMember(Description="the Identifier of the Customer who owns the RMA")]
        public virtual string CustomerId { get; set; }

        ///<summary>
        ///the first name of the customerrelated to RMA
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="the first name of the customerrelated to RMA")]
        public virtual string CustomerFirstName { get; set; }

        ///<summary>
        ///Gets or set the last name of the customer related to RMA
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="Gets or set the last name of the customer related to RMA")]
        public virtual string CustomerLastName { get; set; }

        ///<summary>
        ///the email address of the customer related to RMA
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="the email address of the customer related to RMA")]
        public virtual string CustomerEmail { get; set; }

        ///<summary>
        ///the type of the customerrelated to RMA
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="the type of the customerrelated to RMA")]
        public virtual CustomerType CustomerType { get; set; }

        ///<summary>
        ///RMA item details
        ///</summary>
        [DataMember]
        [ApiMember(Description="RMA item details")]
        public virtual List<RmaItem> RmaItems { get; set; }

        ///<summary>
        ///the process status of the RMA
        ///</summary>
        [DataMember]
        [ApiMember(Description="the process status of the RMA")]
        public virtual string Status { get; set; }

        ///<summary>
        ///Total amount of refunded items, if applicable
        ///</summary>
        [DataMember]
        [ApiMember(Description="Total amount of refunded items, if applicable")]
        public virtual decimal? TotalAmountRefunded { get; set; }

        ///<summary>
        ///Custom information about RMA, if applicable
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="Custom information about RMA, if applicable")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The creation date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The creation date.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The identity of the user who created the payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identity of the user who created the payment.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The last modification date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The last modification date.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The identity of the user who modified the payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identity of the user who modified the payment.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///Check if RMA had reached a final status
        ///</summary>
        [DataMember]
        [ApiMember(Description="Check if RMA had reached a final status")]
        public virtual bool IsFinished { get; set; }
    }

    [DataContract]
    public partial class RmaItem
    {
        public RmaItem()
        {
            PropertyBag = new Dictionary<string, Object>{};
        }

        ///<summary>
        ///Unique Identifier of the RMA item
        ///</summary>
        [DataMember]
        [ApiMember(Description="Unique Identifier of the RMA item")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The RMA id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The RMA id")]
        public virtual Guid RmaId { get; set; }

        ///<summary>
        ///The unique identifier of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product.", IsRequired=true)]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The unique identifier of the variant.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the variant.", IsRequired=true)]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///The unique identifier of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product.", IsRequired=true)]
        public virtual string Sku { get; set; }

        ///<summary>
        ///the quantity of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="the quantity of the product")]
        public virtual double Quantity { get; set; }

        ///<summary>
        ///Resolution : Refund, Exchange, etc.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Resolution : Refund, Exchange, etc.")]
        public virtual string Resolution { get; set; }

        ///<summary>
        ///the reason why the item is returned. example: size, change of mind, etc
        ///</summary>
        [DataMember(Order=3)]
        [ApiMember(Description="the reason why the item is returned. example: size, change of mind, etc")]
        public virtual string Reason { get; set; }

        ///<summary>
        ///the process status of the RMA Item
        ///</summary>
        [DataMember]
        [ApiMember(Description="the process status of the RMA Item")]
        public virtual string ItemStatus { get; set; }

        ///<summary>
        ///Total Amount of refund item, if applicable
        ///</summary>
        [DataMember]
        [ApiMember(Description="Total Amount of refund item, if applicable")]
        public virtual decimal? AmountRefunded { get; set; }

        ///<summary>
        ///Custom information about RMA, if applicable
        ///</summary>
        [DataMember(Order=4)]
        [ApiMember(Description="Custom information about RMA, if applicable")]
        public virtual Dictionary<string, Object> PropertyBag { get; set; }

        ///<summary>
        ///The creation date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The creation date.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The identity of the user who created the payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identity of the user who created the payment.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The last modification date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The last modification date.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The identity of the user who modified the payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identity of the user who modified the payment.")]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract]
    public partial class RmaListResult
    {
        public RmaListResult()
        {
            Result = new List<Rma>{};
        }

        ///<summary>
        ///the list of resulting RMAs
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of resulting RMAs")]
        public virtual List<Rma> Result { get; set; }
    }

    [DataContract]
    public partial class RmaRequestResult
    {
        ///<summary>
        ///specifies if the response is successful
        ///</summary>
        [DataMember]
        [ApiMember(Description="specifies if the response is successful")]
        public virtual bool IsSuccess { get; set; }

        ///<summary>
        ///if the response is NOT successfull, here are the errorcodes
        ///</summary>
        [DataMember]
        [ApiMember(Description="if the response is NOT successfull, here are the errorcodes")]
        public virtual ICollection<string> ErrorCodes { get; set; }

        ///<summary>
        ///The RMA object
        ///</summary>
        [DataMember]
        [ApiMember(Description="The RMA object")]
        public virtual Rma Rma { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Products
{

    [DataContract]
    public partial class Catalog
        : EntityBase<string>
    {
        public Catalog()
        {
            Languages = new List<string>{};
            ChildCatalogs = new List<Catalog>{};
        }

        ///<summary>
        ///The parent catalog id of the Catalog.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The parent catalog id of the Catalog.")]
        public virtual string ParentId { get; set; }

        ///<summary>
        ///A general description of the Catalog.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A general description of the Catalog.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The active flag of the Catalog.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The active flag of the Catalog.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The currency of the Catalog.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The currency of the Catalog.")]
        public virtual string Currency { get; set; }

        ///<summary>
        ///The default language of the Catalog.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default language of the Catalog.")]
        public virtual string DefaultLanguage { get; set; }

        ///<summary>
        ///A friendly, UI compatible name for the Catalog. It is kept as a multilingual representation, allowing the display of a language friendly version of the name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A friendly, UI compatible name for the Catalog. It is kept as a multilingual representation, allowing the display of a language friendly version of the name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The list of languages supported by the Catalog.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of languages supported by the Catalog.")]
        public virtual List<string> Languages { get; set; }

        ///<summary>
        ///The start date of the Catalog.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start date of the Catalog.")]
        public virtual DateTime? StartDate { get; set; }

        ///<summary>
        ///The end date of the Catalog.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date of the Catalog.")]
        public virtual DateTime? EndDate { get; set; }

        ///<summary>
        ///The type of the Catalog.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the Catalog.")]
        public virtual CatalogType Type { get; set; }

        ///<summary>
        ///Whether the products has overridden values in the current Sales scope. It means that it have values that does not come from the Global scope.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="Whether the products has overridden values in the current Sales scope. It means that it have values that does not come from the Global scope.")]
        public virtual bool OverrideParent { get; set; }

        ///<summary>
        ///The child catalogs.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The child catalogs.")]
        public virtual List<Catalog> ChildCatalogs { get; set; }
    }

    [DataContract]
    public enum CatalogType
    {
        Global = 1,
        Sale = 2,
        Dependant = 3,
    }

    [DataContract]
    public partial class Category
        : EntityBase<string>
    {
        public Category()
        {
            Children = new List<Category>{};
            Relationships = new List<Relationship>{};
        }

        ///<summary>
        ///The child categories (list of Category)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The child categories (list of Category)")]
        public virtual List<Category> Children { get; set; }

        ///<summary>
        ///A friendly, UI compatible name for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the name
        ///</summary>
        [DataMember]
        [ApiMember(Description="A friendly, UI compatible name for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the name")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The name of the definition of the Category
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the definition of the Category")]
        public virtual string DefinitionName { get; set; }

        ///<summary>
        ///A general description of the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the name
        ///</summary>
        [DataMember]
        [ApiMember(Description="A general description of the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the name")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///The date of creation of the Category
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date of creation of the Category")]
        public virtual DateTime? Created { get; set; }

        ///<summary>
        ///The identifier of the user who created the Category
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the user who created the Category")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The date of the last modification to the Category
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date of the last modification to the Category")]
        public virtual DateTime? LastModified { get; set; }

        ///<summary>
        ///The identifier of the user who last modified the Category
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the user who last modified the Category")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///The number used for ordering the Category. An integer that allows the ordering of the categories when they are presented in a list. No restriction is given for the number (e.g. it allows two categories to have the same value for this property)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number used for ordering the Category. An integer that allows the ordering of the categories when they are presented in a list. No restriction is given for the number (e.g. it allows two categories to have the same value for this property)")]
        public virtual int? SequenceNumber { get; set; }

        ///<summary>
        ///The catalog id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The catalog id")]
        public virtual string CatalogId { get; set; }

        ///<summary>
        ///Whether the category is included in the search
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the category is included in the search")]
        public virtual bool IncludeInSearch { get; set; }

        ///<summary>
        ///The primary parent category id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The primary parent category id")]
        public virtual string PrimaryParentCategoryId { get; set; }

        ///<summary>
        ///The relationships of the Category
        ///</summary>
        [DataMember]
        [ApiMember(Description="The relationships of the Category")]
        public virtual List<Relationship> Relationships { get; set; }
    }

    [DataContract]
    public partial class CategoryList
    {
        public CategoryList()
        {
            Categories = new List<Category>{};
        }

        ///<summary>
        ///Products of the list
        ///</summary>
        [DataMember]
        [ApiMember(Description="Products of the list")]
        public virtual List<Category> Categories { get; set; }
    }

    [DataContract]
    public partial class CategoryTreeNode
        : EntityBase<string>
    {
        public CategoryTreeNode()
        {
            ChildNodes = new List<CategoryTreeNode>{};
        }

        ///<summary>
        ///The display name
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///The product count. The number of products directly under this category
        ///</summary>
        [DataMember]
        [ApiMember(Description="The product count. The number of products directly under this category")]
        public virtual long ProductCount { get; set; }

        ///<summary>
        ///A value indicating whether this node has child nodes
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this node has child nodes")]
        public virtual bool HasChildNodes { get; set; }

        ///<summary>
        ///The child nodes as a list. This collection can be empty even if HasChildNodes is true. This means that the collection was not fetched from the service
        ///</summary>
        [DataMember]
        [ApiMember(Description="The child nodes as a list. This collection can be empty even if HasChildNodes is true. This means that the collection was not fetched from the service")]
        public virtual List<CategoryTreeNode> ChildNodes { get; set; }

        ///<summary>
        ///The CategoryTreePath (the path to the category from the Root category)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The CategoryTreePath (the path to the category from the Root category)")]
        public virtual CategoryTreePath Path { get; set; }

        ///<summary>
        ///The number used for ordering the CategoryTreeNode in a list. An integer that allows the ordering of the category  tree nodes when they are presented in a list.No restriction is given for the number (e.g. it allows two category tree nodes to have the same value for this property).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number used for ordering the CategoryTreeNode in a list. An integer that allows the ordering of the category  tree nodes when they are presented in a list.No restriction is given for the number (e.g. it allows two category tree nodes to have the same value for this property).")]
        public virtual int? SequenceNumber { get; set; }
    }

    [DataContract]
    public partial class CategoryTreePath
    {
        public CategoryTreePath()
        {
            Ids = new List<string>{};
        }

        ///<summary>
        ///The ids of the category nodes in this path
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ids of the category nodes in this path")]
        public virtual List<string> Ids { get; set; }
    }

    [DataContract]
    public partial class CultureIsoList
    {
        public CultureIsoList()
        {
            CultureIsoCodes = new List<string>{};
        }

        ///<summary>
        ///The list of culture ISO codes
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of culture ISO codes")]
        public virtual List<string> CultureIsoCodes { get; set; }
    }

    [DataContract]
    public partial class CultureList
    {
        public CultureList()
        {
            Cultures = new List<Culture>{};
        }

        ///<summary>
        ///The list of culture ISO codes
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of culture ISO codes")]
        public virtual List<Culture> Cultures { get; set; }
    }

    [DataContract]
    public enum DraftState
    {
        InProgress = 0,
        Rejected = 2,
        PendingApproval = 3,
        ReadyToCompose = 4,
        Published = 5,
    }

    [DataContract]
    public partial class EffectivePriceEntryInfo
    {
        ///<summary>
        ///PriceListId
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="PriceListId")]
        public virtual string PriceListId { get; set; }

        ///<summary>
        ///Price
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="Price")]
        public virtual decimal? Price { get; set; }

        ///<summary>
        ///IsInherited
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="IsInherited")]
        public virtual bool IsInherited { get; set; }
    }

    [DataContract]
    public partial class GetCategoriesContainingProductsByStatusResult
    {
        public GetCategoriesContainingProductsByStatusResult()
        {
            Ids = new List<string>{};
        }

        [DataMember]
        public virtual List<string> Ids { get; set; }
    }

    [DataContract]
    public partial class GetCategoryTreeExistingItemByStateResult
    {
        public GetCategoryTreeExistingItemByStateResult()
        {
            CategoryIds = new List<string>{};
        }

        [DataMember]
        public virtual List<string> CategoryIds { get; set; }
    }

    [DataContract]
    public partial class GetProductByCategoryAndStateResults
    {
        public GetProductByCategoryAndStateResults()
        {
            Counts = new List<QuickLinkCountDetails>{};
            Products = new List<ProductByCategoryAndState>{};
        }

        [DataMember]
        public virtual List<QuickLinkCountDetails> Counts { get; set; }

        [DataMember]
        public virtual List<ProductByCategoryAndState> Products { get; set; }
    }

    [DataContract]
    public partial class GetProductPriceEntriesResult
    {
        public GetProductPriceEntriesResult()
        {
            ProductPriceEntries = new List<ProductPriceEntry>{};
            VariantPriceEntries = new List<VariantPriceEntry>{};
        }

        ///<summary>
        ///The product id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The product id")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The collection of ProductPriceEntry where each item represents the price of the Product in a PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of ProductPriceEntry where each item represents the price of the Product in a PriceList")]
        public virtual List<ProductPriceEntry> ProductPriceEntries { get; set; }

        ///<summary>
        ///The collection of VariantPriceEntry where each item represents the price of the Variant in a PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of VariantPriceEntry where each item represents the price of the Variant in a PriceList")]
        public virtual List<VariantPriceEntry> VariantPriceEntries { get; set; }
    }

    [DataContract]
    public partial class GetProductsByPublicationStatusResult
    {
        [DataMember]
        public virtual ICollection<QuickLinkCountDetails> Counts { get; set; }

        [DataMember]
        public virtual ICollection<ProductByPublicationStatus> Products { get; set; }

        [DataMember]
        public virtual string ContinuationToken { get; set; }
    }

    [DataContract]
    public partial class GetProductsCountByCategoryResponse
    {
        ///<summary>
        ///the total of categories.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the total of categories.")]
        public virtual long Total { get; set; }
    }

    [DataContract]
    public partial class GetProductsPropertiesResult
        : QueryResult<ProductProperties>
    {
    }

    ///<summary>
    ///model for products' statistics info
    ///</summary>
    [Api(Description="model for products' statistics info")]
    [DataContract]
    public partial class GetProductsStatisticsResult
    {
        ///<summary>
        ///The statistics related to documents size
        ///</summary>
        [DataMember]
        [ApiMember(Description="The statistics related to documents size")]
        public virtual PropertyStatistics DocumentSize { get; set; }

        ///<summary>
        ///The statistics related to variant quantities
        ///</summary>
        [DataMember]
        [ApiMember(Description="The statistics related to variant quantities")]
        public virtual PropertyStatistics VariantCount { get; set; }

        ///<summary>
        ///The total count of analyzed documents
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total count of analyzed documents")]
        public virtual int DocumentCount { get; set; }
    }

    public partial interface IDocumentPrice
    {
        ProductPriceEntry Pricing { get; set; }
        ProductPriceEntry RegularPricing { get; set; }
    }

    [DataContract]
    public enum ImportProductStatusOption
    {
        Inactive,
        Active,
        SameAsGlobal,
    }

    [DataContract]
    public partial class MediaList
    {
        public MediaList()
        {
            MediaSet = new List<ProductMedia>{};
        }

        ///<summary>
        ///the media list
        ///</summary>
        [DataMember]
        [ApiMember(Description="the media list")]
        public virtual List<ProductMedia> MediaSet { get; set; }
    }

    [DataContract]
    public partial class MediaSettings
    {
        public MediaSettings()
        {
            MediaSizes = new Dictionary<string, string>{};
        }

        ///<summary>
        ///accepted file types
        ///</summary>
        [DataMember(Order=2)]
        [ApiMember(Description="accepted file types")]
        public virtual string MediaAcceptedFileTypes { get; set; }

        ///<summary>
        ///a product filename convention
        ///</summary>
        [DataMember(Order=2)]
        [ApiMember(Description="a product filename convention")]
        public virtual string MediaProductFileNameConvention { get; set; }

        ///<summary>
        /// a product variant file name convention
        ///</summary>
        [DataMember(Order=2)]
        [ApiMember(Description=" a product variant file name convention")]
        public virtual string MediaProductVariantFileNameConvention { get; set; }

        ///<summary>
        ///a product variant file name convention
        ///</summary>
        [DataMember(Order=2)]
        [ApiMember(Description="a product variant file name convention")]
        public virtual string MediaProductKeyVariantFileNameConvention { get; set; }

        ///<summary>
        ///a fallback image name
        ///</summary>
        [DataMember(Order=2)]
        [ApiMember(Description="a fallback image name")]
        public virtual string MediaFallbackImageName { get; set; }

        ///<summary>
        ///a value indicating whether resize uploaded images server-side
        ///</summary>
        [DataMember(Order=2)]
        [ApiMember(Description="a value indicating whether resize uploaded images server-side")]
        public virtual bool MediaResizeUploadedImagesServerSide { get; set; }

        ///<summary>
        ///dimensions for different image sizes (f.e. S|M|L|XL)
        ///</summary>
        [DataMember(Order=2)]
        [ApiMember(Description="dimensions for different image sizes (f.e. S|M|L|XL)")]
        public virtual Dictionary<string, string> MediaSizes { get; set; }

        ///<summary>
        ///media server url
        ///</summary>
        [DataMember(Order=2)]
        [ApiMember(Description="media server url")]
        public virtual string MediaServerUrl { get; set; }

        ///<summary>
        ///this value is used for choosing the size of the of the image when returning ImageUrl for a product cover image
        ///</summary>
        [DataMember(Order=2)]
        [ApiMember(Description="this value is used for choosing the size of the of the image when returning ImageUrl for a product cover image")]
        public virtual string MediaCoverImageSize { get; set; }
    }

    [DataContract(Name="pi")]
    public partial class PriceExportInfo
    {
        ///<summary>
        ///the unique identifier of the PriceList
        ///</summary>
        [DataMember(Name="plid")]
        [ApiMember(Description="the unique identifier of the PriceList")]
        public virtual string PriceListId { get; set; }

        ///<summary>
        ///of the price of the Product
        ///</summary>
        [DataMember(Name="p")]
        [ApiMember(Description="of the price of the Product")]
        public virtual decimal Price { get; set; }
    }

    [DataContract]
    public partial class PriceList
        : EntityBase<string>
    {
        ///<summary>
        ///The type of the PriceList.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the PriceList.")]
        public virtual string Type { get; set; }

        ///<summary>
        ///The category of the PriceList.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The category of the PriceList.")]
        public virtual string Category { get; set; }

        ///<summary>
        ///The number used for ordering the PriceList.An integer that allows the ordering of the price lists when they are presented in a list. This number has to be unique.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number used for ordering the PriceList.An integer that allows the ordering of the price lists when they are presented in a list. This number has to be unique.")]
        public virtual int SequenceNumber { get; set; }

        ///<summary>
        ///A friendly, UI compatible name for the PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="A friendly, UI compatible name for the PriceList")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The start date of the PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start date of the PriceList")]
        public virtual DateTime? StartDate { get; set; }

        ///<summary>
        ///The end date of the PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date of the PriceList")]
        public virtual DateTime? EndDate { get; set; }

        ///<summary>
        ///The date the price list was created
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the price list was created")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The user who created the price list
        ///</summary>
        [DataMember]
        [ApiMember(Description="The user who created the price list")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The date the price list was last modified
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the price list was last modified")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The user who last modified the price list
        ///</summary>
        [DataMember]
        [ApiMember(Description="The user who last modified the price list")]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract]
    public partial class PriceListEntry
    {
        ///<summary>
        ///The id of the price List
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The id of the price List")]
        public virtual string PriceListId { get; set; }

        ///<summary>
        ///The id of the product
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The id of the product")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The id of the variant
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the variant")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///The price
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The price")]
        public virtual decimal Price { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether the price should be ignored, default is false. If set to true, the price entry will override the parent but will be ignored at the scope level, thus fallbacking to the next available price entry in the current scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether the price should be ignored, default is false. If set to true, the price entry will override the parent but will be ignored at the scope level, thus fallbacking to the next available price entry in the current scope")]
        public virtual bool IsIgnored { get; set; }
    }

    [DataContract]
    public partial class Product
        : TrackingEntityBase<string>
    {
        public Product()
        {
            Prices = new List<ProductPriceEntry>{};
            ParentCategoryIds = new List<string>{};
            Variants = new List<Variant>{};
            MediaSet = new List<ProductMedia>{};
            VariantMediaSet = new List<VariantMediaSet>{};
            Relationships = new List<Relationship>{};
            OverriddenProperties = new List<string>{};
            IdsOfOverriddenVariants = new List<string>{};
        }

        ///<summary>
        ///the id of the catalog to which the product belongs.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the id of the catalog to which the product belongs.")]
        public virtual string CatalogId { get; set; }

        ///<summary>
        ///the product definition name that represents the Product (its properties).
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the product definition name that represents the Product (its properties).")]
        public virtual string DefinitionName { get; set; }

        ///<summary>
        ///the publication status of the Product. Currently supported values are 'InProgress', 'Rejected', 'PendingApproval', 'ReadyToCompose', 'Published'
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the publication status of the Product. Currently supported values are 'InProgress', 'Rejected', 'PendingApproval', 'ReadyToCompose', 'Published'")]
        public virtual string PublicationStatus { get; set; }

        ///<summary>
        ///a friendly, UI compatible name for the Product
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="a friendly, UI compatible name for the Product")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///the default price for the Product
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the default price for the Product")]
        public virtual decimal? ListPrice { get; set; }

        ///<summary>
        ///a general description of the Product.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="a general description of the Product.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///a list of ProductPriceEntry.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="a list of ProductPriceEntry.")]
        public virtual List<ProductPriceEntry> Prices { get; set; }

        ///<summary>
        ///the business key (id) of the primary Category.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the business key (id) of the primary Category.")]
        public virtual string PrimaryParentCategoryId { get; set; }

        ///<summary>
        ///the business key (id) of the primary Category.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the business key (id) of the primary Category.")]
        public virtual List<string> ParentCategoryIds { get; set; }

        ///<summary>
        ///the list of Variant of the Product
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the list of Variant of the Product")]
        public virtual List<Variant> Variants { get; set; }

        ///<summary>
        ///the list of media of the Product
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the list of media of the Product")]
        public virtual List<ProductMedia> MediaSet { get; set; }

        ///<summary>
        ///the media list of key variants of the Product
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the media list of key variants of the Product")]
        public virtual List<VariantMediaSet> VariantMediaSet { get; set; }

        ///<summary>
        ///the stock keeping unit code (SKU) of the Product.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the stock keeping unit code (SKU) of the Product.")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///whether the Product is active or not.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="whether the Product is active or not.")]
        public virtual bool? Active { get; set; }

        ///<summary>
        ///The date on which the product becomes active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date on which the product becomes active.")]
        public virtual DateTime? ScheduledActivation { get; set; }

        ///<summary>
        ///The date on which the product becomes inactive.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date on which the product becomes inactive.")]
        public virtual DateTime? ScheduledDeactivation { get; set; }

        ///<summary>
        ///Allow overriding the activation schedule at the variant level.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Allow overriding the activation schedule at the variant level.")]
        public virtual bool? AllowVariantActivationSchedule { get; set; }

        ///<summary>
        ///Allow overriding the Active flag and the activation schedule at a descendent scope level.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Allow overriding the Active flag and the activation schedule at a descendent scope level.")]
        public virtual bool? ActivationOverridden { get; set; }

        ///<summary>
        ///The list of related entities (Product, Category or Variant) related to the Product.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The list of related entities (Product, Category or Variant) related to the Product.")]
        public virtual List<Relationship> Relationships { get; set; }

        ///<summary>
        ///the number used for ordering the Product in a list.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the number used for ordering the Product in a list.")]
        public virtual int? SequenceNumber { get; set; }

        ///<summary>
        ///Whether or not the Product should be included in the front-end search result.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="Whether or not the Product should be included in the front-end search result.")]
        public virtual bool IncludeInSearch { get; set; }

        ///<summary>
        ///the number of days the Product is flagged as a new product introduction.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the number of days the Product is flagged as a new product introduction.")]
        public virtual DateTime? NewProductDate { get; set; }

        ///<summary>
        ///whether the product has overridden values in the current Sales scope.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="whether the product has overridden values in the current Sales scope.")]
        public virtual bool IsOverridden { get; set; }

        [DataMember(Order=2)]
        public virtual List<string> OverriddenProperties { get; set; }

        [DataMember(Order=2)]
        public virtual List<string> IdsOfOverriddenVariants { get; set; }

        ///<summary>
        ///the last published date of the Product.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the last published date of the Product.")]
        public virtual DateTime? LastPublishedDate { get; set; }

        ///<summary>
        ///the tax category of the Product.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the tax category of the Product.")]
        public virtual string TaxCategory { get; set; }

        ///<summary>
        ///the unit of measure of the Product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unit of measure of the Product.")]
        public virtual string UnitOfMeasure { get; set; }

        ///<summary>
        ///the ItemFormat of the Product (must be mg, mm, mm2, mm3 or Unit quantity).
        ///</summary>
        [DataMember]
        [ApiMember(Description="the ItemFormat of the Product (must be mg, mm, mm2, mm3 or Unit quantity).")]
        public virtual decimal ItemFormat { get; set; }

        ///<summary>
        ///the Selling Method of the Product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Selling Method of the Product.")]
        public virtual string SellingMethod { get; set; }

        ///<summary>
        ///the Brand of the Product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Brand of the Product.")]
        public virtual string Brand { get; set; }

        ///<summary>
        ///The weight unit of measure of the Product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The weight unit of measure of the Product.")]
        public virtual string WeightUOM { get; set; }

        ///<summary>
        ///The weight of the Product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The weight of the Product.")]
        public virtual decimal? Weight { get; set; }
    }

    [DataContract]
    public partial class ProductAttributes
    {
        ///<summary>
        ///A list a product attributes
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list a product attributes")]
        public virtual IEnumerable<ProductPropertyDefinition> Attributes { get; set; }
    }

    [DataContract]
    public partial class ProductByCategoryAndState
        : ProductProperties
    {
        [DataMember]
        public virtual DraftState? DraftState { get; set; }

        [DataMember]
        public virtual bool IsNew { get; set; }

        [DataMember]
        public virtual bool HasChangeModification { get; set; }

        [DataMember]
        public virtual string DisplayName { get; set; }

        [DataMember]
        public virtual string Brand { get; set; }

        [DataMember]
        public virtual string Sku { get; set; }

        [DataMember]
        public virtual bool HasVariant { get; set; }
    }

    [DataContract]
    public partial class ProductByPublicationStatus
        : ProductProperties
    {
        [DataMember]
        public virtual string PublicationStatus { get; set; }

        [DataMember]
        public virtual string DisplayName { get; set; }

        [DataMember]
        public virtual string Brand { get; set; }

        [DataMember]
        public virtual string Sku { get; set; }

        [DataMember]
        public virtual bool HasVariant { get; set; }

        [DataMember]
        public virtual bool IsActive { get; set; }
    }

    [DataContract]
    public partial class ProductDraft
    {
        public ProductDraft()
        {
            ProductPropertyModifications = new List<ProductPropertyModification>{};
            VariantPropertyModifications = new List<VariantPropertyModification>{};
            ParentCategoryIds = new List<string>{};
            DeleteVariantModifications = new List<DeleteVariantModification>{};
        }

        ///<summary>
        ///the id of the catalog to which the product belongs.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the id of the catalog to which the product belongs.")]
        public virtual string CatalogId { get; set; }

        ///<summary>
        ///the state of the product draft.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the state of the product draft.")]
        public virtual DraftState State { get; set; }

        ///<summary>
        ///the list of modifications that the draft should apply to the product.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the list of modifications that the draft should apply to the product.")]
        public virtual List<ProductPropertyModification> ProductPropertyModifications { get; set; }

        ///<summary>
        ///the list of modifications that the draft should apply to the variants.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the list of modifications that the draft should apply to the variants.")]
        public virtual List<VariantPropertyModification> VariantPropertyModifications { get; set; }

        ///<summary>
        ///the new category associations to this product
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the new category associations to this product")]
        public virtual List<string> ParentCategoryIds { get; set; }

        ///<summary>
        ///the primary category
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the primary category")]
        public virtual string PrimaryParentCategoryId { get; set; }

        ///<summary>
        ///the list of delete modifications that the draft should apply to the variants.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the list of delete modifications that the draft should apply to the variants.")]
        public virtual List<DeleteVariantModification> DeleteVariantModifications { get; set; }
    }

    [DataContract]
    public partial class ProductExistsResponse
    {
        ///<summary>
        ///Value of the response
        ///</summary>
        [DataMember]
        [ApiMember(Description="Value of the response")]
        public virtual bool Value { get; set; }
    }

    [DataContract]
    public partial class ProductList
    {
        public ProductList()
        {
            Products = new List<Product>{};
        }

        ///<summary>
        ///The products
        ///</summary>
        [DataMember]
        [ApiMember(Description="The products")]
        public virtual List<Product> Products { get; set; }
    }

    [DataContract]
    public partial class ProductListPage
    {
        public ProductListPage()
        {
            Products = new List<Product>{};
        }

        ///<summary>
        ///Products of the list
        ///</summary>
        [DataMember]
        [ApiMember(Description="Products of the list")]
        public virtual List<Product> Products { get; set; }

        ///<summary>
        ///The continuation token that can be used to get the next result page.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The continuation token that can be used to get the next result page.")]
        public virtual string ContinuationToken { get; set; }
    }

    [DataContract]
    public partial class ProductMedia
        : TrackingEntityBase<int>
    {
        public ProductMedia()
        {
            ResizedInstances = new ResizedMediaLink[]{};
        }

        ///<summary>
        ///the Url of the media.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Url of the media.")]
        public virtual string Url { get; set; }

        ///<summary>
        ///the MediaType of the media.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the MediaType of the media.")]
        public virtual string MediaType { get; set; }

        ///<summary>
        ///a resized instances of the Media
        ///</summary>
        [DataMember]
        [ApiMember(Description="a resized instances of the Media")]
        public virtual ResizedMediaLink[] ResizedInstances { get; set; }

        ///<summary>
        ///the title of the Media.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the title of the Media.")]
        public virtual LocalizedString Title { get; set; }

        ///<summary>
        ///a general description of the Media.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a general description of the Media.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///a tag of the Media.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a tag of the Media.")]
        public virtual string Tag { get; set; }

        ///<summary>
        ///a role of the Media.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a role of the Media.")]
        public virtual string Role { get; set; }

        ///<summary>
        ///Indicates whether the related media file should be deleted from the Azure Storage when this reference to it is removed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the related media file should be deleted from the Azure Storage when this reference to it is removed.")]
        public virtual bool? CleanUpOnDelete { get; set; }

        ///<summary>
        ///a position of the Media.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a position of the Media.")]
        public virtual int Position { get; set; }

        ///<summary>
        ///a cover of the Product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a cover of the Product.")]
        public virtual bool? IsCover { get; set; }

        [DataMember(Order=0)]
        public virtual bool? IsRemoved { get; set; }

        ///<summary>
        ///Indicates whether the media is inherited from parent scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the media is inherited from parent scope.")]
        public virtual bool IsInherited { get; set; }
    }

    [DataContract]
    public partial class ProductPrice
        : IDocumentPrice
    {
        public ProductPrice()
        {
            VariantPrices = new List<VariantPrice>{};
        }

        ///<summary>
        ///The unique identifier of the product to which the pricing is set
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product to which the pricing is set")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The applicable pricing entry of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="The applicable pricing entry of the product")]
        public virtual ProductPriceEntry Pricing { get; set; }

        ///<summary>
        ///The applicable regular pricing entry of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="The applicable regular pricing entry of the product")]
        public virtual ProductPriceEntry RegularPricing { get; set; }

        ///<summary>
        ///The default price of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default price of the product")]
        public virtual decimal DefaultPrice { get; set; }

        ///<summary>
        ///The price of the variants associated to the product. This list will be empty if the product is not associated to any variants
        ///</summary>
        [DataMember]
        [ApiMember(Description="The price of the variants associated to the product. This list will be empty if the product is not associated to any variants")]
        public virtual List<VariantPrice> VariantPrices { get; set; }
    }

    [DataContract]
    public partial class ProductPriceEntry
    {
        ///<summary>
        ///the unique identifier of the PriceList associated to the Product
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the PriceList associated to the Product")]
        public virtual string PriceListId { get; set; }

        ///<summary>
        ///of the price of the Product
        ///</summary>
        [DataMember]
        [ApiMember(Description="of the price of the Product")]
        public virtual decimal Price { get; set; }

        ///<summary>
        ///The sequence number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sequence number.")]
        public virtual int SequenceNumber { get; set; }

        ///<summary>
        ///The start date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start date.")]
        public virtual DateTime? StartDate { get; set; }

        ///<summary>
        ///The end date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date.")]
        public virtual DateTime? EndDate { get; set; }

        ///<summary>
        ///Indicates whether the price is inherited from parent scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the price is inherited from parent scope.")]
        public virtual bool IsInherited { get; set; }

        ///<summary>
        ///the price list type
        ///</summary>
        [DataMember]
        [ApiMember(Description="the price list type")]
        public virtual string PriceListType { get; set; }

        ///<summary>
        ///the price list category
        ///</summary>
        [DataMember]
        [ApiMember(Description="the price list category")]
        public virtual string PriceListCategory { get; set; }

        [DataMember]
        public virtual DateTime? LastModified { get; set; }

        [DataMember]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract(Name="pi")]
    public partial class ProductPriceExportInfo
    {
        public ProductPriceExportInfo()
        {
            Prices = new List<PriceExportInfo>{};
            Variants = new List<VariantPriceExportInfo>{};
        }

        ///<summary>
        ///The unique identifier of the product to which the pricing is set
        ///</summary>
        [DataMember(Name="pid")]
        [ApiMember(Description="The unique identifier of the product to which the pricing is set")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The prices for each price list.
        ///</summary>
        [DataMember(Name="prs")]
        [ApiMember(Description="The prices for each price list.")]
        public virtual List<PriceExportInfo> Prices { get; set; }

        ///<summary>
        ///The prices for the product variants.
        ///</summary>
        [DataMember(Name="vs")]
        [ApiMember(Description="The prices for the product variants.")]
        public virtual List<VariantPriceExportInfo> Variants { get; set; }
    }

    [DataContract]
    public partial class ProductProperties
    {
        ///<summary>
        ///the unique identifier of Product
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of Product")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The list of requested properties of the Product
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of requested properties of the Product")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class ProductSettings
    {
        ///<summary>
        ///the changes made to an price will be audited
        ///</summary>
        [DataMember]
        [ApiMember(Description="the changes made to an price will be audited")]
        public virtual bool IsPricingAuditEnabled { get; set; }

        ///<summary>
        ///the number of days the product stays in the New count.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number of days the product stays in the New count.")]
        public virtual int NewProductDays { get; set; }

        ///<summary>
        ///a value indicating whether the product workflow is simple (false) or with composer (true).
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether the product workflow is simple (false) or with composer (true).")]
        public virtual bool EnableExtendedProductWorkflow { get; set; }

        ///<summary>
        ///System setting to allow overriding the default behavior of not allowing any product with regular prices to be saved at 0 pricing.
        ///</summary>
        [DataMember]
        [ApiMember(Description="System setting to allow overriding the default behavior of not allowing any product with regular prices to be saved at 0 pricing.")]
        public virtual bool OverrideGreaterThanZeroPricingConstraint { get; set; }

        ///<summary>
        ///whether or not the changes to multilingual attributes in a sales scope should be copied over to the Global scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether or not the changes to multilingual attributes in a sales scope should be copied over to the Global scope.")]
        public virtual bool AllowTranslationFromSalesToGlobal { get; set; }

        ///<summary>
        ///Specify what will be the Active value for the products imported.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specify what will be the Active value for the products imported.")]
        public virtual ImportProductStatusOption DefaultProductImportStatus { get; set; }

        ///<summary>
        ///Whether or not to create notifications (for changes in system culture)  to all other languages of the same scope as the changes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not to create notifications (for changes in system culture)  to all other languages of the same scope as the changes.")]
        public virtual bool NotifySameScopeOtherLanguages { get; set; }

        ///<summary>
        ///Specifies the product and variant sku uniqueness level.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies the product and variant sku uniqueness level.")]
        public virtual SkuUniquenessLevel SkuUniquenessLevel { get; set; }

        ///<summary>
        ///Determine if the inventory is enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determine if the inventory is enabled")]
        public virtual bool IsInventoryEnabled { get; set; }

        ///<summary>
        ///the list of inventory statuses available to search.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of inventory statuses available to search.")]
        public virtual string AvailableInventoryStatuses { get; set; }

        ///<summary>
        ///the maximum number of variant attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of variant attributes.")]
        public virtual int MaxNumberOfVariantAttributes { get; set; }

        ///<summary>
        ///the maximum number of product attributes
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of product attributes")]
        public virtual int MaxNumberOfProductAttributes { get; set; }

        ///<summary>
        ///the maximum number of media items
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of media items")]
        public virtual int MaxNumberOfMediaItems { get; set; }

        ///<summary>
        ///the maximum number of variants
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of variants")]
        public virtual int MaxNumberOfVariants { get; set; }

        ///<summary>
        ///the maximum number of relationships
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of relationships")]
        public virtual int MaxNumberOfRelationships { get; set; }

        ///<summary>
        ///the maximum number of product in a file for the product export.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of product in a file for the product export.")]
        public virtual int ProductExportMaxNumberOfItemPerFile { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this command.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this command.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///statistics values such as min, max, and average
    ///</summary>
    [Api(Description="statistics values such as min, max, and average")]
    [DataContract]
    public partial class PropertyStatistics
    {
        ///<summary>
        ///The minimum value
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum value")]
        public virtual int Min { get; set; }

        ///<summary>
        ///The maximum value
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum value")]
        public virtual int Max { get; set; }

        ///<summary>
        ///The average value
        ///</summary>
        [DataMember]
        [ApiMember(Description="The average value")]
        public virtual int Average { get; set; }
    }

    [DataContract]
    public partial class QuickLinkCountDetails
    {
        ///<summary>
        ///Name for the quick link. Value is set according to the specified culture specified during retrieve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Name for the quick link. Value is set according to the specified culture specified during retrieve.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///Items count for this quick link.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Items count for this quick link.")]
        public virtual int Count { get; set; }
    }

    [DataContract]
    public partial class Relationship
    {
        ///<summary>
        ///ID of the relationship, obsolete
        ///</summary>
        [DataMember]
        [ApiMember(Description="ID of the relationship, obsolete")]
        public virtual string Id { get; set; }

        ///<summary>
        ///A general description of the Relationship. It is kept as a multilingual representation, allowing the display of a language friendly version of the description
        ///</summary>
        [DataMember]
        [ApiMember(Description="A general description of the Relationship. It is kept as a multilingual representation, allowing the display of a language friendly version of the description")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///A quantity for the Relationship. For example, X has 7 items of the relation Y
        ///</summary>
        [DataMember]
        [ApiMember(Description="A quantity for the Relationship. For example, X has 7 items of the relation Y")]
        public virtual int Count { get; set; }

        ///<summary>
        ///A qualifier for the Relationship. Flexible property that allows the consumer to enter custom information about the relationship
        ///</summary>
        [DataMember]
        [ApiMember(Description="A qualifier for the Relationship. Flexible property that allows the consumer to enter custom information about the relationship")]
        public virtual string Qualifier { get; set; }

        ///<summary>
        ///The number used for ordering the Relationship. An integer that allows the ordering of the relationships when they are presented in a list. No restriction is given for the number (e.g. it allows two relationships to have the same value for this property).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number used for ordering the Relationship. An integer that allows the ordering of the relationships when they are presented in a list. No restriction is given for the number (e.g. it allows two relationships to have the same value for this property).")]
        public virtual int SequenceNumber { get; set; }

        ///<summary>
        ///The MerchandiseType of the Relationship. The type is based on the MerchandiseType Lookup. Contains the value of the lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The MerchandiseType of the Relationship. The type is based on the MerchandiseType Lookup. Contains the value of the lookup.")]
        public virtual string MerchandiseType { get; set; }

        ///<summary>
        ///The catalog id which the entity related to the source belongs
        ///</summary>
        [DataMember]
        [ApiMember(Description="The catalog id which the entity related to the source belongs")]
        public virtual string CatalogId { get; set; }

        ///<summary>
        ///The related entity id of the Relationship
        ///</summary>
        [DataMember]
        [ApiMember(Description="The related entity id of the Relationship")]
        public virtual string EntityId { get; set; }

        ///<summary>
        ///The variant product Id of the Relationship just when the relationship's type is Variant
        ///</summary>
        [DataMember]
        [ApiMember(Description="The variant product Id of the Relationship just when the relationship's type is Variant")]
        public virtual string VariantProductId { get; set; }

        ///<summary>
        ///The type of the 
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the ")]
        public virtual RelationshipType RelationshipType { get; set; }

        ///<summary>
        ///True if the relationship is inherited from a sale scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="True if the relationship is inherited from a sale scope")]
        public virtual bool IsInherited { get; set; }
    }

    [DataContract]
    public enum RelationshipType
    {
        Category = 1,
        Product = 2,
        Variant = 4,
    }

    [DataContract]
    public partial class ResizedMediaLink
    {
        ///<summary>
        ///the name of the size  of the media. Examples could be: &quot;S&quot;, &quot;M&quot;, &quot;L&quot;, etc.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the size  of the media. Examples could be: &quot;S&quot;, &quot;M&quot;, &quot;L&quot;, etc.")]
        public virtual string Size { get; set; }

        ///<summary>
        ///the Url of the media.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Url of the media.")]
        public virtual string Url { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public enum SkuUniquenessLevel
    {
        Global = 0,
        None = 2,
    }

    [DataContract]
    public partial class Variant
        : TrackingEntityBase<string>
    {
        public Variant()
        {
            Prices = new List<ProductPriceEntry>{};
            Relationships = new List<Relationship>{};
            MediaSet = new List<ProductMedia>{};
            OverriddenProperties = new List<string>{};
        }

        ///<summary>
        ///whether the Variant is active or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether the Variant is active or not.")]
        public virtual bool? Active { get; set; }

        ///<summary>
        ///The date on which the variant becomes active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date on which the variant becomes active.")]
        public virtual DateTime? ScheduledActivation { get; set; }

        ///<summary>
        ///The date on which the variant becomes inactive.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date on which the variant becomes inactive.")]
        public virtual DateTime? ScheduledDeactivation { get; set; }

        ///<summary>
        ///the id of the catalog name to which the variant belongs.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the id of the catalog name to which the variant belongs.")]
        public virtual string CatalogId { get; set; }

        ///<summary>
        ///the product definition name that represents the Variants (its properties).
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the product definition name that represents the Variants (its properties).")]
        public virtual string DefinitionName { get; set; }

        ///<summary>
        ///a friendly, UI compatible name for the Variants
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="a friendly, UI compatible name for the Variants")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///the current price for the Variant.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the current price for the Variant.")]
        public virtual decimal? ListPrice { get; set; }

        ///<summary>
        ///the ID (business) of the product that owns the Variant
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the ID (business) of the product that owns the Variant")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///the number used for ordering the Variant in a list.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the number used for ordering the Variant in a list.")]
        public virtual int SequenceNumber { get; set; }

        ///<summary>
        ///the hidden in scope flag of the Variant
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the hidden in scope flag of the Variant")]
        public virtual bool HiddenInScope { get; set; }

        ///<summary>
        ///prices.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="prices.")]
        public virtual List<ProductPriceEntry> Prices { get; set; }

        ///<summary>
        ///the stock keeping unit code (SKU) of the Variant.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the stock keeping unit code (SKU) of the Variant.")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///the tax category of the Variant.
        ///</summary>
        [DataMember(Order=1)]
        [ApiMember(Description="the tax category of the Variant.")]
        public virtual string TaxCategory { get; set; }

        ///<summary>
        ///the relationships
        ///</summary>
        [DataMember]
        [ApiMember(Description="the relationships")]
        public virtual List<Relationship> Relationships { get; set; }

        ///<summary>
        ///the media
        ///</summary>
        [DataMember]
        [ApiMember(Description="the media")]
        public virtual List<ProductMedia> MediaSet { get; set; }

        ///<summary>
        ///the list of overridden properties.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of overridden properties.")]
        public virtual List<string> OverriddenProperties { get; set; }
    }

    [DataContract]
    public partial class VariantMediaSet
    {
        public VariantMediaSet()
        {
            Media = new ProductMedia[]{};
        }

        ///<summary>
        ///the attribute values
        ///</summary>
        [DataMember]
        [ApiMember(Description="the attribute values")]
        public virtual PropertyBag AttributesToMatch { get; set; }

        ///<summary>
        ///the list of Media of the Product
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the list of Media of the Product")]
        public virtual ProductMedia[] Media { get; set; }
    }

    [DataContract]
    public partial class VariantPrice
    {
        ///<summary>
        ///The unique identifier of the variant
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the variant")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///The applicable pricing entry of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="The applicable pricing entry of the product")]
        public virtual ProductPriceEntry Pricing { get; set; }

        ///<summary>
        ///The applicable regular pricing entry of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="The applicable regular pricing entry of the product")]
        public virtual ProductPriceEntry RegularPricing { get; set; }

        ///<summary>
        ///The default price of the variant
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default price of the variant")]
        public virtual decimal DefaultPrice { get; set; }

        ///<summary>
        ///A flag indicating whether the current variant pricing is inherited from information set at the product level
        ///</summary>
        [DataMember]
        [ApiMember(Description="A flag indicating whether the current variant pricing is inherited from information set at the product level")]
        public virtual bool InheritedFromProduct { get; set; }
    }

    [DataContract]
    public partial class VariantPriceEntry
    {
        public VariantPriceEntry()
        {
            PricesEntries = new List<ProductPriceEntry>{};
        }

        ///<summary>
        ///The unique identifier of the variant.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the variant.")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///The collection of ProductPriceEntry which each item represents the price of the Variant in a PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of ProductPriceEntry which each item represents the price of the Variant in a PriceList")]
        public virtual List<ProductPriceEntry> PricesEntries { get; set; }
    }

    [DataContract(Name="vi")]
    public partial class VariantPriceExportInfo
    {
        public VariantPriceExportInfo()
        {
            Prices = new List<PriceExportInfo>{};
        }

        ///<summary>
        ///The unique identifier of the variant of the main product.
        ///</summary>
        [DataMember(Name="vid")]
        [ApiMember(Description="The unique identifier of the variant of the main product.")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///The prices for each price list.
        ///</summary>
        [DataMember(Name="ps")]
        [ApiMember(Description="The prices for each price list.")]
        public virtual List<PriceExportInfo> Prices { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Products.Draft
{

    [DataContract]
    public partial class AddMediaModification
        : ProductModification
    {
        public AddMediaModification()
        {
            ResizedInstances = new ResizedMediaLink[]{};
        }

        [DataMember]
        public virtual string VariantId { get; set; }

        [DataMember]
        public virtual PropertyBag AttributesToMatch { get; set; }

        [DataMember]
        [Required]
        public virtual string Url { get; set; }

        [DataMember]
        [Required]
        public virtual string MediaType { get; set; }

        [DataMember]
        public virtual ResizedMediaLink[] ResizedInstances { get; set; }

        [DataMember]
        public virtual LocalizedString Title { get; set; }

        [DataMember]
        public virtual LocalizedString Description { get; set; }

        [DataMember]
        public virtual string Tag { get; set; }

        [DataMember]
        public virtual int? Position { get; set; }

        [DataMember]
        public virtual bool? IsCover { get; set; }

        [DataMember]
        public virtual bool CleanUpOnDelete { get; set; }

        [DataMember]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class AddVariantModification
    {
        [DataMember]
        [Required]
        public virtual string VariantId { get; set; }

        [DataMember]
        public virtual string Sku { get; set; }

        [DataMember(Order=0)]
        public virtual LocalizedString DisplayName { get; set; }

        [DataMember]
        public virtual bool Active { get; set; }

        [DataMember]
        public virtual string TaxCategory { get; set; }

        [DataMember]
        public virtual int SequenceNumber { get; set; }

        [DataMember]
        public virtual PropertyBag PropertyBag { get; set; }

        [DataMember(Order=0)]
        public virtual DateTime? ScheduledActivation { get; set; }

        [DataMember(Order=0)]
        public virtual DateTime? ScheduledDeactivation { get; set; }
    }

    [DataContract]
    public partial class DeleteMediaModification
        : ProductModification
    {
        [DataMember]
        public virtual int Id { get; set; }
    }

    [DataContract]
    public partial class DeleteVariantModification
        : ProductModification
    {
        [DataMember]
        public virtual string VariantId { get; set; }
    }

    [DataContract]
    public partial class ParentCategoriesModification
    {
        public ParentCategoriesModification()
        {
            CategoryIds = new List<string>{};
        }

        [DataMember]
        public virtual List<string> CategoryIds { get; set; }

        [DataMember]
        public virtual DateTime LastModified { get; set; }
    }

    [DataContract]
    public partial class PrimaryParentCategoryModification
    {
        [DataMember]
        public virtual string CategoryId { get; set; }

        [DataMember]
        public virtual DateTime LastModified { get; set; }
    }

    [DataContract]
    public partial class ProductModification
    {
        [DataMember]
        public virtual bool IsLocalized { get; set; }

        [DataMember]
        public virtual DateTime LastModified { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Products.Inventory
{

    [DataContract]
    public partial class InventoryItem
    {
        public InventoryItem()
        {
            Schedules = new List<InventorySchedule>{};
        }

        ///<summary>
        ///The inventory location identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The sku of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sku of the product")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The quantified information of this item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantified information of this item")]
        public virtual InventoryQuantity Quantity { get; set; }

        ///<summary>
        ///The list of schedules
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of schedules")]
        public virtual List<InventorySchedule> Schedules { get; set; }
    }

    [DataContract]
    public partial class InventoryItemAvailability
    {
        public InventoryItemAvailability()
        {
            Statuses = new List<InventoryItemStatus>{};
        }

        ///<summary>
        ///The inventory item identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory item identifier")]
        public virtual InventoryItemIdentifier Identifier { get; set; }

        ///<summary>
        ///The statuses
        ///</summary>
        [DataMember]
        [ApiMember(Description="The statuses")]
        public virtual List<InventoryItemStatus> Statuses { get; set; }

        ///<summary>
        ///The date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date")]
        public virtual DateTime Date { get; set; }
    }

    [DataContract]
    public partial class InventoryItemIdentifier
    {
        ///<summary>
        ///The InventoryLocation identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The InventoryLocation identifier")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The Sku (product identifier)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Sku (product identifier)")]
        public virtual string Sku { get; set; }
    }

    [DataContract]
    public partial class InventoryItemStatus
    {
        ///<summary>
        ///The quantified information of this item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantified information of this item")]
        public virtual InventoryStatus Status { get; set; }

        ///<summary>
        ///The quantity
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantity")]
        public virtual double? Quantity { get; set; }
    }

    [DataContract]
    public partial class InventoryItemStatusDetails
    {
        ///<summary>
        ///The inventory item quantity and schedules
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory item quantity and schedules")]
        public virtual InventoryItem InventoryItem { get; set; }

        ///<summary>
        ///The current status of the item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The current status of the item")]
        public virtual InventoryStatus CurrentStatus { get; set; }

        ///<summary>
        ///The name of the FulfillmentLocation associated to the inventory location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the FulfillmentLocation associated to the inventory location")]
        public virtual string FulfillmentLocationName { get; set; }

        ///<summary>
        ///The identifier of the FulfillmentLocation associated to the inventory location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the FulfillmentLocation associated to the inventory location")]
        public virtual string FulfillmentLocationNumber { get; set; }

        ///<summary>
        ///The type of the FulfillmentLocation associated to the inventory location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the FulfillmentLocation associated to the inventory location")]
        public virtual FulfillmentLocationType FulfillmentLocationType { get; set; }

        ///<summary>
        ///A value indicating whether the inventory is enabled for the fulfillment location associated to the inventory location
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the inventory is enabled for the fulfillment location associated to the inventory location")]
        public virtual bool IsFulfillmentLocationInventoryEnabled { get; set; }

        ///<summary>
        ///A value indicating whether the inventory availability to promise is enabled for the fulfillment location associated to the inventory location
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the inventory availability to promise is enabled for the fulfillment location associated to the inventory location")]
        public virtual bool IsFulfillmentLocationAtpEnabled { get; set; }

        ///<summary>
        ///The scope associated to the FulfillmentLocation associated to the inventory Location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope associated to the FulfillmentLocation associated to the inventory Location.")]
        public virtual string Scope { get; set; }
    }

    [DataContract]
    public partial class InventoryItemStatusDetailsQueryResult
        : QueryResult<InventoryItemStatusDetails>
    {
    }

    [DataContract]
    public partial class InventoryLocation
    {
        ///<summary>
        ///The associated location id which could represent a Store number or a Warehouse number
        ///</summary>
        [DataMember]
        [ApiMember(Description="The associated location id which could represent a Store number or a Warehouse number")]
        public virtual string AssociatedLocationId { get; set; }

        ///<summary>
        ///The date the InventoryLocation was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the InventoryLocation was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The identifier of the operator who created the InventoryLocation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who created the InventoryLocation.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The date that the last modification was applied to the InventoryLocation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date that the last modification was applied to the InventoryLocation.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The identifier of the operator who last modified the InventoryLocation details are modified.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who last modified the InventoryLocation details are modified.")]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract]
    public partial class InventoryProviderDetails
    {
        ///<summary>
        ///The display name of this inventory provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name of this inventory provider")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///The identifier for this provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier for this provider")]
        public virtual Guid InventoryProviderId { get; set; }

        ///<summary>
        ///The name of this provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of this provider")]
        public virtual string Name { get; set; }
    }

    [DataContract]
    public partial class InventoryQuantity
    {
        ///<summary>
        ///The inventory quantity identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory quantity identifier")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The inventory location identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The sku of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sku of the product")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The quantity of this item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantity of this item")]
        public virtual double Quantity { get; set; }

        ///<summary>
        ///The reserved quantity of this item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reserved quantity of this item")]
        public virtual double? ReservedQuantity { get; set; }

        ///<summary>
        ///The value indicating whether this instance is pre-orderable
        ///</summary>
        [DataMember]
        [ApiMember(Description="The value indicating whether this instance is pre-orderable")]
        public virtual bool IsPreOrderable { get; set; }

        ///<summary>
        ///The maximum number of product that can be taken from the inventory
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of product that can be taken from the inventory")]
        public virtual double? PreOrderLimit { get; set; }

        ///<summary>
        ///The reserved quantity for pre order
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reserved quantity for pre order")]
        public virtual double? PreOrderReservedQuantity { get; set; }

        ///<summary>
        ///The value indicating whether this instance is backorderable
        ///</summary>
        [DataMember]
        [ApiMember(Description="The value indicating whether this instance is backorderable")]
        public virtual bool IsBackOrderable { get; set; }

        ///<summary>
        ///The maximum number of product that can be taken from the inventory in back order
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of product that can be taken from the inventory in back order")]
        public virtual double? BackOrderLimit { get; set; }

        ///<summary>
        ///The reserved quantity for back order
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reserved quantity for back order")]
        public virtual double? BackOrderReservedQuantity { get; set; }

        ///<summary>
        ///The number of items which should trigger an alert to re-order the item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of items which should trigger an alert to re-order the item")]
        public virtual double? ReOrderPoint { get; set; }

        ///<summary>
        ///The the safety stock quantity of this item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The the safety stock quantity of this item")]
        public virtual double? SafetyStock { get; set; }

        ///<summary>
        ///The creation date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The creation date")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The username of the user who created
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username of the user who created")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The last modification date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The last modification date")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The username of the user who last modified
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username of the user who last modified")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///The date the item was last restocked
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the item was last restocked")]
        public virtual DateTime? LastRestocked { get; set; }

        ///<summary>
        ///The username of the user who last restocked the item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username of the user who last restocked the item")]
        public virtual string LastRestockedBy { get; set; }

        ///<summary>
        ///The computed available to promise quantity of this item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The computed available to promise quantity of this item")]
        public virtual double AvailableToPromiseQuantity { get; set; }
    }

    [DataContract]
    public partial class InventorySchedule
        : EntityBase<Guid>
    {
        ///<summary>
        ///The inventory location identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The associated product sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="The associated product sku")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The date range of the schedule
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date range of the schedule")]
        public virtual DateRange DateRange { get; set; }

        ///<summary>
        ///The status of product inventory
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status of product inventory")]
        public virtual InventoryStatus InventoryStatus { get; set; }

        ///<summary>
        ///The last modified date time of product inventory
        ///</summary>
        [DataMember]
        [ApiMember(Description="The last modified date time of product inventory")]
        public virtual DateTime? LastModified { get; set; }

        ///<summary>
        ///The identifier of the operator who last modified the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who last modified the entity")]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract]
    public enum InventoryStatus
    {
        InStock,
        OutOfStock,
        PreOrder,
        BackOrder,
    }

    [DataContract]
    public enum SortInventoryItems
    {
        FulfillmentLocationNumber,
        Status,
        Quantity,
        ReservedQuantity,
        AvailableToPromiseQuantity,
    }
}

namespace Orckestra.Overture.ServiceModel.Providers
{

    [DataContract]
    public partial class FulfillmentCarrierProvider
        : ProviderBase
    {
    }

    [DataContract]
    public partial class FulfillmentProvider
        : ProviderBase
    {
        public FulfillmentProvider()
        {
            AvailableFulfillmentMethodTypes = new List<FulfillmentMethodType>{};
        }

        ///<summary>
        ///The tax category identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax category identifier.")]
        public virtual Guid TaxCategoryId { get; set; }

        ///<summary>
        ///The available fulfillment method types.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The available fulfillment method types.")]
        public virtual List<FulfillmentMethodType> AvailableFulfillmentMethodTypes { get; set; }
    }

    [DataContract]
    public partial class FulfillmentRoutingProvider
        : ProviderBase
    {
    }

    [DataContract]
    public partial class GetProvidersResponse
    {
        public GetProvidersResponse()
        {
            Providers = new List<Provider>{};
        }

        ///<summary>
        ///the list of providers.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of providers.")]
        public virtual List<Provider> Providers { get; set; }
    }

    [DataContract]
    public partial class PaymentProvider
        : ProviderBase
    {
        ///<summary>
        ///A value indicating whether the default payment method is supported.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the default payment method is supported.")]
        public virtual bool IsDefaultPaymentMethodSupported { get; set; }

        ///<summary>
        ///The supported currency ids.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The supported currency ids.")]
        public virtual string SupportedCurrencyIds { get; set; }

        ///<summary>
        ///The supported payment method type ids.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The supported payment method type ids.")]
        public virtual string SupportedPaymentMethodTypeIds { get; set; }

        ///<summary>
        ///The supported culture ids.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The supported culture ids.")]
        public virtual string SupportedCultureIds { get; set; }

        ///<summary>
        ///A value indicating whether the refresh operation is supported.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the refresh operation is supported.")]
        public virtual bool IsRefreshOperationSupported { get; set; }
    }

    [DataContract]
    public partial class Provider
        : ProviderBase
    {
        ///<summary>
        ///The provider type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The provider type.")]
        public virtual ProviderType Type { get; set; }
    }

    [DataContract]
    public partial class ProviderBase
    {
        ///<summary>
        ///The provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The provider unique identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The provider name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The provider name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The provider scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The provider scope.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The provider implementation type name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The provider implementation type name.")]
        public virtual string ImplementationTypeName { get; set; }

        ///<summary>
        ///The provider description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The provider description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The provider display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The provider display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///A value indicating whether this provider is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this provider is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The provider custom configurations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The provider custom configurations.")]
        public virtual PropertyBag Values { get; set; }
    }

    [DataContract]
    public partial class ProvidersMetadata
    {
        public ProvidersMetadata()
        {
            EntityDefinitions = new List<EntityDefinition>{};
        }

        ///<summary>
        ///the list of entity definitions.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of entity definitions.")]
        public virtual List<EntityDefinition> EntityDefinitions { get; set; }
    }

    [DataContract]
    public partial class ProviderStoreSettings
    {
        ///<summary>
        ///the unique identifier of the Store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Store.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the name of the store. Each store must have a name that unique in the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the store. Each store must have a name that unique in the system.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the display name of the store. This is a multilingual value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name of the store. This is a multilingual value.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///a business centric number to identify the store that could be used to link the store to external data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a business centric number to identify the store that could be used to link the store to external data.")]
        public virtual string Number { get; set; }

        ///<summary>
        ///a value indicating whether the stores has overridden settings.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether the stores has overridden settings.")]
        public virtual bool HasOverriddenSettings { get; set; }

        ///<summary>
        ///The custom settings for the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The custom settings for the store.")]
        public virtual PropertyBag Values { get; set; }
    }

    [DataContract]
    public partial class TaxProvider
        : ProviderBase
    {
    }
}

namespace Orckestra.Overture.ServiceModel.Queries
{

    [DataContract]
    public enum BinaryOperator
    {
        And,
        Or,
    }

    [DataContract]
    public partial class FilterGroup
    {
        public FilterGroup()
        {
            FilterGroups = new List<FilterGroup>{};
            Filters = new List<Filter>{};
        }

        ///<summary>
        ///The binary operator joining the condition together
        ///</summary>
        [DataMember]
        [ApiMember(Description="The binary operator joining the condition together")]
        public virtual BinaryOperator BinaryOperator { get; set; }

        ///<summary>
        ///The nested filter groups
        ///</summary>
        [DataMember]
        [ApiMember(Description="The nested filter groups")]
        public virtual List<FilterGroup> FilterGroups { get; set; }

        ///<summary>
        ///The nested filters
        ///</summary>
        [DataMember]
        [ApiMember(Description="The nested filters")]
        public virtual List<Filter> Filters { get; set; }

        ///<summary>
        ///If the operation is negate
        ///</summary>
        [DataMember]
        [ApiMember(Description="If the operation is negate")]
        public virtual bool Not { get; set; }
    }

    [DataContract]
    public enum Operator
    {
        Equals,
        GreaterThan,
        GreaterThanOrEqual,
        LessThan,
        LessThanOrEqual,
        Matches,
        In,
        Custom,
        InOrderedList,
    }

    [DataContract]
    public partial class Query
    {
        public Query()
        {
            Sortings = new List<QuerySorting>{};
        }

        ///<summary>
        ///Whether the result must be unique
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the result must be unique")]
        public virtual bool DistinctResults { get; set; }

        ///<summary>
        ///The filtering condition of the query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The filtering condition of the query")]
        public virtual FilterGroup Filter { get; set; }

        ///<summary>
        ///Whether the total number of records is calculated
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the total number of records is calculated")]
        public virtual bool IncludeTotalCount { get; set; }

        ///<summary>
        ///Maximum number of returned items
        ///</summary>
        [DataMember]
        [ApiMember(Description="Maximum number of returned items")]
        public virtual int? MaximumItems { get; set; }

        ///<summary>
        ///the sorting parameter of the query
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sorting parameter of the query")]
        public virtual List<QuerySorting> Sortings { get; set; }

        ///<summary>
        ///the starting index of the query
        ///</summary>
        [DataMember]
        [ApiMember(Description="the starting index of the query")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///the included hierarchy
        ///</summary>
        [DataMember]
        [ApiMember(Description="the included hierarchy")]
        public virtual string IncludedHierarchy { get; set; }

        ///<summary>
        ///The maximum hierarchy depth
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum hierarchy depth")]
        public virtual int HierarchyDepth { get; set; }
    }

    [DataContract(Name="QueryCountResult")]
    public partial class QueryCountResult
    {
        ///<summary>
        ///The total number of records available. If the service request is using paging, this should be used to calculate the number of pages of data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total number of records available. If the service request is using paging, this should be used to calculate the number of pages of data.")]
        public virtual int TotalCount { get; set; }
    }

    [DataContract(Name="QueryResultOf{0}")]
    public partial class QueryResult<T>
    {
        public QueryResult()
        {
            Results = new List<T>{};
        }

        ///<summary>
        ///The current results. If the service request uses paging, this will be one page of items.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The current results. If the service request uses paging, this will be one page of items.")]
        public virtual List<T> Results { get; set; }

        ///<summary>
        ///The total number of records available. If the service request is using paging, this should be used to calculate the number of pages of data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total number of records available. If the service request is using paging, this should be used to calculate the number of pages of data.")]
        public virtual int TotalCount { get; set; }
    }

    [DataContract]
    public partial class QuerySorting
    {
        ///<summary>
        ///the sorting direction
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sorting direction")]
        public virtual SortDirection Direction { get; set; }

        ///<summary>
        ///the name of the property to be sorted
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the property to be sorted")]
        public virtual string PropertyName { get; set; }
    }

    [DataContract]
    public enum SortDirection
    {
        Ascending,
        Descending,
    }
}

namespace Orckestra.Overture.ServiceModel.RecurringOrders
{

    public partial class AuditableEntityBase
    {
        ///<summary>
        ///The date of the creation of the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date of the creation of the entity", IsRequired=true)]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The date of the last modification
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date of the last modification", IsRequired=true)]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The id of the person who created the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the person who created the entity", IsRequired=true)]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///The id of the last person who modified the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the last person who modified the entity", IsRequired=true)]
        public virtual string LastModifiedBy { get; set; }
    }

    [DataContract]
    public partial class RecurringOrderFrequency
    {
        public RecurringOrderFrequency()
        {
            Localizations = new List<RecurringOrderFrequencyLocalize>{};
        }

        ///<summary>
        ///The recurring order frequency name
        ///</summary>
        [DataMember]
        [ApiMember(Description="The recurring order frequency name", IsRequired=true)]
        public virtual string RecurringOrderFrequencyName { get; set; }

        ///<summary>
        ///The sequence number used to order the frequencies
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sequence number used to order the frequencies", IsRequired=true)]
        public virtual int SequenceNumber { get; set; }

        ///<summary>
        ///The number of days for the recurring order frequency
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of days for the recurring order frequency", IsRequired=true)]
        public virtual int NumberOfDays { get; set; }

        ///<summary>
        ///The localized name of the recurring order frequencies
        ///</summary>
        [DataMember]
        [ApiMember(Description="The localized name of the recurring order frequencies", IsRequired=true)]
        public virtual List<RecurringOrderFrequencyLocalize> Localizations { get; set; }
    }

    [DataContract]
    public partial class RecurringOrderFrequencyLocalize
    {
        ///<summary>
        ///The culture
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture", IsRequired=true)]
        public virtual string CultureIso { get; set; }

        ///<summary>
        ///The display name
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name", IsRequired=true)]
        public virtual string DisplayName { get; set; }
    }

    [DataContract]
    public partial class RecurringOrderLineItem
        : AuditableEntityBase
    {
        ///<summary>
        ///The recurring order line item id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The recurring order line item id", IsRequired=true)]
        public virtual Guid RecurringOrderLineItemId { get; set; }

        ///<summary>
        ///The scope of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope of the recurring order line item", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The customer id of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer id of the recurring order line item", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The product display name of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The product display name of the recurring order line item", IsRequired=true)]
        public virtual string ProductDisplayName { get; set; }

        ///<summary>
        ///The product name of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The product name of the recurring order line item", IsRequired=true)]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The variant name of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The variant name of the recurring order line item")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///The sku of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sku of the recurring order line item", IsRequired=true)]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The quantity of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantity of the recurring order line item", IsRequired=true)]
        public virtual double Quantity { get; set; }

        ///<summary>
        ///The tag of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tag of the recurring order line item")]
        public virtual string Tag { get; set; }

        ///<summary>
        ///The name of the recurring order program of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the recurring order program of the recurring order line item", IsRequired=true)]
        public virtual string RecurringOrderProgramName { get; set; }

        ///<summary>
        ///The name of the recurring order frequency of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the recurring order frequency of the recurring order line item", IsRequired=true)]
        public virtual string RecurringOrderFrequencyName { get; set; }

        ///<summary>
        ///The previous occurence of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The previous occurence of the recurring order line item")]
        public virtual DateTime? PreviousOccurence { get; set; }

        ///<summary>
        ///The next occurence of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The next occurence of the recurring order line item", IsRequired=true)]
        public virtual DateTime NextOccurence { get; set; }

        ///<summary>
        ///The shipping address id of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipping address id of the recurring order line item", IsRequired=true)]
        public virtual Guid ShippingAddressId { get; set; }

        ///<summary>
        ///The billing address id of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The billing address id of the recurring order line item", IsRequired=true)]
        public virtual Guid BillingAddressId { get; set; }

        ///<summary>
        ///The payment method id of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment method id of the recurring order line item", IsRequired=true)]
        public virtual Guid PaymentMethodId { get; set; }

        ///<summary>
        ///The payment method provider name of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment method provider name of the recurring order line item", IsRequired=true)]
        public virtual string PaymentProviderName { get; set; }

        ///<summary>
        ///The shipping provider id of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipping provider id of the recurring order line item", IsRequired=true)]
        public virtual Guid ShippingProviderId { get; set; }

        ///<summary>
        ///The fulfillment method name of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment method name of the recurring order line item", IsRequired=true)]
        public virtual string FulfillmentMethodName { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class RecurringOrderProgram
        : AuditableEntityBase
    {
        public RecurringOrderProgram()
        {
            Localizations = new List<RecurringOrderProgramLocalize>{};
            ScopeIds = new List<string>{};
            Frequencies = new List<RecurringOrderFrequency>{};
        }

        ///<summary>
        ///The name and unique identifier of the recurring order program
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name and unique identifier of the recurring order program", IsRequired=true)]
        public virtual string RecurringOrderProgramName { get; set; }

        ///<summary>
        ///The localized name of the recurring order program
        ///</summary>
        [DataMember]
        [ApiMember(Description="The localized name of the recurring order program")]
        public virtual List<RecurringOrderProgramLocalize> Localizations { get; set; }

        ///<summary>
        ///The scope ids which are associated to the recurring order program
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope ids which are associated to the recurring order program")]
        public virtual List<string> ScopeIds { get; set; }

        ///<summary>
        ///The frequencies of the recurring order program
        ///</summary>
        [DataMember]
        [ApiMember(Description="The frequencies of the recurring order program")]
        public virtual List<RecurringOrderFrequency> Frequencies { get; set; }
    }

    [DataContract]
    public partial class RecurringOrderProgramLocalize
    {
        ///<summary>
        ///The culture
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture", IsRequired=true)]
        public virtual string CultureIso { get; set; }

        ///<summary>
        ///The display name
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name", IsRequired=true)]
        public virtual string DisplayName { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Relationships
{

    [DataContract]
    public partial class CreateRelationshipsResult
    {
        ///<summary>
        ///Defines the count of relationships created
        ///</summary>
        [DataMember]
        [ApiMember(Description="Defines the count of relationships created")]
        public virtual int Count { get; set; }
    }

    [DataContract]
    public partial class RelationshipEntity
    {
        ///<summary>
        ///Entity identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="Entity identifier")]
        public virtual string EntityId { get; set; }

        ///<summary>
        ///Parent identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="Parent identifier")]
        public virtual string ParentId { get; set; }
    }

    [DataContract]
    public enum RelationshipEntityType
    {
        Category,
        Product,
    }
}

namespace Orckestra.Overture.ServiceModel.Reporting
{

    [DataContract]
    public partial class Report
    {
        ///<summary>
        ///The unique identifier of the report
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the report")]
        public virtual string ReportId { get; set; }

        ///<summary>
        ///The name of the report
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the report")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The type of the report
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the report")]
        public virtual string ReportType { get; set; }

        ///<summary>
        ///The description of the report
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the report")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The display name of the report
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name of the report")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///The category of the report
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category of the report")]
        public virtual string Category { get; set; }
    }

    [DataContract]
    public enum ReportExportType
    {
        Excel,
        Csv,
        Xml,
        Html,
        Image,
        Word,
        Pdf,
    }

    [DataContract]
    public partial class ReportParameter
    {
        public ReportParameter()
        {
            ValidValues = new List<ReportParameterValue>{};
            DefaultValues = new string[]{};
        }

        ///<summary>
        ///internal name of the parameter
        ///</summary>
        [DataMember]
        [ApiMember(Description="internal name of the parameter")]
        public virtual string Name { get; set; }

        ///<summary>
        ///text to be display to the user
        ///</summary>
        [DataMember]
        [ApiMember(Description="text to be display to the user")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///availables values for a list
        ///</summary>
        [DataMember]
        [ApiMember(Description="availables values for a list")]
        public virtual List<ReportParameterValue> ValidValues { get; set; }

        ///<summary>
        ///behavior of a list
        ///</summary>
        [DataMember]
        [ApiMember(Description="behavior of a list")]
        public virtual bool MultiValue { get; set; }

        ///<summary>
        ///default value(s)
        ///</summary>
        [DataMember]
        [ApiMember(Description="default value(s)")]
        public virtual string[] DefaultValues { get; set; }

        ///<summary>
        ///required state of the parameter
        ///</summary>
        [DataMember]
        [ApiMember(Description="required state of the parameter")]
        public virtual bool Required { get; set; }

        ///<summary>
        ///value that informs the UI to refresh all the parameters when this parameter changes
        ///</summary>
        [DataMember]
        [ApiMember(Description="value that informs the UI to refresh all the parameters when this parameter changes")]
        public virtual bool CausesParametersRefresh { get; set; }

        ///<summary>
        ///value that informs the UI about the type of this parameter
        ///</summary>
        [DataMember]
        [ApiMember(Description="value that informs the UI about the type of this parameter")]
        public virtual ReportParameterType ParameterType { get; set; }
    }

    [DataContract]
    public enum ReportParameterType
    {
        String,
        DateTime,
        Boolean,
        Integer,
        Float,
        List,
        ListTypeahead,
        Scope,
    }

    [DataContract]
    public partial class ReportParameterValue
    {
        ///<summary>
        ///internal name of the parameter
        ///</summary>
        [DataMember]
        [ApiMember(Description="internal name of the parameter")]
        public virtual string Name { get; set; }

        ///<summary>
        ///value of the parameter
        ///</summary>
        [DataMember]
        [ApiMember(Description="value of the parameter")]
        public virtual string Value { get; set; }

        ///<summary>
        ///value of the parameter that will be used in the logs
        ///</summary>
        [DataMember]
        [ApiMember(Description="value of the parameter that will be used in the logs")]
        public virtual string DisplayValue { get; set; }

        ///<summary>
        ///the type of this parameter
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of this parameter")]
        public virtual ReportParameterType ParameterType { get; set; }
    }

    [DataContract]
    public partial class ReportPreview
    {
        public ReportPreview()
        {
            Content = new byte[]{};
        }

        ///<summary>
        ///The first page of the report in PNG format
        ///</summary>
        [DataMember]
        [ApiMember(Description="The first page of the report in PNG format")]
        public virtual byte[] Content { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests
{

    ///<summary>
    ///Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.
    ///</summary>
    [Route("/countries", "POST")]
    [Api(Description="Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [ApiResponse(Description="The specified country was not found.", StatusCode=404)]
    [DataContract]
    public partial class AddCountryRequest
        : IReturn<Country>, IPost
    {
        ///<summary>
        ///The official political name given for the Country
        ///</summary>
        [DataMember]
        [ApiMember(Description="The official political name given for the Country")]
        public virtual LocalizedString Name { get; set; }

        ///<summary>
        ///The number used for ordering the Country in a list
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number used for ordering the Country in a list")]
        public virtual int SortOrder { get; set; }

        ///<summary>
        ///Two letter code that identifies Country uniquely (ISO 3166)
        ///</summary>
        [DataMember]
        [ApiMember(Description="Two letter code that identifies Country uniquely (ISO 3166)", IsRequired=true)]
        public virtual string IsoCode { get; set; }

        ///<summary>
        ///The Country's postal code validation regular expression
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Country's postal code validation regular expression")]
        public virtual string PostalCodeRegex { get; set; }

        ///<summary>
        ///The Country's telephone validation regular expression
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Country's telephone validation regular expression")]
        public virtual string PhoneRegex { get; set; }

        ///<summary>
        ///The indicator specifying if the Country is supported by the merchant
        ///</summary>
        [DataMember]
        [ApiMember(Description="The indicator specifying if the Country is supported by the merchant")]
        public virtual bool IsSupported { get; set; }
    }

    ///<summary>
    ///Scopes are entities that allow you to organize and search data and settings for a given market.
    ///</summary>
    [Route("/scopes/{ScopeId}", "POST")]
    [Api(Description="Scopes are entities that allow you to organize and search data and settings for a given market.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateScopeRequest
        : IReturn<Scope>, IPost
    {
        ///<summary>
        ///The unique identifier of the scope to create.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the scope to create.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The currency iso code of the scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The currency iso code of the scope.")]
        public virtual string CurrencyIso { get; set; }

        ///<summary>
        ///The parent scope id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The parent scope id.")]
        public virtual string ParentScopeId { get; set; }

        ///<summary>
        ///The type of the scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the scope.")]
        public virtual ScopeType ScopeType { get; set; }

        ///<summary>
        ///The default culture of the scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default culture of the scope.")]
        public virtual string DefaultCulture { get; set; }

        ///<summary>
        ///The name of the scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the scope.")]
        public virtual LocalizedString Name { get; set; }

        ///<summary>
        ///The description of the scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the scope.")]
        public virtual LocalizedString Description { get; set; }
    }

    ///<summary>
    ///Scopes are entities that allow you to organize and search data and settings for a given market.
    ///</summary>
    [Route("/scopes/{ScopeId}", "DELETE")]
    [Api(Description="Scopes are entities that allow you to organize and search data and settings for a given market.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteScopeRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The unique identifier of the scope to delete.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the scope to delete.")]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Time zones.
    ///</summary>
    [Route("/timezones/convert", "POST")]
    [Api(Description="Time zones.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindUtcOffsetForTimeZoneRequest
        : IReturn<UtcOffsetForTimeZone>, IPost
    {
        ///<summary>
        ///The date and time that will be converted
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date and time that will be converted")]
        public virtual DateTime UtcDateTime { get; set; }

        ///<summary>
        ///The specific destination time zone id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The specific destination time zone id")]
        public virtual string TimeZoneId { get; set; }
    }

    ///<summary>
    ///Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.
    ///</summary>
    [Route("/cultures/all", "GET")]
    [Api(Description="Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class GetAllCulturesRequest
        : IReturn<CultureList>, IGet
    {
    }

    ///<summary>
    ///Catalogs are entities which represents markets and buyable Products organized in Categories.
    ///</summary>
    [Route("/catalogs/closestlanguage/{CatalogId}/{Language}", "GET")]
    [Api(Description="Catalogs are entities which represents markets and buyable Products organized in Categories.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class GetClosestCatalogLanguageRequest
        : IReturn<string>, IGet
    {
        ///<summary>
        ///The requested language
        ///</summary>
        [DataMember]
        [ApiMember(Description="The requested language")]
        public virtual string Language { get; set; }

        ///<summary>
        ///The ID of the catalog
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ID of the catalog")]
        public virtual string CatalogId { get; set; }
    }

    ///<summary>
    ///Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.
    ///</summary>
    [Route("/countries", "GET")]
    [Api(Description="Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class GetCountriesRequest
        : IReturn<List<Country>>, IGet
    {
        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///Whether to include the unsupported countries
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether to include the unsupported countries")]
        public virtual bool IncludeUnsupported { get; set; }

        ///<summary>
        ///Whether to include the regions in each country
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether to include the regions in each country")]
        public virtual bool IncludeRegions { get; set; }
    }

    ///<summary>
    ///Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.
    ///</summary>
    [Route("/countries/{CountryIsoCode}", "GET")]
    [Api(Description="Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [ApiResponse(Description="The specified country was not found.", StatusCode=404)]
    [DataContract]
    public partial class GetCountryRequest
        : IReturn<Country>, IGet
    {
        ///<summary>
        ///The countryIsoCode (unique) that identifies the country to retrieve
        ///</summary>
        [DataMember]
        [ApiMember(Description="The countryIsoCode (unique) that identifies the country to retrieve", IsRequired=true)]
        public virtual string CountryIsoCode { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///Whether to include the regions in each country
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether to include the regions in each country")]
        public virtual bool IncludeRegions { get; set; }
    }

    ///<summary>
    ///This can be used to retrieve security token for guest customer.
    ///</summary>
    [Route("/token/customer/guest", "GET")]
    [Api(Description="This can be used to retrieve security token for guest customer.")]
    [ApiResponse(Description="Validation error.", StatusCode=422)]
    [DataContract]
    public partial class GetGuestTokenRequest
        : IReturn<Token>, IGet
    {
        ///<summary>
        ///The expiry date of the token. It must be in the future.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expiry date of the token. It must be in the future.")]
        public virtual DateTime ExpiryDate { get; set; }
    }

    ///<summary>
    ///Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.
    ///</summary>
    [Route("/countries/{CountryIsoCode}/regions", "GET")]
    [Api(Description="Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [ApiResponse(Description="Requested country iso code not found", StatusCode=404)]
    [DataContract]
    public partial class GetRegionsRequest
        : IReturn<List<Region>>, IGet
    {
        ///<summary>
        ///The unique countryIsoCode that identifies the country whose regions will be retrieved
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique countryIsoCode that identifies the country whose regions will be retrieved", IsRequired=true)]
        public virtual string CountryIsoCode { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///Whether to include the unsupported regions
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether to include the unsupported regions")]
        public virtual bool IncludeUnsupported { get; set; }
    }

    ///<summary>
    ///Scopes are entities that allow you to organize and search data and settings for a given market.
    ///</summary>
    [Route("/scopes/{ScopeId}/children", "GET")]
    [Api(Description="Scopes are entities that allow you to organize and search data and settings for a given market.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="Requested scope id not found", StatusCode=404)]
    [DataContract]
    public partial class GetScopeChildrenRequest
        : IReturn<List<Scope>>, IGet
    {
        ///<summary>
        ///The id of the requested scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the requested scope.", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///Whether to include the associated currency
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether to include the associated currency")]
        public virtual bool IncludeCurrency { get; set; }
    }

    ///<summary>
    ///Scopes are entities that allow you to organize and search data and settings for a given market.
    ///</summary>
    [Route("/scopes/{ScopeId}", "GET")]
    [Api(Description="Scopes are entities that allow you to organize and search data and settings for a given market.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="Requested scope id not found", StatusCode=404)]
    [DataContract]
    public partial class GetScopeRequest
        : IReturn<Scope>, IGet
    {
        ///<summary>
        ///The id of the requested scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the requested scope.", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The culture name in which language tha data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///Whether to include the entire scope map
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether to include the entire scope map")]
        public virtual bool IncludeChildren { get; set; }

        ///<summary>
        ///Whether to include the associated currency
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether to include the associated currency")]
        public virtual bool IncludeCurrency { get; set; }
    }

    ///<summary>
    ///Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.
    ///</summary>
    [Route("/cultures", "GET")]
    [Api(Description="Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class GetSupportedCulturesRequest
        : IReturn<List<Culture>>, IGet
    {
    }

    ///<summary>
    ///Time zones.
    ///</summary>
    [Route("/timezones", "GET")]
    [Api(Description="Time zones.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetTimeZonesRequest
        : IReturn<List<TimeZone>>, IGet
    {
    }

    ///<summary>
    ///This can be used to retrieve security token for guest customer.
    ///</summary>
    [Route("/token", "POST")]
    [Api(Description="This can be used to retrieve security token for guest customer.")]
    [ApiResponse(Description="Validation error.", StatusCode=422)]
    [DataContract]
    public partial class GetTokenRequest
        : ScopedRequest, IReturn<Token>, IPost
    {
        public GetTokenRequest()
        {
            PropertyBag = new Dictionary<string, string>{};
        }

        ///<summary>
        ///The name of the token
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the token")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The type of token
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of token")]
        public virtual string Type { get; set; }

        ///<summary>
        ///The expiry date of the token. It must be in the future.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expiry date of the token. It must be in the future.")]
        public virtual DateTime ExpiryDate { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual Dictionary<string, string> PropertyBag { get; set; }
    }

    public partial interface IDurableTaskRequest
    {
        Guid CorrelationId { get; set; }
    }

    public partial interface IPagedRequest
    {
        int StartingIndex { get; set; }
        int MaximumItems { get; set; }
    }

    [DataContract]
    public partial class ScopedRequest
    {
        ///<summary>
        ///The id of the requested scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the requested scope")]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.
    ///</summary>
    [Route("/cultures/default", "PUT")]
    [Api(Description="Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class SetDefaultCultureRequest
        : IReturnVoid, IPut
    {
        ///<summary>
        ///The ISO code of the default culture
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ISO code of the default culture")]
        public virtual string CultureIso { get; set; }
    }

    ///<summary>
    ///Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.
    ///</summary>
    [Route("/cultures", "PUT")]
    [Api(Description="Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class SetSupportedCulturesRequest
        : IReturnVoid, IPut
    {
        public SetSupportedCulturesRequest()
        {
            CultureIsoCodes = new List<string>{};
        }

        ///<summary>
        ///The list of supported cultures (represented as ISO codes) to be saved
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of supported cultures (represented as ISO codes) to be saved")]
        public virtual List<string> CultureIsoCodes { get; set; }
    }

    ///<summary>
    ///Addresses are entities which are used as a billing or shipping address for a cart or an order.
    ///</summary>
    [Route("/addresses/{AddressId}", "PUT")]
    [Api(Description="Addresses are entities which are used as a billing or shipping address for a cart or an order.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateAddressRequest
        : UpdateAddressRequestBase, IReturn<Address>, IPut
    {
        ///<summary>
        ///The type string of the entity (such as a customer) that owns the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type string of the entity (such as a customer) that owns the address.", IsRequired=true)]
        public virtual string RelatedEntityType { get; set; }

        ///<summary>
        ///The unique Id of the entity (such as a customer) that owns the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique Id of the entity (such as a customer) that owns the address.", IsRequired=true)]
        public virtual string RelatedEntityId { get; set; }
    }

    [DataContract]
    public partial class UpdateAddressRequestBase
    {
        ///<summary>
        ///Unique identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="Unique identifier")]
        public virtual Guid AddressId { get; set; }

        ///<summary>
        ///Name of the address. A customer cannot have two addresses with the same name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Name of the address. A customer cannot have two addresses with the same name.")]
        public virtual string AddressName { get; set; }

        ///<summary>
        ///City of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="City of the address")]
        public virtual string City { get; set; }

        ///<summary>
        ///2 letter country ISO code
        ///</summary>
        [DataMember]
        [ApiMember(Description="2 letter country ISO code")]
        public virtual string CountryCode { get; set; }

        ///<summary>
        ///2 letter region ISO code
        ///</summary>
        [DataMember]
        [ApiMember(Description="2 letter region ISO code")]
        public virtual string RegionCode { get; set; }

        ///<summary>
        ///First line of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="First line of the address")]
        public virtual string Line1 { get; set; }

        ///<summary>
        ///Second line of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Second line of the address")]
        public virtual string Line2 { get; set; }

        ///<summary>
        ///Resident first name
        ///</summary>
        [DataMember]
        [ApiMember(Description="Resident first name")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///Resident last name
        ///</summary>
        [DataMember]
        [ApiMember(Description="Resident last name")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///Phone number of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Phone number of the address")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///Phone extension of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Phone extension of the address")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///Postal code of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Postal code of the address")]
        public virtual string PostalCode { get; set; }

        ///<summary>
        ///Latitude coordinate of the Address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Latitude coordinate of the Address")]
        public virtual double? Latitude { get; set; }

        ///<summary>
        ///Longitude coordinate of the address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Longitude coordinate of the address")]
        public virtual double? Longitude { get; set; }

        ///<summary>
        ///Email
        ///</summary>
        [DataMember]
        [ApiMember(Description="Email")]
        public virtual string Email { get; set; }

        ///<summary>
        ///Notes
        ///</summary>
        [DataMember]
        [ApiMember(Description="Notes")]
        public virtual string Notes { get; set; }

        ///<summary>
        ///a boolean which specifies whether this address is the customer's preferred choice for Billing. (Only applicable to Customer addresses)
        ///</summary>
        [DataMember]
        [ApiMember(Description="a boolean which specifies whether this address is the customer's preferred choice for Billing. (Only applicable to Customer addresses)")]
        public virtual bool IsPreferredBilling { get; set; }

        ///<summary>
        ///a boolean which specifies whether this address is the customer's preferred choice for Shipping. (Only applicable to Customer addresses)
        ///</summary>
        [DataMember]
        [ApiMember(Description="a boolean which specifies whether this address is the customer's preferred choice for Shipping. (Only applicable to Customer addresses)")]
        public virtual bool IsPreferredShipping { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.
    ///</summary>
    [Route("/countries/{IsoCode}", "PUT")]
    [Api(Description="Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [ApiResponse(Description="The specified country was not found.", StatusCode=404)]
    [DataContract]
    public partial class UpdateCountryAndRegionsRequest
        : IReturn<Country>, IPut
    {
        public UpdateCountryAndRegionsRequest()
        {
            Regions = new List<Region>{};
        }

        ///<summary>
        ///The official political name given for the Country
        ///</summary>
        [DataMember]
        [ApiMember(Description="The official political name given for the Country")]
        public virtual LocalizedString Name { get; set; }

        ///<summary>
        ///The number used for ordering the Country in a list
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number used for ordering the Country in a list")]
        public virtual int SortOrder { get; set; }

        ///<summary>
        ///Two letter code that identifies Country uniquely (ISO 3166)
        ///</summary>
        [DataMember]
        [ApiMember(Description="Two letter code that identifies Country uniquely (ISO 3166)", IsRequired=true)]
        public virtual string IsoCode { get; set; }

        ///<summary>
        ///The Country's postal code validation regular expression
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Country's postal code validation regular expression")]
        public virtual string PostalCodeRegex { get; set; }

        ///<summary>
        ///The Country's telephone validation regular expression
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Country's telephone validation regular expression")]
        public virtual string PhoneRegex { get; set; }

        ///<summary>
        ///The indicator specifying if the Country is supported by the merchant
        ///</summary>
        [DataMember]
        [ApiMember(Description="The indicator specifying if the Country is supported by the merchant")]
        public virtual bool IsSupported { get; set; }

        ///<summary>
        ///The list of Region associated to the Country
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of Region associated to the Country")]
        public virtual List<Region> Regions { get; set; }
    }

    ///<summary>
    ///Addresses are entities which are used as a billing or shipping address for a cart or an order.
    ///</summary>
    [Route("/addresses/customer/{AddressId}", "PUT")]
    [Route("/addresses/customer/{CustomerId}/{AddressId}", "PUT")]
    [Api(Description="Addresses are entities which are used as a billing or shipping address for a cart or an order.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateCustomerAddressRequest
        : UpdateAddressRequestBase, IReturn<Address>, IPut
    {
        ///<summary>
        ///The customer identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer identifier.")]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Scopes are entities that allow you to organize and search data and settings for a given market.
    ///</summary>
    [Route("/scopes/{ScopeId}", "PUT")]
    [Api(Description="Scopes are entities that allow you to organize and search data and settings for a given market.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateScopeRequest
        : IReturn<Scope>, IPut
    {
        ///<summary>
        ///The unique identifier of the scope to create.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the scope to create.", ParameterType="path")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The parent scope id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The parent scope id.", ParameterType="model")]
        public virtual string ParentScopeId { get; set; }

        ///<summary>
        /// The end date of the scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description=" The end date of the scope.", ParameterType="model")]
        public virtual DateTime? EndDate { get; set; }

        ///<summary>
        ///The start date of the scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start date of the scope.", ParameterType="model")]
        public virtual DateTime? StartDate { get; set; }

        ///<summary>
        ///The value indicating whether or not the scope is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The value indicating whether or not the scope is active.", ParameterType="model")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The currency iso code of the scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The currency iso code of the scope.", ParameterType="model")]
        public virtual string CurrencyIso { get; set; }

        ///<summary>
        ///The name of the scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the scope.", ParameterType="model")]
        public virtual LocalizedString Name { get; set; }

        ///<summary>
        ///The description of the scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the scope.", ParameterType="model")]
        public virtual LocalizedString Description { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Administration
{

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/scheduled/{TaskGroup}/{TaskName}/triggers/{TriggerGroup}/{TriggerName}", "PUT")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class AddOrUpdateScheduledTaskTrigger
        : IReturn<ScheduledTaskInfo>, IPut
    {
        ///<summary>
        ///the name of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the scheduled job.")]
        public virtual string TaskName { get; set; }

        ///<summary>
        ///the affinity group of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the affinity group of the scheduled job.")]
        public virtual string TaskGroup { get; set; }

        ///<summary>
        ///the trigger name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the trigger name.")]
        public virtual string TriggerName { get; set; }

        ///<summary>
        ///the trigger affinity group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the trigger affinity group.")]
        public virtual string TriggerGroup { get; set; }

        ///<summary>
        ///the trigger description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the trigger description.")]
        public virtual string TriggerDescription { get; set; }

        ///<summary>
        ///the cron expression time zone.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cron expression time zone.")]
        public virtual string TriggerTimeZone { get; set; }

        ///<summary>
        ///the cron expression string.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cron expression string.")]
        public virtual string TriggerCronExpression { get; set; }
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/{TaskId}/cancel", "POST")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class CancelTaskRequest
        : IReturnVoid, IPost
    {
        ///<summary>
        ///The task identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task identifier.")]
        public virtual Guid TaskId { get; set; }
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/scheduled/all", "DELETE")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class DeleteAllScheduledTasksRequest
        : IReturnVoid, IDelete
    {
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/scheduled/{Group}/{Name}", "DELETE")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class DeleteScheduledTaskRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///the name of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the scheduled job.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the affinity group of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the affinity group of the scheduled job.")]
        public virtual string Group { get; set; }
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/{TaskId}", "DELETE")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class DeleteTaskInfoRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The task identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task identifier.")]
        public virtual Guid TaskId { get; set; }

        ///<summary>
        ///force delete task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="force delete task.")]
        public virtual bool Force { get; set; }
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/scheduled/all", "GET")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class GetAllScheduledTasksRequest
        : IReturn<List<ScheduledTaskInfo>>, IGet
    {
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks", "GET")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class GetRequesterTasksInfoRequest
        : IReturn<List<TaskInfo>>, IGet
    {
        public GetRequesterTasksInfoRequest()
        {
            FilterTaskNames = new string[]{};
        }

        ///<summary>
        ///The username of the user that requested the tasks.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The username of the user that requested the tasks.")]
        public virtual string Requester { get; set; }

        ///<summary>
        ///The last modification date of the task. Use this to limit the results to items after this date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The last modification date of the task. Use this to limit the results to items after this date")]
        public virtual DateTime? LastModified { get; set; }

        ///<summary>
        ///The array of task type names to filter by, if none specified, no filtering is performed. The type names are the fully qualified type names (Eg. Orckestra.Overture.Providers.CommerceEngine.Profiles.ProfileSchemaImportTask, Orckestra.Overture.Providers.CommerceEngine)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The array of task type names to filter by, if none specified, no filtering is performed. The type names are the fully qualified type names (Eg. Orckestra.Overture.Providers.CommerceEngine.Profiles.ProfileSchemaImportTask, Orckestra.Overture.Providers.CommerceEngine)")]
        public virtual string[] FilterTaskNames { get; set; }
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/scheduled/running", "GET")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class GetRunningScheduledTasksRequest
        : IReturn<List<RunningScheduledTaskInfo>>, IGet
    {
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/scheduled/{Group}/{Name}", "GET")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class GetScheduledTaskRequest
        : IReturn<ScheduledTaskInfo>, IGet
    {
        ///<summary>
        ///the name of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the scheduled job.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the affinity group of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the affinity group of the scheduled job.")]
        public virtual string Group { get; set; }
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/{TaskId}/logs", "GET")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class GetTaskExecutionLogsRequest
        : IReturn<List<TaskExecutionLogEntry>>, IGet
    {
        ///<summary>
        ///The task identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task identifier.")]
        public virtual Guid TaskId { get; set; }
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/{TaskId}", "GET")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class GetTaskInfoRequest
        : IReturn<TaskInfo>, IGet
    {
        ///<summary>
        ///The task identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task identifier.")]
        public virtual Guid TaskId { get; set; }
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/byCorrelationId/{Id}", "GET")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class GetTasksInfoByCorrelationIdRequest
        : IReturn<List<TaskInfo>>, IGet
    {
        ///<summary>
        ///The task correlation identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task correlation identifier")]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/activities/{TaskId}", "POST")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class QueueActivityTaskRequest
        : QueueTaskRequestBase, IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///The fully qualified name of the workflow activity type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fully qualified name of the workflow activity type.")]
        public virtual string ActivityTypeName { get; set; }
    }

    [DataContract]
    public partial class QueueTaskRequestBase
    {
        ///<summary>
        ///The task identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task identifier.")]
        public virtual Guid TaskId { get; set; }

        ///<summary>
        ///The task identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task identifier.")]
        public virtual string TaskName { get; set; }

        ///<summary>
        ///The correlation identifier allowing to regroup and retrieve various tasks together.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation identifier allowing to regroup and retrieve various tasks together.")]
        public virtual Guid CorrelationId { get; set; }

        ///<summary>
        ///The task input arguments.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task input arguments.")]
        public virtual PropertyBag Inputs { get; set; }

        ///<summary>
        ///Value indicating whether the task must be run in the specific sequence.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Value indicating whether the task must be run in the specific sequence.")]
        public virtual bool? IsSequential { get; set; }

        ///<summary>
        ///The name to identify the sequence that this task is part of. Tasks that must execute in sequence must share the same SequenceGroup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name to identify the sequence that this task is part of. Tasks that must execute in sequence must share the same SequenceGroup")]
        public virtual string SequenceGroup { get; set; }

        ///<summary>
        ///Value indicating what is the expected maximum sequence count.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Value indicating what is the expected maximum sequence count.")]
        public virtual int? SequenceQuota { get; set; }
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/workflows/{TaskId}", "POST")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class QueueWorkflowTaskRequest
        : QueueTaskRequestBase, IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///The relative path of the workflow xaml file.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The relative path of the workflow xaml file.")]
        public virtual string WorkflowName { get; set; }
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/scheduled/{TaskGroup}/{TaskName}/triggers/{TriggerGroup}/{TriggerName}", "DELETE")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class RemoveScheduledTaskTriggerRequest
        : IReturn<ScheduledTaskInfo>, IDelete
    {
        ///<summary>
        ///the name of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the scheduled job.")]
        public virtual string TaskName { get; set; }

        ///<summary>
        ///the affinity group of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the affinity group of the scheduled job.")]
        public virtual string TaskGroup { get; set; }

        ///<summary>
        ///the trigger name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the trigger name.")]
        public virtual string TriggerName { get; set; }

        ///<summary>
        ///the trigger affinity group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the trigger affinity group.")]
        public virtual string TriggerGroup { get; set; }
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/scheduled/activities/{Group}/{Name}", "POST")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class ScheduleTaskActivityRequest
        : ScheduleTaskRequestBase, IReturn<ScheduledTaskInfo>, IPost
    {
        ///<summary>
        ///The task activity type AssemblyQualifiedName.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task activity type AssemblyQualifiedName.", IsRequired=true)]
        public virtual string ActivityTypeFullName { get; set; }
    }

    [DataContract]
    public partial class ScheduleTaskRequestBase
    {
        public ScheduleTaskRequestBase()
        {
            CronTriggers = new List<CronTrigger>{};
        }

        ///<summary>
        ///the name of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the scheduled job.", IsRequired=true)]
        public virtual string Name { get; set; }

        ///<summary>
        ///The group affinity of the scheduled job.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The group affinity of the scheduled job.")]
        public virtual string Group { get; set; }

        ///<summary>
        ///The task input properties.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task input properties.")]
        public virtual PropertyBag Inputs { get; set; }

        ///<summary>
        ///The list of triggers that will fired the execution of the task activity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of triggers that will fired the execution of the task activity.", IsRequired=true)]
        public virtual List<CronTrigger> CronTriggers { get; set; }
    }

    ///<summary>
    ///Long running tasks perform batch processing.
    ///</summary>
    [Route("/tasks/scheduled/workflows/{Group}/{Name}", "POST")]
    [Api(Description="Long running tasks perform batch processing.")]
    [DataContract]
    public partial class ScheduleTaskWorkflowRequest
        : ScheduleTaskRequestBase, IReturn<ScheduledTaskInfo>, IPost
    {
        ///<summary>
        ///The task activity type AssemblyQualifiedName.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task activity type AssemblyQualifiedName.", IsRequired=true)]
        public virtual string WorkflowXamlRelativePath { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Authentication
{

    ///<summary>
    ///Performs authentication operations.
    ///</summary>
    [Route("/authentication/customer/signin", "POST")]
    [ApiResponse(Description="Invalid credentials", StatusCode=401)]
    [Api(Description="Performs authentication operations.")]
    [DataContract]
    public partial class CustomerSignInRequest
        : IReturn<Token>, IPost
    {
        ///<summary>
        ///The username of the user.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The username of the user.")]
        public virtual string UserName { get; set; }

        ///<summary>
        ///The password of the user.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The password of the user.")]
        public virtual string Password { get; set; }
    }

    ///<summary>
    ///Performs authentication operations.
    ///</summary>
    [Route("/authentication/fedsignoutreply", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Performs authentication operations.")]
    [DataContract]
    public partial class FederationSignoutReplyRequest
        : IReturn<IHttpResult>, IGet
    {
        ///<summary>
        ///the return URL.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the return URL.")]
        public virtual string ReturnUrl { get; set; }
    }

    ///<summary>
    ///Performs authentication operations.
    ///</summary>
    [Route("/authentication/configuration", "GET")]
    [Api(Description="Performs authentication operations.")]
    [DataContract]
    public partial class GetAuthenticationConfiguration
        : IReturn<AuthenticationConfiguration>, IGet
    {
    }

    ///<summary>
    ///Performs authentication operations.
    ///</summary>
    [Route("/authentication/status", "GET")]
    [Api(Description="Performs authentication operations.")]
    [DataContract]
    public partial class GetAuthenticationStatusRequest
        : IReturn<AuthenticatedStatus>, IGet
    {
    }

    ///<summary>
    ///Performs authentication operations.
    ///</summary>
    [Route("/authentication/profile", "GET")]
    [Api(Description="Performs authentication operations.")]
    [DataContract]
    public partial class GetUserPermissionsRequest
        : IReturn<UserPermissions>, IGet
    {
    }

    ///<summary>
    ///Performs authentication operations.
    ///</summary>
    [Route("/authentication/signin", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Performs authentication operations.")]
    [DataContract]
    public partial class SignInRequest
        : IReturn<IHttpResult>, IPost
    {
        ///<summary>
        ///the return URL.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the return URL.")]
        public virtual string ReturnUrl { get; set; }
    }

    ///<summary>
    ///Performs authentication operations.
    ///</summary>
    [Route("/authentication/signinwithcredentials", "POST")]
    [Api(Description="Performs authentication operations.")]
    [DataContract]
    public partial class SignInWithCredentialsRequest
        : IReturn<UserPermissions>, IPost
    {
        ///<summary>
        ///The userName.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The userName.")]
        public virtual string UserName { get; set; }

        ///<summary>
        ///The password.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password.")]
        public virtual string Password { get; set; }

        ///<summary>
        ///The application Identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The application Identifier.")]
        public virtual string ApplicationIdentifier { get; set; }
    }

    ///<summary>
    ///Performs authentication operations.
    ///</summary>
    [Route("/authentication/signinwithtoken", "POST")]
    [Api(Description="Performs authentication operations.")]
    [DataContract]
    public partial class SignInWithIssuedTokenRequest
        : IReturn<UserPermissions>, IPost
    {
        ///<summary>
        ///The token.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The token.")]
        public virtual string XmlToken { get; set; }
    }

    ///<summary>
    ///Performs authentication operations.
    ///</summary>
    [Route("/authentication/signinwithjwt", "POST")]
    [Api(Description="Performs authentication operations.")]
    [DataContract]
    public partial class SignInWithJWTRequest
        : IReturn<UserPermissions>, IPost
    {
        ///<summary>
        ///The JWT access token.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The JWT access token.")]
        public virtual string AccessToken { get; set; }
    }

    ///<summary>
    ///Performs authentication operations.
    ///</summary>
    [Route("/authentication/signout", "POST")]
    [Api(Description="Performs authentication operations.")]
    [DataContract]
    public partial class SignOutRequest
        : IReturn<string>, IPost
    {
        ///<summary>
        ///The return URL that should be specified to which the user should be redirected after signout.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The return URL that should be specified to which the user should be redirected after signout.")]
        public virtual string ReturnUrl { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Content
{

    ///<summary>
    ///Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.
    ///</summary>
    [Route("/templates/{ScopeId}/Variables/{Name}", "PUT")]
    [Api(Description="Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateOrUpdateTemplateVariableRequest
        : ScopedRequest, IReturn<TemplateVariable>, IPut
    {
        ///<summary>
        ///The template variable's name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template variable's name.", IsRequired=true)]
        [Required]
        [StringLength(50)]
        public virtual string Name { get; set; }

        ///<summary>
        ///The template variable's description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template variable's description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The template variable's value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The template variable's value.")]
        public virtual LocalizedString Value { get; set; }
    }

    ///<summary>
    ///Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.
    ///</summary>
    [Route("/templates/{ScopeId}/{Type}/{Name}", "POST")]
    [Api(Description="Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateTemplateRequest
        : ScopedRequest, IReturn<Template>, IPost
    {
        public CreateTemplateRequest()
        {
            Contents = new List<TemplateContent>{};
        }

        ///<summary>
        ///Template type to create
        ///</summary>
        [DataMember]
        [ApiMember(Description="Template type to create")]
        [Required]
        public virtual TemplateType Type { get; set; }

        ///<summary>
        ///Template name
        ///</summary>
        [DataMember]
        [ApiMember(Description="Template name")]
        [Required]
        public virtual string Name { get; set; }

        ///<summary>
        ///Template contents
        ///</summary>
        [DataMember]
        [ApiMember(Description="Template contents")]
        public virtual List<TemplateContent> Contents { get; set; }

        ///<summary>
        ///Template description
        ///</summary>
        [DataMember]
        [ApiMember(Description="Template description")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///Template display name
        ///</summary>
        [DataMember]
        [ApiMember(Description="Template display name")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///the current state of the template
        ///</summary>
        [DataMember]
        [ApiMember(Description="the current state of the template")]
        public virtual bool IsActive { get; set; }
    }

    ///<summary>
    ///Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.
    ///</summary>
    [Route("/templates/{ScopeId}/{Type}/{Name}", "DELETE")]
    [Api(Description="Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.")]
    [DataContract]
    public partial class DeleteTemplateRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///the name of the template
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the name of the template")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the type of the template
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the type of the template")]
        public virtual TemplateType Type { get; set; }
    }

    ///<summary>
    ///Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.
    ///</summary>
    [Route("/templates/{ScopeId}/Variables/{Name}", "DELETE")]
    [Api(Description="Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteTemplateVariableRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The name of the template variable to be deleted from the scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the template variable to be deleted from the scope.", IsRequired=true)]
        [Required]
        [StringLength(50)]
        public virtual string Name { get; set; }
    }

    ///<summary>
    ///Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.
    ///</summary>
    [Route("/templates/{ScopeId}/{Type}/{Name}", "GET")]
    [Api(Description="Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="The requested template was not found", StatusCode=404)]
    [DataContract]
    public partial class GetTemplateByNameRequest
        : ScopedRequest, IReturn<Template>, IGet
    {
        public GetTemplateByNameRequest()
        {
            Cultures = new List<string>{};
        }

        ///<summary>
        ///Name of the template to retrieve
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Name of the template to retrieve")]
        public virtual string Name { get; set; }

        ///<summary>
        ///Type of the template to retrieve
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Type of the template to retrieve")]
        public virtual TemplateType Type { get; set; }

        ///<summary>
        ///Determines whether the template content will be included with the result
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determines whether the template content will be included with the result")]
        public virtual bool IncludeContents { get; set; }

        ///<summary>
        ///List of cultures for which to retrieve the content
        ///</summary>
        [DataMember]
        [ApiMember(Description="List of cultures for which to retrieve the content")]
        public virtual List<string> Cultures { get; set; }

        ///<summary>
        ///Determines whether the result will include inactive templates
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determines whether the result will include inactive templates")]
        public virtual bool ActiveOnly { get; set; }

        ///<summary>
        ///Determines if the template variable tags will be replaced with their actual values.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determines if the template variable tags will be replaced with their actual values.")]
        public virtual bool ReplaceTemplateVariables { get; set; }
    }

    ///<summary>
    ///Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.
    ///</summary>
    [Route("/templates/{ScopeId}/{Type}", "GET")]
    [Api(Description="Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetTemplatesRequest
        : ScopedRequest, IReturn<List<Template>>, IGet
    {
        public GetTemplatesRequest()
        {
            Cultures = new List<string>{};
        }

        ///<summary>
        ///Template type to retrieve
        ///</summary>
        [DataMember]
        [ApiMember(Description="Template type to retrieve")]
        [Required]
        public virtual TemplateType Type { get; set; }

        ///<summary>
        ///Determines whether the template content will be included with the result
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determines whether the template content will be included with the result")]
        public virtual bool IncludeContents { get; set; }

        ///<summary>
        ///Determines whether the result will include inactive templates
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determines whether the result will include inactive templates")]
        public virtual bool ActiveOnly { get; set; }

        ///<summary>
        ///List of cultures for which to retrieve the content
        ///</summary>
        [DataMember]
        [ApiMember(Description="List of cultures for which to retrieve the content")]
        public virtual List<string> Cultures { get; set; }

        ///<summary>
        ///Determines if the template variable tags will be replaced with their actual values.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determines if the template variable tags will be replaced with their actual values.")]
        public virtual bool ReplaceTemplateVariables { get; set; }
    }

    ///<summary>
    ///Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.
    ///</summary>
    [Route("/templates/{ScopeId}/Variables", "GET")]
    [Api(Description="Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetTemplateVariablesRequest
        : ScopedRequest, IReturn<List<TemplateVariable>>, IGet
    {
    }

    ///<summary>
    ///Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.
    ///</summary>
    [Route("/templates/{ScopeId}/{Type}/{Name}/render", "POST")]
    [Api(Description="Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="The requested template was not found", StatusCode=404)]
    [DataContract]
    public partial class RenderTemplateRequest
        : ScopedRequest, IReturn<RenderTemplateResponse>, IPost
    {
        ///<summary>
        ///Name of the template to render
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Name of the template to render")]
        public virtual string Name { get; set; }

        ///<summary>
        ///Name of the content to render
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Name of the content to render")]
        public virtual string ContentName { get; set; }

        ///<summary>
        ///Type of the template to render
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Type of the template to render")]
        public virtual TemplateType Type { get; set; }

        ///<summary>
        ///The culture (language) name in which the data will be rendered. Will fallback to the system language or en-US if left blank or if the culture is not present for the contents.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture (language) name in which the data will be rendered. Will fallback to the system language or en-US if left blank or if the culture is not present for the contents.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The bag containing the values used to render the template.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing the values used to render the template.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class RenderTemplateResponse
    {
        ///<summary>
        ///The rendered template content.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The rendered template content.")]
        public virtual string Content { get; set; }
    }

    ///<summary>
    ///Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.
    ///</summary>
    [Route("/templates/{ScopeId}/{Type}/{Name}/{Culture}", "PUT")]
    [Api(Description="Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.")]
    [DataContract]
    public partial class UpdateTemplateRequest
        : ScopedRequest, IReturn<Template>, IPut
    {
        public UpdateTemplateRequest()
        {
            Contents = new Dictionary<string, string>{};
        }

        ///<summary>
        ///the name of the template
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the name of the template")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the display name of the template
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name of the template")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///the current state of the template
        ///</summary>
        [DataMember]
        [ApiMember(Description="the current state of the template")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///the description of the template
        ///</summary>
        [DataMember]
        [ApiMember(Description="the description of the template")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///the culture of the template
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the culture of the template")]
        public virtual string Culture { get; set; }

        ///<summary>
        ///the content of the template
        ///</summary>
        [DataMember]
        [ApiMember(Description="the content of the template")]
        public virtual Dictionary<string, string> Contents { get; set; }

        ///<summary>
        ///the type of the template
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the type of the template")]
        public virtual TemplateType Type { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Customers
{

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/addresses", "POST")]
    [Route("/customers/{ScopeId}/{CustomerId}/addresses", "POST")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [DataContract]
    public partial class AddAddressToCustomerRequest
        : ScopedRequest, IReturn<Address>, IPost
    {
        ///<summary>
        ///Customer unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Customer unique identifier.")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///Unique identifier of the new address (will be generated if not specified).
        ///</summary>
        [DataMember]
        [ApiMember(Description="Unique identifier of the new address (will be generated if not specified).")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The name of the address. A customer can not have two addresses with the same name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the address. A customer can not have two addresses with the same name.")]
        public virtual string AddressName { get; set; }

        ///<summary>
        ///The city of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The city of the address.")]
        public virtual string City { get; set; }

        ///<summary>
        ///2 letter country ISO code.
        ///</summary>
        [DataMember]
        [ApiMember(Description="2 letter country ISO code.")]
        public virtual string CountryCode { get; set; }

        ///<summary>
        ///2 letter region ISO code.
        ///</summary>
        [DataMember]
        [ApiMember(Description="2 letter region ISO code.")]
        public virtual string RegionCode { get; set; }

        ///<summary>
        ///The first line of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The first line of the address.")]
        public virtual string Line1 { get; set; }

        ///<summary>
        ///the second line of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the second line of the address.")]
        public virtual string Line2 { get; set; }

        ///<summary>
        ///The resident first name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The resident first name.")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///The resident last name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The resident last name.")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///The phone number of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The phone number of the address.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///The phone extension of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The phone extension of the address.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///The postal code of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The postal code of the address.")]
        public virtual string PostalCode { get; set; }

        ///<summary>
        ///Latitude coordinate of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Latitude coordinate of the address.")]
        public virtual double? Latitude { get; set; }

        ///<summary>
        ///Longitude coordinate of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Longitude coordinate of the address.")]
        public virtual double? Longitude { get; set; }

        ///<summary>
        ///The email address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The email address.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///The notes for the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The notes for the address.")]
        public virtual string Notes { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///A value which specifies if this address should be used as a shipping address in the case of multiple addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value which specifies if this address should be used as a shipping address in the case of multiple addresses.")]
        public virtual bool IsPreferredShipping { get; set; }

        ///<summary>
        ///A value which specifies if this address should be used as a billing address in the case of multiple addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value which specifies if this address should be used as a billing address in the case of multiple addresses.")]
        public virtual bool IsPreferredBilling { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/notes", "POST")]
    [Route("/customers/{ScopeId}/{CustomerId}/notes", "POST")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [DataContract]
    public partial class AddCustomerNoteRequest
        : ScopedRequest, IReturnVoid, IPost
    {
        ///<summary>
        ///The customer identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer identifier.")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///Note to add to the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Note to add to the customer.")]
        public virtual string Content { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/{PaymentProviderName}/paymentProfile", "POST")]
    [Route("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentProfile", "POST")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="Requested customer not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AddCustomerPaymentProfileRequest
        : ScopedRequest, IReturn<PaymentProfile>, IPost
    {
        ///<summary>
        ///Unique identifier of the new payment profile (will be generated if not specified).
        ///</summary>
        [DataMember]
        [ApiMember(Description="Unique identifier of the new payment profile (will be generated if not specified).")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The customer's unique identifier of the payment profile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer's unique identifier of the payment profile.")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The unique identifier of the provider related to the payment profile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the provider related to the payment profile.")]
        public virtual string PaymentProviderName { get; set; }

        ///<summary>
        ///The list of unique identifier returned by external provider related to the payment profile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of unique identifier returned by external provider related to the payment profile.")]
        public virtual string ExternalIds { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The store for wich the provider configuration is done.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store for wich the provider configuration is done.")]
        public virtual string OrderLocationId { get; set; }

        ///<summary>
        ///The value for overwriting the way pyment profile are added.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The value for overwriting the way pyment profile are added.")]
        public virtual bool AllowMultiplePaymentProfileOnProvider { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/organizations", "POST")]
    [Route("/customers/{ScopeId}/{CustomerId}/organizations", "POST")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [DataContract]
    public partial class AddOrganizationsToCustomerRequest
        : ScopedRequest, IReturnVoid, IPost
    {
        public AddOrganizationsToCustomerRequest()
        {
            AssociatedIds = new List<Guid>{};
        }

        ///<summary>
        ///The unique identifier for the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the customer.")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The list of unique identifiers of the organizations to associate.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of unique identifiers of the organizations to associate.")]
        public virtual List<Guid> AssociatedIds { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/settings/customer", "POST")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AddOrUpdateProfileSettingsRequest
        : IReturn<ProfileSettings>, IPost
    {
        public AddOrUpdateProfileSettingsRequest()
        {
            PropertyBag = new Dictionary<string, string>{};
        }

        ///<summary>
        ///The account lockdown time in minutes
        ///</summary>
        [DataMember]
        [ApiMember(Description="The account lockdown time in minutes")]
        public virtual int AccountLockDownMinutes { get; set; }

        ///<summary>
        ///The flag setting for allowing registered customers without membership (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The flag setting for allowing registered customers without membership (True or False)")]
        public virtual bool AllowRegisteredCustomersWithoutMembership { get; set; }

        ///<summary>
        ///The audit enabled flag (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The audit enabled flag (True or False)")]
        public virtual int AuditEnabled { get; set; }

        ///<summary>
        ///The automatic purging job logging loop wait time in milliseconds
        ///</summary>
        [DataMember]
        [ApiMember(Description="The automatic purging job logging loop wait time in milliseconds")]
        public virtual string AutomaticPurgingJobLoggingLoopWaitTimeInMs { get; set; }

        ///<summary>
        ///The automatic purging job logging number of days to keep data
        ///</summary>
        [DataMember]
        [ApiMember(Description="The automatic purging job logging number of days to keep data")]
        public virtual int AutomaticPurgingJobLoggingNumberOfDaysToKeepData { get; set; }

        ///<summary>
        ///The automatic purging job logging number of rows per batch to delete
        ///</summary>
        [DataMember]
        [ApiMember(Description="The automatic purging job logging number of rows per batch to delete")]
        public virtual int AutomaticPurgingJobLoggingNumberOfRowsPerBatchToDelete { get; set; }

        ///<summary>
        ///The customer search default option (e.g. Search)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer search default option (e.g. Search)")]
        public virtual string CustomerSearchDefaultOption { get; set; }

        ///<summary>
        ///The enable password reset flag
        ///</summary>
        [DataMember]
        [ApiMember(Description="The enable password reset flag")]
        public virtual bool EnablePasswordReset { get; set; }

        ///<summary>
        ///The enable password retrieval flag
        ///</summary>
        [DataMember]
        [ApiMember(Description="The enable password retrieval flag")]
        public virtual bool EnablePasswordRetrieval { get; set; }

        ///<summary>
        ///The encryption algorithm to use (e.g. DES). If null, an update will not overwrite the setting.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The encryption algorithm to use (e.g. DES). If null, an update will not overwrite the setting.")]
        public virtual string EncryptionAlgorithm { get; set; }

        ///<summary>
        ///The encryption key to use. If null, an update will not overwrite the setting.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The encryption key to use. If null, an update will not overwrite the setting.")]
        public virtual string EncryptionKey { get; set; }

        ///<summary>
        ///The encryption VI to use. If null, an update will not overwrite the setting.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The encryption VI to use. If null, an update will not overwrite the setting.")]
        public virtual string EncryptionVI { get; set; }

        ///<summary>
        ///The hash algorithm type to use (e.g. HMACSHA256). If null, an update will not overwrite the setting.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The hash algorithm type to use (e.g. HMACSHA256). If null, an update will not overwrite the setting.")]
        public virtual string HashAlgorithmType { get; set; }

        ///<summary>
        ///The hash key to use. If null, an update will not overwrite the setting.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The hash key to use. If null, an update will not overwrite the setting.")]
        public virtual string HashKey { get; set; }

        ///<summary>
        ///The maximum invalid password attempts before lockdown occurs
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum invalid password attempts before lockdown occurs")]
        public virtual int MaxInvalidPasswordAttempts { get; set; }

        ///<summary>
        ///The minimum required non alphanumeric characters required for passwords
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum required non alphanumeric characters required for passwords")]
        public virtual int MinRequiredNonAlphanumericCharacters { get; set; }

        ///<summary>
        ///The minimum required password length
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum required password length")]
        public virtual int MinRequiredPasswordLength { get; set; }

        ///<summary>
        ///The password attempt window (number of attempts)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password attempt window (number of attempts)")]
        public virtual int PasswordAttemptWindow { get; set; }

        ///<summary>
        ///The password failed attempt delay in seconds (e.g. 0.5)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password failed attempt delay in seconds (e.g. 0.5)")]
        public virtual double PasswordFailedAttemptDelaySeconds { get; set; }

        ///<summary>
        ///The password reset is auto-generate only flag (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password reset is auto-generate only flag (True or False)")]
        public virtual bool PasswordResetIsAutoGenerateOnly { get; set; }

        ///<summary>
        ///The password encryption salt size
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password encryption salt size")]
        public virtual int PasswordSaltSize { get; set; }

        ///<summary>
        ///The password strategy to use (e.g. Hashed)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password strategy to use (e.g. Hashed)")]
        public virtual string PasswordStrategy { get; set; }

        ///<summary>
        ///The password strength regular expression to use (can be null)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password strength regular expression to use (can be null)")]
        public virtual string PasswordStrengthRegularExpression { get; set; }

        ///<summary>
        ///The requires question and answer flag (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The requires question and answer flag (True or False)")]
        public virtual bool RequiresQuestionAndAnswer { get; set; }

        ///<summary>
        ///The requires unique Email flag (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The requires unique Email flag (True or False)")]
        public virtual bool RequiresUniqueEmail { get; set; }

        ///<summary>
        ///The token expiration in minutes
        ///</summary>
        [DataMember]
        [ApiMember(Description="The token expiration in minutes")]
        public virtual int TokenExpirationMinutes { get; set; }

        ///<summary>
        ///The use Email as username flag (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The use Email as username flag (True or False)")]
        public virtual bool UseEmailAsUsername { get; set; }

        ///<summary>
        ///The use longtext custom attribute flag (True or False)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The use longtext custom attribute flag (True or False)")]
        public virtual bool UseLongTextCustomAttribute { get; set; }

        ///<summary>
        ///The username and Email unique by scope (value is a scope, e.g. Global)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username and Email unique by scope (value is a scope, e.g. Global)")]
        public virtual string UsernameAndEmailUniqueByScope { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this command
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this command")]
        public virtual Dictionary<string, string> PropertyBag { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/stores", "POST")]
    [Route("/customers/{ScopeId}/{CustomerId}/stores", "POST")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [DataContract]
    public partial class AddStoresToCustomerRequest
        : ScopedRequest, IReturnVoid, IPost
    {
        public AddStoresToCustomerRequest()
        {
            AssociatedIds = new List<Guid>{};
        }

        ///<summary>
        ///The unique identifier for the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the customer.")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The list of unique identifiers of the stores to associate.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of unique identifiers of the stores to associate.")]
        public virtual List<Guid> AssociatedIds { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}", "POST")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class CreateCustomerRequest
        : IReturn<Customer>, IPost
    {
        public CreateCustomerRequest()
        {
            AddressIds = new List<Guid>{};
        }

        ///<summary>
        ///The current status of the customer account.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The current status of the customer account.")]
        public virtual AccountStatus AccountStatus { get; set; }

        ///<summary>
        ///The customer's addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer's addresses.")]
        public virtual List<Guid> AddressIds { get; set; }

        ///<summary>
        ///the date the customer was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the customer was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the date and time that the last modification was applied to the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date and time that the last modification was applied to the customer.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the email associated to the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email associated to the customer.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///the first name of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the first name of the customer.")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///the last name of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the last name of the customer.")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///the secret question for the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the secret question for the customer.")]
        public virtual string PasswordQuestion { get; set; }

        ///<summary>
        ///the extension, if any, for the telephone number of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension, if any, for the telephone number of the customer.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///the telephone number of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the telephone number of the customer.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///the type of customer (Registered, Guest).
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of customer (Registered, Guest).")]
        public virtual CustomerType CustomerType { get; set; }

        ///<summary>
        ///a string of character representing a unique name used for the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a string of character representing a unique name used for the customer.")]
        public virtual string Username { get; set; }

        ///<summary>
        ///the number for the cellular of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number for the cellular of the customer.")]
        public virtual string CellNumber { get; set; }

        ///<summary>
        ///the phone number at the work place of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the phone number at the work place of the customer.")]
        public virtual string PhoneNumberWork { get; set; }

        ///<summary>
        ///the extension, if any, for the work phone number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension, if any, for the work phone number.")]
        public virtual string PhoneExtensionWork { get; set; }

        ///<summary>
        ///the number to use for the customer fax.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number to use for the customer fax.")]
        public virtual string FaxNumber { get; set; }

        ///<summary>
        ///the extension, if any, for the customer fax.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension, if any, for the customer fax.")]
        public virtual string FaxExtension { get; set; }

        ///<summary>
        ///the preferred communication language of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the preferred communication language of the customer.")]
        public virtual string Language { get; set; }

        ///<summary>
        ///The unique identifier of the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the entity.")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The scope in which the customer belong.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope in which the customer belong.", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///updates custom profiles
        ///</summary>
        [DataMember]
        [ApiMember(Description="updates custom profiles")]
        public virtual ProfileOperations ProfileOperations { get; set; }
    }

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/{EntityTypeName}", "POST")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [DataContract]
    public partial class CreateCustomProfileRequest
        : ScopedRequest, IReturn<CustomProfile>, IPost
    {
        ///<summary>
        ///Unique name given to identify the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="Unique name given to identify the entity")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The sort order
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sort order")]
        public virtual int SequenceNumber { get; set; }

        ///<summary>
        ///Indicate whether this entity can be used in business processes or linked to a scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicate whether this entity can be used in business processes or linked to a scope")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///Entity type name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Entity type name.")]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///Date the entity was created
        ///</summary>
        [DataMember]
        [ApiMember(Description="Date the entity was created")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///Identifier of the operator who created the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="Identifier of the operator who created the entity")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///Date that the last modification was applied to the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="Date that the last modification was applied to the entity")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///Identifier of the operator who last modified the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="Identifier of the operator who last modified the entity")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///The unique identifier of the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the entity.")]
        public virtual Guid EntityId { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/{PaymentProviderName}/paymentMethods/{PaymentMethodId}", "DELETE")]
    [Route("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentMethods/{PaymentMethodId}", "DELETE")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [DataContract]
    public partial class DeleteCustomerPaymentMethodRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///the unique identifier of the Customer owning the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Customer owning the cart.", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///the name of the payment provider to use. If null, all methods will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the payment provider to use. If null, all methods will be returned", IsRequired=true)]
        public virtual string PaymentProviderName { get; set; }

        ///<summary>
        ///the unique identifier of the payment method to be removed
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the payment method to be removed", IsRequired=true)]
        public virtual Guid PaymentMethodId { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/integration/profiles/schema/export", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [DataContract]
    public partial class ExportProfileSchemaRequest
        : ScopedRequest, IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///the user name of the request initiator.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the user name of the request initiator.")]
        public virtual string RequestedBy { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/integration/profiles/export", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ExportProfilesRequest
        : IReturn<TaskInfo>, IPost
    {
        public ExportProfilesRequest()
        {
            ProfilesToExport = new string[]{};
        }

        ///<summary>
        ///The File path in the blob storage. (Optional)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The File path in the blob storage. (Optional)")]
        public virtual string FilePath { get; set; }

        ///<summary>
        ///The file format of the export, JSON or XML. If not set the export will be in JSON. (Optional)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The file format of the export, JSON or XML. If not set the export will be in JSON. (Optional)")]
        public virtual string FileFormat { get; set; }

        ///<summary>
        ///Profiles to export, if not set all profiles will be exported. (Optional)
        ///</summary>
        [DataMember]
        [ApiMember(Description="Profiles to export, if not set all profiles will be exported. (Optional)")]
        public virtual string[] ProfilesToExport { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }

        ///<summary>
        ///Indicates whether to exclude the deleted profiles.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether to exclude the deleted profiles.")]
        public virtual bool ExcludeDeletedProfiles { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/extractForIndexing", "POST")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ExtractCustomerInformationForIndexingRequest
        : ScopedRequest, IReturn<ExtractCustomerInformationForIndexingResponse>, IPost
    {
        public ExtractCustomerInformationForIndexingRequest()
        {
            CustomerIds = new Guid[]{};
        }

        ///<summary>
        ///The minimum "Last modification date" for filtering customers. When not specified or if CustomerIds are specified, filtering will not be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum \"Last modification date\" for filtering customers. When not specified or if CustomerIds are specified, filtering will not be applied.")]
        public virtual DateTime? LastModifiedSince { get; set; }

        ///<summary>
        ///The list of customer ids to retrieve. When not specified, no filtering by id will be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of customer ids to retrieve. When not specified, no filtering by id will be applied.")]
        public virtual Guid[] CustomerIds { get; set; }

        ///<summary>
        ///The starting index: the offset of the first record when requesting paged data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting index: the offset of the first record when requesting paged data.")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The number of items to return: the page size when requesting paged data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of items to return: the page size when requesting paged data.")]
        public virtual int? MaximumItems { get; set; }

        ///<summary>
        ///Indicates whether or not to include the customer's addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not to include the customer's addresses.")]
        public virtual bool IncludeAddresses { get; set; }

        ///<summary>
        ///Indicates whether or not to include the customer's organizations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not to include the customer's organizations.")]
        public virtual bool IncludeOrganizations { get; set; }

        ///<summary>
        ///Indicates whether or not to include the customer's stores.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not to include the customer's stores.")]
        public virtual bool IncludeStores { get; set; }

        ///<summary>
        ///Indicates whether or not to include the customer's payment profiles.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not to include the customer's payment profiles.")]
        public virtual bool IncludePaymentProfiles { get; set; }

        ///<summary>
        ///Indicates whether or not to include the customers' associated scopes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not to include the customers' associated scopes.")]
        public virtual bool IncludeAssociatedScopes { get; set; }
    }

    [DataContract]
    public partial class ExtractCustomerInformationForIndexingResponse
    {
        public ExtractCustomerInformationForIndexingResponse()
        {
            Customers = new List<CustomerIndexingInformation>{};
        }

        ///<summary>
        ///The list of customers.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of customers.")]
        public virtual List<CustomerIndexingInformation> Customers { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/find", "POST")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="No customers was found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class FindCustomersRequest
        : QueryRequestBase, IReturn<CustomerQueryResult>, IPost
    {
        ///<summary>
        ///The phrase to search for in the list of Customers.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The phrase to search for in the list of Customers.")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        ///The identifier of the filtering Scopes separated with comma.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the filtering Scopes separated with comma.")]
        public virtual string FilteringScopes { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/addresses", "GET")]
    [Route("/customers/{ScopeId}/{CustomerId}/addresses", "GET")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="Requested customer addresses not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerAddressesRequest
        : ScopedRequest, IReturn<List<Address>>, IGet
    {
        ///<summary>
        ///The unique identifier associated to the requested customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier associated to the requested customer", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/byUsername/{Username}", "GET")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="no customer has the username.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerByUsernameRequest
        : ScopedRequest, IReturn<Customer>, IGet
    {
        ///<summary>
        ///The username associated to the requested customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username associated to the requested customer", IsRequired=true)]
        public virtual string Username { get; set; }

        ///<summary>
        ///Specifies whether or not to fully load the collection of addresses linked to the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to fully load the collection of addresses linked to the customer.")]
        public virtual bool IncludeAddresses { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/byTicket", "GET")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="CustomerId decrypted in the ticket does not match with an existing customer or is not valid", StatusCode=400)]
    [DataContract]
    public partial class GetCustomerFromPasswordTicketRequest
        : IReturn<Customer>, IGet
    {
        ///<summary>
        ///The ticket
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ticket", IsRequired=true)]
        public virtual string Ticket { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/notes", "GET")]
    [Route("/customers/{ScopeId}/{CustomerId}/notes", "GET")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="Requested customer not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerNotesRequest
        : ScopedRequest, IReturn<List<Note>>, IGet
    {
        ///<summary>
        ///The unique identifier of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the customer.")]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/orders", "GET")]
    [Route("/customers/{ScopeId}/{CustomerId}/orders", "GET")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="Requested customer orders not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerOrderHistoryRequest
        : ScopedRequest, IReturn<OrderQueryResult>, IGet
    {
        ///<summary>
        ///The unique identifier associated to the requested customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier associated to the requested customer", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///Shows the orders after this date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Shows the orders after this date.")]
        public virtual DateTime OrdersCreatedAfter { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/organizations", "GET")]
    [Route("/customers/{ScopeId}/{CustomerId}/organizations", "GET")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="Requested customer not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerOrganizationsRequest
        : ScopedRequest, IReturn<List<Organization>>, IGet
    {
        ///<summary>
        ///The unique identifier of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the customer.")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether all addresses should be returned or only the first one. If False only one organization address will be returned using either IsPreferredBilling or IsPreferredShipping as priority. If True every organization addresses for the customer will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether all addresses should be returned or only the first one. If False only one organization address will be returned using either IsPreferredBilling or IsPreferredShipping as priority. If True every organization addresses for the customer will be returned")]
        public virtual bool IncludeAllAddresses { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/{PaymentProviderName}/paymentMethods", "GET")]
    [Route("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentMethods", "GET")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [DataContract]
    public partial class GetCustomerPaymentMethodsRequest
        : ScopedRequest, IReturn<List<PaymentMethod>>, IGet
    {
        ///<summary>
        ///the name of the payment provider to use
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the payment provider to use", IsRequired=true)]
        public virtual string PaymentProviderName { get; set; }

        ///<summary>
        ///the unique identifier of the Customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Customer", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/{PaymentProviderName}/paymentProfile", "GET")]
    [Route("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentProfile", "GET")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="Requested customer not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerPaymentProfileRequest
        : ScopedRequest, IReturn<PaymentProfile>, IGet
    {
        ///<summary>
        ///The unique identifier of the customer to retrieve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the customer to retrieve.")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The name of the payment provider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the payment provider.")]
        public virtual string PaymentProviderName { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/paymentProfiles", "GET")]
    [Route("/customers/{ScopeId}/{CustomerId}/paymentProfiles", "GET")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="Requested customer not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerPaymentProfilesRequest
        : ScopedRequest, IReturn<List<PaymentProfile>>, IGet
    {
        ///<summary>
        ///The unique identifier of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the customer.")]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}", "GET")]
    [Route("/customers/{ScopeId}/{CustomerId}", "GET")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="Requested customer not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerRequest
        : ScopedRequest, IReturn<Customer>, IGet
    {
        ///<summary>
        ///The unique id of the requested customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique id of the requested customer", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///Specifies whether or not to fully load the collection of addresses linked to the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to fully load the collection of addresses linked to the customer.")]
        public virtual bool IncludeAddresses { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/settings/customer", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetProfileSettingsRequest
        : IReturn<ProfileSettings>, IGet
    {
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/integration/profiles/schema/import", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [DataContract]
    public partial class ImportProfileSchemaRequest
        : ScopedRequest, IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///The path of the file(s) to be imported.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The path of the file(s) to be imported.")]
        public virtual string FileName { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/integration/profiles/import", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ImportProfilesRequest
        : IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///The File path in the blob storage. (Required)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The File path in the blob storage. (Required)")]
        public virtual string FilePath { get; set; }

        ///<summary>
        ///False to skip the prevalidation ( Default true)
        ///</summary>
        [DataMember]
        [ApiMember(Description="False to skip the prevalidation ( Default true)")]
        public virtual bool? PreValidate { get; set; }

        ///<summary>
        ///False to skip the import ( Default true)
        ///</summary>
        [DataMember]
        [ApiMember(Description="False to skip the import ( Default true)")]
        public virtual bool? ImportData { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    public partial interface IOperatingStatusInfoRequest
    {
        ///<summary>
        ///the operating status. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the operating status. This value is not loaded by default.")]
        OperatingStatus OperatingStatus { get; set; }
    }

    public partial interface ISchedulingInfoRequest
    {
        ///<summary>
        ///the opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the opening hours schedule. This value is not loaded by default.")]
        FulfillmentSchedule Schedule { get; set; }

        ///<summary>
        ///the pickup service opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the pickup service opening hours schedule. This value is not loaded by default.")]
        FulfillmentSchedule PickUpSchedule { get; set; }

        ///<summary>
        ///the delivery service opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the delivery service opening hours schedule. This value is not loaded by default.")]
        FulfillmentSchedule DeliverySchedule { get; set; }
    }

    [DataContract]
    public partial class ProfileOperationsRequest
        : ScopedRequest
    {
        ///<summary>
        ///updates custom profiles
        ///</summary>
        [DataMember]
        [ApiMember(Description="updates custom profiles")]
        public virtual ProfileOperations ProfileOperations { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/organizations", "DELETE")]
    [Route("/customers/{ScopeId}/{CustomerId}/organizations", "DELETE")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [DataContract]
    public partial class RemoveOrganizationsToCustomerRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        public RemoveOrganizationsToCustomerRequest()
        {
            AssociatedIds = new List<Guid>{};
        }

        ///<summary>
        ///The unique identifier for the customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the customer")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The list of unique identifier for the associated entities
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of unique identifier for the associated entities")]
        public virtual List<Guid> AssociatedIds { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/stores", "DELETE")]
    [Route("/customers/{ScopeId}/{CustomerId}/stores", "DELETE")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [DataContract]
    public partial class RemoveStoresFromCustomerRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        public RemoveStoresFromCustomerRequest()
        {
            AssociatedIds = new List<Guid>{};
        }

        ///<summary>
        ///The unique identifier for the customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the customer")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The list of unique identifier for the associated entities
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of unique identifier for the associated entities")]
        public virtual List<Guid> AssociatedIds { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/{PaymentProviderName}/paymentMethods/{PaymentMethodId}/default", "PUT")]
    [Route("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentMethods/{PaymentMethodId}/default", "PUT")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [DataContract]
    public partial class SetDefaultCustomerPaymentMethodRequest
        : ScopedRequest, IReturn<PaymentMethod>, IPut
    {
        ///<summary>
        ///the unique identifier of the customer owning the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the customer owning the cart.", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///the name of the payment provider to use. If null, all methods will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the payment provider to use. If null, all methods will be returned", IsRequired=true)]
        public virtual string PaymentProviderName { get; set; }

        ///<summary>
        ///the unique identifier of the payment method to set as default
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the payment method to set as default", IsRequired=true)]
        public virtual Guid PaymentMethodId { get; set; }

        ///<summary>
        ///whether the payment method is set to default or non-default
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether the payment method is set to default or non-default", IsRequired=true)]
        public virtual bool Default { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/{PaymentProviderName}/paymentProfile", "PUT")]
    [Route("/customers/{ScopeId}/{CustomerId}/{PaymentProviderName}/paymentProfile", "PUT")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="Requested customer not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateCustomerPaymentProfileRequest
        : ScopedRequest, IReturn<PaymentProfile>, IPut
    {
        ///<summary>
        ///Unique identifier of the new payment profile (will be generated if not specified).
        ///</summary>
        [DataMember]
        [ApiMember(Description="Unique identifier of the new payment profile (will be generated if not specified).")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The customer's unique identifier of the payment profile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer's unique identifier of the payment profile.")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The unique identifier of the provider related to the payment profile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the provider related to the payment profile.")]
        public virtual string PaymentProviderName { get; set; }

        ///<summary>
        ///The list of unique identifier returned by external provider related to the payment profile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of unique identifier returned by external provider related to the payment profile.")]
        public virtual string ExternalIds { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The store for wich the provider configuration is done.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store for wich the provider configuration is done.")]
        public virtual string OrderLocationId { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}", "PUT")]
    [Route("/customers/{ScopeId}/{CustomerId}", "PUT")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [DataContract]
    public partial class UpdateCustomerRequest
        : ProfileOperationsRequest, IReturn<Customer>, IPut
    {
        public UpdateCustomerRequest()
        {
            AddressIds = new List<Guid>{};
        }

        ///<summary>
        ///The current status (active/inactive/requires approval) of the customer account.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The current status (active/inactive/requires approval) of the customer account.")]
        public virtual AccountStatus AccountStatus { get; set; }

        ///<summary>
        ///TODO
        ///</summary>
        [DataMember]
        [ApiMember(Description="TODO")]
        public virtual List<Guid> AddressIds { get; set; }

        ///<summary>
        ///the date the customer was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the customer was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the date that the last modification was applied to the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date that the last modification was applied to the customer.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the email associated to the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email associated to the customer.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///the first name of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the first name of the customer.")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///the last name of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the last name of the customer.")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///the secret question for the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the secret question for the customer.")]
        public virtual string PasswordQuestion { get; set; }

        ///<summary>
        ///the extension, if any, for the telephone number of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension, if any, for the telephone number of the customer.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///the telephone number of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the telephone number of the customer.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///the type of customer (Registered, Guest).
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of customer (Registered, Guest).")]
        public virtual CustomerType CustomerType { get; set; }

        ///<summary>
        ///a string of character representing a unique name used for the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a string of character representing a unique name used for the customer.")]
        public virtual string Username { get; set; }

        ///<summary>
        ///the number for the cellular of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number for the cellular of the customer.")]
        public virtual string CellNumber { get; set; }

        ///<summary>
        ///the phone number at the work place of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the phone number at the work place of the customer.")]
        public virtual string PhoneNumberWork { get; set; }

        ///<summary>
        ///the extension, if any, for the work phone number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension, if any, for the work phone number.")]
        public virtual string PhoneExtensionWork { get; set; }

        ///<summary>
        ///the number to use for the customer fax.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number to use for the customer fax.")]
        public virtual string FaxNumber { get; set; }

        ///<summary>
        ///the extension, if any, for the customer fax.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension, if any, for the customer fax.")]
        public virtual string FaxExtension { get; set; }

        ///<summary>
        ///the preferred communication language of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the preferred communication language of the customer.")]
        public virtual string Language { get; set; }

        ///<summary>
        ///The unique identifier of the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the entity.")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/preferred/store", "PUT")]
    [Route("/customers/{ScopeId}/{CustomerId}/preferred/store", "PUT")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="Requested customer or store not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdatePreferredStoreRequest
        : ScopedRequest, IReturn<Customer>, IPut
    {
        ///<summary>
        ///The unique id of the customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique id of the customer", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The unique id of the store. Required when StoreNumber is empty. If both are provided, StoreId is used first and validates the match with StoreNumber.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique id of the store. Required when StoreNumber is empty. If both are provided, StoreId is used first and validates the match with StoreNumber.")]
        public virtual Guid StoreId { get; set; }

        ///<summary>
        ///The unique number of the store. Required when StoreId is empty. If both are provided, StoreId is used first and validates the match with StoreNumber.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique number of the store. Required when StoreId is empty. If both are provided, StoreId is used first and validates the match with StoreNumber.")]
        public virtual string StoreNumber { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Customers.Addresses
{

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/addresses/{AddressId}", "PUT")]
    [Route("/customers/{CustomerId}/addresses/{AddressId}", "PUT")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AddOrUpdateCustomerAddressRequest
        : UpdateAddressRequestBase, IReturn<Address>, IPut
    {
        ///<summary>
        ///The customer identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer identifier.")]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Addresses are entities which are used as a billing or shipping address for a cart or an order.
    ///</summary>
    [Route("/addresses/byIds/{Ids}", "GET")]
    [Api(Description="Addresses are entities which are used as a billing or shipping address for a cart or an order.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetAddressesByIdsRequest
        : IReturn<List<Address>>, IGet
    {
        public GetAddressesByIdsRequest()
        {
            Ids = new List<Guid>{};
        }

        ///<summary>
        ///The list of system-wide unique identifier for the Addresses to retrieve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of system-wide unique identifier for the Addresses to retrieve.", IsRequired=true)]
        [Required]
        public virtual List<Guid> Ids { get; set; }
    }

    ///<summary>
    ///Addresses are entities which are used as a billing or shipping address for a cart or an order.
    ///</summary>
    [Route("/addresses/{AddressId}", "GET")]
    [Api(Description="Addresses are entities which are used as a billing or shipping address for a cart or an order.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetAddressRequest
        : IReturn<Address>, IGet
    {
        ///<summary>
        ///The unique identifier of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the address.", IsRequired=true)]
        public virtual Guid AddressId { get; set; }
    }

    ///<summary>
    ///Addresses are entities which are used as a billing or shipping address for a cart or an order.
    ///</summary>
    [Route("/addresses/customer/{AddressId}", "GET")]
    [Route("/addresses/customer/{CustomerId}/{AddressId}", "GET")]
    [Api(Description="Addresses are entities which are used as a billing or shipping address for a cart or an order.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerAddressRequest
        : IReturn<Address>, IGet
    {
        ///<summary>
        ///The unique identifier of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the address.", IsRequired=true)]
        public virtual Guid AddressId { get; set; }

        ///<summary>
        ///The customer identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer identifier.")]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Addresses are entities which are used as a billing or shipping address for a cart or an order.
    ///</summary>
    [Route("/addresses/{AddressId}", "DELETE")]
    [Api(Description="Addresses are entities which are used as a billing or shipping address for a cart or an order.")]
    [DataContract]
    public partial class RemoveAddressRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The unique identifier of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the address.", IsRequired=true)]
        public virtual Guid AddressId { get; set; }
    }

    ///<summary>
    ///Addresses are entities which are used as a billing or shipping address for a cart or an order.
    ///</summary>
    [Route("/addresses/customer/{AddressId}", "DELETE")]
    [Route("/addresses/customer/{CustomerId}/{AddressId}", "DELETE")]
    [Api(Description="Addresses are entities which are used as a billing or shipping address for a cart or an order.")]
    [DataContract]
    public partial class RemoveCustomerAddressRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The unique identifier of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the address.", IsRequired=true)]
        public virtual Guid AddressId { get; set; }

        ///<summary>
        ///The customer identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer identifier.")]
        public virtual Guid CustomerId { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Customers.CustomProfiles
{

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/{EntityId}/addresses", "POST")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [DataContract]
    public partial class AddAddressToCustomProfileRequest
        : ScopedRequest, IReturn<Address>, IPost
    {
        ///<summary>
        ///The unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier.")]
        public virtual Guid EntityId { get; set; }

        ///<summary>
        ///The name of the custom type of the profile instance represented by this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the custom type of the profile instance represented by this entity.")]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///The unique identifier of the new address (will be generated if not specified).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the new address (will be generated if not specified).")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The name of the address. A customer can not have two addresses with the same name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the address. A customer can not have two addresses with the same name.")]
        public virtual string AddressName { get; set; }

        ///<summary>
        ///The city of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The city of the address.")]
        public virtual string City { get; set; }

        ///<summary>
        ///The 2 letter country ISO code.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The 2 letter country ISO code.")]
        public virtual string CountryCode { get; set; }

        ///<summary>
        ///The 2 letter region ISO code.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The 2 letter region ISO code.")]
        public virtual string RegionCode { get; set; }

        ///<summary>
        ///The first line of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The first line of the address.")]
        public virtual string Line1 { get; set; }

        ///<summary>
        ///The second line of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The second line of the address.")]
        public virtual string Line2 { get; set; }

        ///<summary>
        ///The resident first name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The resident first name.")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///The resident last name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The resident last name.")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///The phone number of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The phone number of the address.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///The phone extension of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The phone extension of the address.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///The postal code of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The postal code of the address.")]
        public virtual string PostalCode { get; set; }

        ///<summary>
        ///The latitude coordinate of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The latitude coordinate of the address.")]
        public virtual double? Latitude { get; set; }

        ///<summary>
        ///The longitude coordinate of the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The longitude coordinate of the address.")]
        public virtual double? Longitude { get; set; }

        ///<summary>
        ///The email address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The email address.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///The notes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The notes.")]
        public virtual string Notes { get; set; }

        ///<summary>
        ///a boolean which specifies whether this address is the entity's preferred choice for Billing.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a boolean which specifies whether this address is the entity's preferred choice for Billing.")]
        public virtual bool IsPreferredBilling { get; set; }

        ///<summary>
        ///a boolean which specifies whether this address is the entity's preferred choice for Shipping.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a boolean which specifies whether this address is the entity's preferred choice for Shipping.")]
        public virtual bool IsPreferredShipping { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/customProfiles/{ScopeId}/{AttributeName}/{EntityId}", "POST")]
    [Route("/customers/{CustomerId}/customProfiles/{ScopeId}/{AttributeName}/{EntityId}", "POST")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="Validation error.", StatusCode=422)]
    [DataContract]
    public partial class AssociateCustomerEntityRequest
        : IReturnVoid, IPost
    {
        ///<summary>
        ///The name of the attribute in the parent definition under which the association is kept.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the attribute in the parent definition under which the association is kept.", IsRequired=true)]
        public virtual string AttributeName { get; set; }

        ///<summary>
        ///The unique identifier for the associated entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the associated entity.", IsRequired=true)]
        public virtual Guid EntityId { get; set; }

        ///<summary>
        ///The id of scope in which the parent entity belongs.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of scope in which the parent entity belongs.", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The customer identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer identifier.")]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/{ParentEntityTypeName}/{ParentId}/{AttributeName}/{EntityId}", "POST")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [ApiResponse(Description="Validation error.", StatusCode=422)]
    [DataContract]
    public partial class AssociateEntityRequest
        : IReturnVoid, IPost
    {
        ///<summary>
        ///The name of the attribute in the parent definition under which the association is kept.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the attribute in the parent definition under which the association is kept.", IsRequired=true)]
        public virtual string AttributeName { get; set; }

        ///<summary>
        ///The unique identifier for the associated entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the associated entity.", IsRequired=true)]
        public virtual Guid EntityId { get; set; }

        ///<summary>
        ///Gets the name (business key) of the entity type of the profile instance to which the entity will be associated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets the name (business key) of the entity type of the profile instance to which the entity will be associated.", IsRequired=true)]
        public virtual string ParentEntityTypeName { get; set; }

        ///<summary>
        ///The unique identifier for the parent entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the parent entity.", IsRequired=true)]
        public virtual Guid ParentId { get; set; }

        ///<summary>
        ///The id of scope in which the parent entity belongs.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of scope in which the parent entity belongs.", IsRequired=true)]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/update", "PUT")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [DataContract]
    public partial class BulkUpdateProfilesRequest
        : ProfileOperationsRequest, IReturnVoid, IPut
    {
    }

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}", "DELETE")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [ApiResponse(Description="Custom profile to be deleted was not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteCustomProfileRequest
        : ScopedRequest, IReturn<string>, IDelete
    {
        ///<summary>
        ///Entity type name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Entity type name.")]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///The unique identifier of the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the entity.")]
        public virtual Guid EntityId { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/customProfiles/{ScopeId}/{AttributeName}/{EntityId}", "DELETE")]
    [Route("/customers/{CustomerId}/customProfiles/{ScopeId}/{AttributeName}/{EntityId}", "DELETE")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [DataContract]
    public partial class DisassociateCustomerEntityRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The name of the attribute in the parent definition under which the association is kept.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the attribute in the parent definition under which the association is kept.", IsRequired=true)]
        public virtual string AttributeName { get; set; }

        ///<summary>
        ///The unique identifier for the associated entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the associated entity.", IsRequired=true)]
        public virtual Guid EntityId { get; set; }

        ///<summary>
        ///The identifier of scope in which the parent entity belong.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of scope in which the parent entity belong.", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The customer identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer identifier.")]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/{ParentEntityTypeName}/{ParentId}/{AttributeName}/{EntityId}", "DELETE")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [DataContract]
    public partial class DisassociateEntityRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The name of the attribute in the parent definition under which the association is kept.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the attribute in the parent definition under which the association is kept.", IsRequired=true)]
        public virtual string AttributeName { get; set; }

        ///<summary>
        ///The unique identifier for the associated entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the associated entity.", IsRequired=true)]
        public virtual Guid EntityId { get; set; }

        ///<summary>
        ///Gets the name (business key) of the custom type of the profile instance to which the entity will be associated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets the name (business key) of the custom type of the profile instance to which the entity will be associated.", IsRequired=true)]
        public virtual string ParentEntityTypeName { get; set; }

        ///<summary>
        ///The unique identifier for the parent entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the parent entity.", IsRequired=true)]
        public virtual Guid ParentId { get; set; }

        ///<summary>
        ///The identifier of scope in which the parent entity belong.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of scope in which the parent entity belong.", IsRequired=true)]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/{EntityTypeName}/find", "POST")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindProfileInstancesRequest
        : QueryRequestBase, IReturn<FindProfileInstancesQueryResult>, IPost
    {
        ///<summary>
        ///The phrases to search for in a text field containing all the information of the CustomProfile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The phrases to search for in a text field containing all the information of the CustomProfile.")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        /// Gets or sets the entity type name of the profile instance.
        ///</summary>
        [DataMember]
        [ApiMember(Description=" Gets or sets the entity type name of the profile instance.")]
        public virtual string EntityTypeName { get; set; }
    }

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}/scopes", "GET")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetAssociatedScopesRequest
        : IReturn<List<ScopeAssociation>>, IGet
    {
        ///<summary>
        ///The EntityTypeName of the profile instance to which the scopes are linked.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The EntityTypeName of the profile instance to which the scopes are linked.", IsRequired=true)]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///The identifier (business key) of the instance of entity to which the scopes are associated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier (business key) of the instance of entity to which the scopes are associated.", IsRequired=true)]
        public virtual string EntityId { get; set; }

        ///<summary>
        ///The identifier of the scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the scope.", IsRequired=true)]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/{EntityTypeName}/byName/{Name}", "GET")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [DataContract]
    public partial class GetProfileInstanceByNameRequest
        : ScopedRequest, IReturn<CustomProfile>, IGet
    {
        ///<summary>
        ///Name of the custom type of the profile instance represented by this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Name of the custom type of the profile instance represented by this entity.")]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///Unique identifier name for the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Unique identifier name for the entity.")]
        public virtual string Name { get; set; }
    }

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}", "GET")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [DataContract]
    public partial class GetProfileInstanceRequest
        : ScopedRequest, IReturn<CustomProfile>, IGet
    {
        ///<summary>
        ///Name of the custom type of the profile instance represented by this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Name of the custom type of the profile instance represented by this entity.")]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///Unique identifier for the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Unique identifier for the entity.")]
        public virtual Guid EntityId { get; set; }
    }

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/{EntityTypeName}/byIds/", "POST")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [DataContract]
    public partial class GetProfileInstancesRequest
        : ScopedRequest, IReturn<List<CustomProfile>>, IPost
    {
        public GetProfileInstancesRequest()
        {
            Ids = new List<Guid>{};
        }

        ///<summary>
        ///Name of the custom type of the profile instance represented by these entities.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Name of the custom type of the profile instance represented by these entities.")]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///Unique identifiers for the entities.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Unique identifiers for the entities.", IsRequired=true)]
        public virtual List<Guid> Ids { get; set; }
    }

    public partial interface IAssociationRequest
    {
        string AttributeName { get; set; }
        Guid EntityId { get; set; }
        string ParentEntityTypeName { get; set; }
        Guid ParentId { get; set; }
        string ScopeId { get; set; }
    }

    public partial interface IProfileOperationsRequest
    {
        ProfileOperations ProfileOperations { get; set; }
    }

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}/scopes", "DELETE")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class RemoveScopeAssociationRequest
        : IReturn<List<ScopeAssociation>>, IDelete
    {
        ///<summary>
        ///The name (business key) of the entity type of the instance to which the scopes are linked.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name (business key) of the entity type of the instance to which the scopes are linked.", IsRequired=true)]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///The Id (business key) of the instance of entity to which the scopes are associated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Id (business key) of the instance of entity to which the scopes are associated.", IsRequired=true)]
        public virtual string EntityId { get; set; }

        ///<summary>
        ///The Id (business key) of the Scope to which the associations must be deleted.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Id (business key) of the Scope to which the associations must be deleted.", IsRequired=true)]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}", "PUT")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [DataContract]
    public partial class UpdateCustomProfileRequest
        : ScopedRequest, IReturn<CustomProfile>, IPut
    {
        ///<summary>
        ///The unique name given to identify the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique name given to identify the entity.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The sort order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sort order.")]
        public virtual int SequenceNumber { get; set; }

        ///<summary>
        ///Whether this entity can be used in business processes or linked to a scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether this entity can be used in business processes or linked to a scope.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The entity type name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The entity type name.")]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///The date and time the entity was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date and time the entity was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///The identifier of the operator who created the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who created the entity.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///Date and time that the last modification was applied to the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Date and time that the last modification was applied to the entity.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///The identifier of the operator who last modified the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the operator who last modified the entity.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///The unique identifier for the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier for the entity.")]
        public virtual Guid EntityId { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Custom Profiles are entities which represents a custom classification of entity defined in the system.
    ///</summary>
    [Route("/customProfiles/{ScopeId}/{EntityTypeName}/{EntityId}/scopes", "PUT")]
    [Api(Description="Custom Profiles are entities which represents a custom classification of entity defined in the system.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateScopeAssociationsRequest
        : IReturn<List<ScopeAssociation>>, IPut
    {
        public UpdateScopeAssociationsRequest()
        {
            Scopes = new List<string>{};
        }

        ///<summary>
        ///The name (business key) of the entity type of the instance to which the scopes are linked.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name (business key) of the entity type of the instance to which the scopes are linked.", IsRequired=true)]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///The Id (business key) of the instance of entity to which the scopes are associated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Id (business key) of the instance of entity to which the scopes are associated.", IsRequired=true)]
        public virtual string EntityId { get; set; }

        ///<summary>
        ///The list of name (business key) of scopes to associate to the given entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of name (business key) of scopes to associate to the given entity.", IsRequired=true)]
        public virtual List<string> Scopes { get; set; }

        ///<summary>
        ///The scope in which the profile instance belongs.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope in which the profile instance belongs.", IsRequired=true)]
        public virtual string ScopeId { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Customers.Membership
{

    ///<summary>
    ///Membership represents a set of Authorization rules applied to a Customer.
    ///</summary>
    [Route("/membership/{ScopeId}/ChangePassword/{UserName}", "POST")]
    [Api(Description="Membership represents a set of Authorization rules applied to a Customer.")]
    [DataContract]
    public partial class ChangePasswordRequest
        : ScopedRequest, IReturn<ChangePasswordResponse>, IPost
    {
        ///<summary>
        ///The UserName
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UserName")]
        public virtual string UserName { get; set; }

        ///<summary>
        ///The old (current) password
        ///</summary>
        [DataMember]
        [ApiMember(Description="The old (current) password")]
        public virtual string OldPassword { get; set; }

        ///<summary>
        ///The new (replacement) password
        ///</summary>
        [DataMember]
        [ApiMember(Description="The new (replacement) password")]
        public virtual string NewPassword { get; set; }
    }

    ///<summary>
    ///Membership represents a set of Authorization rules applied to a Customer.
    ///</summary>
    [Route("/membership/{ScopeId}/ChangeUserName/{OldUsername}", "POST")]
    [Api(Description="Membership represents a set of Authorization rules applied to a Customer.")]
    [DataContract]
    public partial class ChangeUserNameRequest
        : ScopedRequest, IReturn<ChangeUserNameResponse>, IPost
    {
        ///<summary>
        ///The old (current) username
        ///</summary>
        [DataMember]
        [ApiMember(Description="The old (current) username")]
        public virtual string OldUsername { get; set; }

        ///<summary>
        ///The new username
        ///</summary>
        [DataMember]
        [ApiMember(Description="The new username")]
        public virtual string NewUsername { get; set; }
    }

    ///<summary>
    ///Membership represents a set of Authorization rules applied to a Customer.
    ///</summary>
    [Route("/membership/{ScopeId}", "POST")]
    [Api(Description="Membership represents a set of Authorization rules applied to a Customer.")]
    [DataContract]
    public partial class CreateCustomerMembershipRequest
        : ScopedRequest, IReturn<Customer>, IPost
    {
        ///<summary>
        ///The unique id of the Customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique id of the Customer")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The UserName of the customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UserName of the customer")]
        public virtual string Username { get; set; }

        ///<summary>
        ///The FirstName of the customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The FirstName of the customer")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///The LastName of the customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The LastName of the customer")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///The Email of the customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Email of the customer")]
        public virtual string Email { get; set; }

        ///<summary>
        ///The Password of the customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Password of the customer")]
        public virtual string Password { get; set; }

        ///<summary>
        ///The 'Question' for the password 'question and andswer'
        ///</summary>
        [DataMember]
        [ApiMember(Description="The 'Question' for the password 'question and andswer'")]
        public virtual string PasswordQuestion { get; set; }

        ///<summary>
        ///The 'Answer' for the password 'question and andswer'
        ///</summary>
        [DataMember]
        [ApiMember(Description="The 'Answer' for the password 'question and andswer'")]
        public virtual string PasswordAnswer { get; set; }

        ///<summary>
        ///Gets or sets the preferred communication language of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the preferred communication language of the customer.")]
        public virtual string Language { get; set; }
    }

    ///<summary>
    ///Membership represents a set of Authorization rules applied to a Customer.
    ///</summary>
    [Route("/membership/configuration", "GET")]
    [Api(Description="Membership represents a set of Authorization rules applied to a Customer.")]
    [DataContract]
    public partial class GetMembershipConfigurationRequest
        : IReturn<MembershipConfiguration>, IGet
    {
    }

    ///<summary>
    ///Membership represents a set of Authorization rules applied to a Customer.
    ///</summary>
    [Route("/membership/{ScopeId}/Login", "PUT")]
    [Api(Description="Membership represents a set of Authorization rules applied to a Customer.")]
    [ApiResponse(Description="No customer found", StatusCode=404)]
    [DataContract]
    public partial class LoginRequest
        : ScopedRequest, IReturn<LoginResponse>, IPut
    {
        ///<summary>
        ///The UserName used to login
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UserName used to login")]
        public virtual string UserName { get; set; }

        ///<summary>
        ///The Password used to login
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Password used to login")]
        public virtual string Password { get; set; }
    }

    ///<summary>
    ///Membership represents a set of Authorization rules applied to a Customer.
    ///</summary>
    [Route("/membership/{ScopeId}/ResetPassword", "POST")]
    [Api(Description="Membership represents a set of Authorization rules applied to a Customer.")]
    [DataContract]
    public partial class ResetPasswordRequest
        : ScopedRequest, IReturn<ResetPasswordResponse>, IPost
    {
        ///<summary>
        ///The customer's email address
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer's email address")]
        public virtual string Email { get; set; }

        ///<summary>
        ///The password
        ///</summary>
        [DataMember]
        [ApiMember(Description="The password")]
        public virtual string Password { get; set; }

        ///<summary>
        ///The username
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username")]
        public virtual string Username { get; set; }

        ///<summary>
        ///The answer for the password 'question-answer'
        ///</summary>
        [DataMember]
        [ApiMember(Description="The answer for the password 'question-answer'")]
        public virtual string PasswordAnswer { get; set; }
    }

    ///<summary>
    ///Membership represents a set of Authorization rules applied to a Customer.
    ///</summary>
    [Route("/membership/{ScopeId}/UnlockUser/{UserName}", "POST")]
    [Api(Description="Membership represents a set of Authorization rules applied to a Customer.")]
    [DataContract]
    public partial class UnlockUserRequest
        : ScopedRequest, IReturn<UnlockUserResponse>, IPost
    {
        ///<summary>
        ///The username
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username")]
        public virtual string UserName { get; set; }
    }

    ///<summary>
    ///Membership represents a set of Authorization rules applied to a Customer.
    ///</summary>
    [Route("/membership/{ScopeId}/Validate", "PUT")]
    [Api(Description="Membership represents a set of Authorization rules applied to a Customer.")]
    [DataContract]
    public partial class ValidateUserRequest
        : ScopedRequest, IReturn<ValidateUserResponse>, IPut
    {
        ///<summary>
        ///The UserName of the user to validate
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UserName of the user to validate")]
        public virtual string UserName { get; set; }

        ///<summary>
        ///The Password of the user to validate
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Password of the user to validate")]
        public virtual string Password { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Customers.Organizations
{

    ///<summary>
    ///Operations related to organizations such as create an organization, get an organization, updating an organization, ...
    ///</summary>
    [Route("/organizations/{ScopeId}/customers", "POST")]
    [Api(Description="Operations related to organizations such as create an organization, get an organization, updating an organization, ...")]
    [DataContract]
    public partial class AddCustomersToOrganizationRequest
        : ScopedRequest, IReturnVoid, IPost
    {
        public AddCustomersToOrganizationRequest()
        {
            AssociatedIds = new List<Guid>{};
        }

        ///<summary>
        ///The unique identifier for the organization.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The unique identifier for the organization.")]
        public virtual Guid OrganizationId { get; set; }

        ///<summary>
        ///The list of unique identifiers of the customers to associate.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The list of unique identifiers of the customers to associate.")]
        public virtual List<Guid> AssociatedIds { get; set; }
    }

    ///<summary>
    ///Operations related to organizations such as create an organization, get an organization, updating an organization, ...
    ///</summary>
    [Route("/organizations/{ScopeId}", "POST")]
    [Api(Description="Operations related to organizations such as create an organization, get an organization, updating an organization, ...")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class CreateOrganizationRequest
        : IReturn<Organization>, IPost
    {
        public CreateOrganizationRequest()
        {
            AddressIds = new List<Guid>{};
        }

        ///<summary>
        ///The scope in which the organization belong.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope in which the organization belong.", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The unique identifier of the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the entity.")]
        public virtual Guid OrganizationId { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///the name of the organization. Must be unique.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the organization. Must be unique.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The organization's addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The organization's addresses.")]
        public virtual List<Guid> AddressIds { get; set; }

        ///<summary>
        ///whether or not this organization is currently active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether or not this organization is currently active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///the full name of the organization manager
        ///</summary>
        [DataMember]
        [ApiMember(Description="the full name of the organization manager")]
        public virtual string Manager { get; set; }

        ///<summary>
        ///the email associated to the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email associated to the organization.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///the phone number of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the phone number of the organization.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///the phone extension of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the phone extension of the organization.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///the fax number of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fax number of the organization.")]
        public virtual string FaxNumber { get; set; }

        ///<summary>
        ///the fax extension of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fax extension of the organization.")]
        public virtual string FaxExtension { get; set; }

        ///<summary>
        ///the trading partner number of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the trading partner number of the organization.")]
        public virtual string TradingPartnerNumber { get; set; }

        ///<summary>
        ///the description of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the description of the organization.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the date the organization was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the organization was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the date of the last modification to the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date of the last modification to the organization.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the identifier of the user who created the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the user who created the organization.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the identifier of the user who last modified the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the user who last modified the organization.")]
        public virtual string LastModifiedBy { get; set; }
    }

    ///<summary>
    ///Operations related to organizations such as create an organization, get an organization, updating an organization, ...
    ///</summary>
    [Route("/organizations/{ScopeId}/find", "POST")]
    [Api(Description="Operations related to organizations such as create an organization, get an organization, updating an organization, ...")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class FindOrganizationsRequest
        : QueryRequestBase, IReturn<FindOrganizationsQueryResult>, IPost
    {
        ///<summary>
        ///The search terms to search for.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The search terms to search for.")]
        public virtual string SearchTerms { get; set; }
    }

    ///<summary>
    ///Operations related to organizations such as create an organization, get an organization, updating an organization, ...
    ///</summary>
    [Route("/organizations/{ScopeId}/byName/{Name}/customers", "GET")]
    [Api(Description="Operations related to organizations such as create an organization, get an organization, updating an organization, ...")]
    [DataContract]
    public partial class GetCustomersByOrganizationNameRequest
        : ScopedRequest, IReturn<GetCustomersByOrganizationQueryResult>, IGet
    {
        ///<summary>
        ///The organization name of the Customer to search for.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The organization name of the Customer to search for.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The starting index.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting index.")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The maximum items returned by the search query.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum items returned by the search query.")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///Specifies whether or not to fully load the collection of addresses linked to the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to fully load the collection of addresses linked to the customer.")]
        public virtual bool IncludeAddresses { get; set; }
    }

    ///<summary>
    ///Operations related to organizations such as create an organization, get an organization, updating an organization, ...
    ///</summary>
    [Route("/organizations/{ScopeId}/{OrganizationId}/customers", "GET")]
    [Api(Description="Operations related to organizations such as create an organization, get an organization, updating an organization, ...")]
    [DataContract]
    public partial class GetCustomersByOrganizationRequest
        : ScopedRequest, IReturn<GetCustomersByOrganizationQueryResult>, IGet
    {
        ///<summary>
        ///The organization identifier of the customer to search for.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The organization identifier of the customer to search for.")]
        public virtual Guid OrganizationId { get; set; }

        ///<summary>
        ///The starting index.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting index.")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The maximum items returned by the search query.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum items returned by the search query.")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///Whether or not to fully load the collection of addresses linked to the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not to fully load the collection of addresses linked to the customer.")]
        public virtual bool IncludeAddresses { get; set; }
    }

    ///<summary>
    ///Operations related to organizations such as create an organization, get an organization, updating an organization, ...
    ///</summary>
    [Route("/organizations/{ScopeId}/byName/{Name}", "GET")]
    [Api(Description="Operations related to organizations such as create an organization, get an organization, updating an organization, ...")]
    [ApiResponse(Description="Organization with provided name does not exist.", StatusCode=404)]
    [DataContract]
    public partial class GetOrganizationByNameRequest
        : ScopedRequest, IReturn<Organization>, IGet
    {
        ///<summary>
        ///The name of the organization to retrieve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the organization to retrieve.", IsRequired=true)]
        [Required]
        public virtual string Name { get; set; }

        ///<summary>
        ///Specifies whether or not to fully load the addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to fully load the addresses.")]
        public virtual bool IncludeAddresses { get; set; }
    }

    ///<summary>
    ///Operations related to organizations such as create an organization, get an organization, updating an organization, ...
    ///</summary>
    [Route("/organizations/{ScopeId}/{OrganizationId}", "GET")]
    [Api(Description="Operations related to organizations such as create an organization, get an organization, updating an organization, ...")]
    [ApiResponse(Description="Organization with provided id does not exist.", StatusCode=404)]
    [DataContract]
    public partial class GetOrganizationRequest
        : ScopedRequest, IReturn<Organization>, IGet
    {
        ///<summary>
        ///The identifier of the organization to retrieve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the organization to retrieve.")]
        [Required]
        public virtual Guid OrganizationId { get; set; }

        ///<summary>
        ///Specifies whether or not to fully load the addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to fully load the addresses.")]
        public virtual bool IncludeAddresses { get; set; }
    }

    ///<summary>
    ///Operations related to organizations such as create an organization, get an organization, updating an organization, ...
    ///</summary>
    [Route("/organizations/{ScopeId}/customers", "DELETE")]
    [Api(Description="Operations related to organizations such as create an organization, get an organization, updating an organization, ...")]
    [DataContract]
    public partial class RemoveCustomersFromOrganizationRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        public RemoveCustomersFromOrganizationRequest()
        {
            AssociatedIds = new List<Guid>{};
        }

        ///<summary>
        ///The unique identifier for the organization
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The unique identifier for the organization")]
        public virtual Guid OrganizationId { get; set; }

        ///<summary>
        ///The list of unique identifiers for the associated customer entities
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The list of unique identifiers for the associated customer entities")]
        public virtual List<Guid> AssociatedIds { get; set; }
    }

    ///<summary>
    ///Operations related to organizations such as create an organization, get an organization, updating an organization, ...
    ///</summary>
    [Route("/organizations/{ScopeId}/{OrganizationId}", "PUT")]
    [Api(Description="Operations related to organizations such as create an organization, get an organization, updating an organization, ...")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateOrganizationRequest
        : IReturn<Organization>, IPut
    {
        public UpdateOrganizationRequest()
        {
            AddressIds = new List<Guid>{};
        }

        ///<summary>
        ///The scope in which the organization belong.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope in which the organization belong.", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The unique identifier of the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the entity.")]
        public virtual Guid OrganizationId { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///the name of the organization. Must be unique.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the organization. Must be unique.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The organization's addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The organization's addresses.")]
        public virtual List<Guid> AddressIds { get; set; }

        ///<summary>
        ///whether or not this organization is currently active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether or not this organization is currently active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///the full name of the organization manager
        ///</summary>
        [DataMember]
        [ApiMember(Description="the full name of the organization manager")]
        public virtual string Manager { get; set; }

        ///<summary>
        ///the email associated to the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email associated to the organization.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///the phone number of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the phone number of the organization.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///the phone extension of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the phone extension of the organization.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///the fax number of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fax number of the organization.")]
        public virtual string FaxNumber { get; set; }

        ///<summary>
        ///the fax extension of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fax extension of the organization.")]
        public virtual string FaxExtension { get; set; }

        ///<summary>
        ///the trading partner number of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the trading partner number of the organization.")]
        public virtual string TradingPartnerNumber { get; set; }

        ///<summary>
        ///the description of the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the description of the organization.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the date the organization was created.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date the organization was created.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the date of the last modification to the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date of the last modification to the organization.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///the identifier of the user who created the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the user who created the organization.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the identifier of the user who last modified the organization.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the user who last modified the organization.")]
        public virtual string LastModifiedBy { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Customers.Stores
{

    ///<summary>
    ///Stores are entities which represents physical stores or an online/web stores.
    ///</summary>
    [Route("/stores/{ScopeId}/{Number}", "POST")]
    [Api(Description="Stores are entities which represents physical stores or an online/web stores.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateOrUpdateStoreByNumberRequest
        : ScopedRequest, IReturn<Store>, IPost
    {
        public CreateOrUpdateStoreByNumberRequest()
        {
            Addresses = new List<Address>{};
        }

        ///<summary>
        ///a business centric number to identify the store that could be used to link the store to external data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a business centric number to identify the store that could be used to link the store to external data.")]
        public virtual string Number { get; set; }

        ///<summary>
        ///Is this store currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the store to be hidden from many business processes until re-activated. 
        ///</summary>
        [DataMember]
        [ApiMember(Description="Is this store currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the store to be hidden from many business processes until re-activated. ")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///the name of the store. Each store must have a name that unique in the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the store. Each store must have a name that unique in the system.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the display name of the store. This is a multilingual value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name of the store. This is a multilingual value.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///the general description of the store. Use this to provide internal (admin) users information about this store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the general description of the store. Use this to provide internal (admin) users information about this store.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///Indicates if this is a physical or a virtual store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if this is a physical or a virtual store.")]
        public virtual StoreType StoreType { get; set; }

        ///<summary>
        ///Indicates if this is a physical or a virtual location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if this is a physical or a virtual location.")]
        public virtual LocationClass LocationClass { get; set; }

        ///<summary>
        ///the full name of the manager of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the full name of the manager of the store.")]
        public virtual string Manager { get; set; }

        ///<summary>
        ///the telephone number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the telephone number of the store.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///the extension for the telephone number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension for the telephone number of the store.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///the fax number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fax number of the store.")]
        public virtual string FaxNumber { get; set; }

        ///<summary>
        ///the extension for the fax number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension for the fax number of the store.")]
        public virtual string FaxExtension { get; set; }

        ///<summary>
        ///the email of the store. This could be a specific person's address or a general customerService@ address depending on the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email of the store. This could be a specific person's address or a general customerService@ address depending on the store.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///a value indicating whether this location supports pickup for transferred items, and at the same time doesn't allow pickup from inventory.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this location supports pickup for transferred items, and at the same time doesn't allow pickup from inventory.")]
        public virtual bool IsPickUpLocation { get; set; }

        ///<summary>
        ///a value indicating whether this location supports pickup both for transferred items and from inventory
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this location supports pickup both for transferred items and from inventory")]
        public virtual bool SupportPickUp { get; set; }

        ///<summary>
        ///a value indicating whether this store supports delivery for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this store supports delivery for order fulfillment.")]
        public virtual bool SupportDelivery { get; set; }

        ///<summary>
        ///a value indicating whether this store supports shipping for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this store supports shipping for order fulfillment.")]
        public virtual bool SupportShipping { get; set; }

        ///<summary>
        ///a value indicating whether this store supports ship to store for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this store supports ship to store for order fulfillment.")]
        public virtual bool SupportShipToStore { get; set; }

        ///<summary>
        ///the store operating status. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store operating status. This value is not loaded by default.")]
        public virtual OperatingStatus OperatingStatus { get; set; }

        ///<summary>
        ///the store/warehouse opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store/warehouse opening hours schedule. This value is not loaded by default.")]
        public virtual FulfillmentSchedule Schedule { get; set; }

        ///<summary>
        ///the pickup service opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the pickup service opening hours schedule. This value is not loaded by default.")]
        public virtual FulfillmentSchedule PickUpSchedule { get; set; }

        ///<summary>
        ///the delivery service opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the delivery service opening hours schedule. This value is not loaded by default.")]
        public virtual FulfillmentSchedule DeliverySchedule { get; set; }

        ///<summary>
        ///The time zone of the schedules.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time zone of the schedules.")]
        public virtual string TimeZone { get; set; }

        ///<summary>
        ///A value indicating whether this fulfillment location manage his own schedule for delivery
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this fulfillment location manage his own schedule for delivery")]
        public virtual bool DeliveryScheduleManaged { get; set; }

        ///<summary>
        ///A value indicating whether this fulfillment location manage his own schedule for pickup
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this fulfillment location manage his own schedule for pickup")]
        public virtual bool PickUpScheduleManaged { get; set; }

        ///<summary>
        ///The inventory location identifier related to this fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier related to this fulfillment location")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The inventory provider identifier to use with this fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory provider identifier to use with this fulfillment location")]
        public virtual string InventoryProviderId { get; set; }

        ///<summary>
        ///value indicating whether this store has inventory enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="value indicating whether this store has inventory enabled")]
        public virtual bool IsInventoryEnabled { get; set; }

        ///<summary>
        ///value indicating whether inventory availability to promise is enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="value indicating whether inventory availability to promise is enabled")]
        public virtual bool IsAtpEnabled { get; set; }

        ///<summary>
        ///the property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The store's addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store's addresses.")]
        public virtual List<Address> Addresses { get; set; }

        ///<summary>
        ///The fulfillment transition type  driven from FulfillmentTransitionType lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment transition type  driven from FulfillmentTransitionType lookup")]
        public virtual string FulfillmentTransitionType { get; set; }

        ///<summary>
        ///The fulfillment transition cut off time - only the time portion is considered
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment transition cut off time - only the time portion is considered")]
        public virtual DateTime FulfillmentTransitionCutOffTime { get; set; }

        ///<summary>
        ///The fulfillment transition Lead Time
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment transition Lead Time")]
        public virtual decimal FulfillmentTransitionLeadTime { get; set; }
    }

    ///<summary>
    ///Stores are entities which represents physical stores or an online/web stores.
    ///</summary>
    [Route("/stores/{ScopeId}", "POST")]
    [Api(Description="Stores are entities which represents physical stores or an online/web stores.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateStoreRequest
        : ProfileOperationsRequest, IReturn<Store>, IPost
    {
        public CreateStoreRequest()
        {
            Addresses = new List<Address>{};
        }

        ///<summary>
        ///the unique id of the store
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique id of the store")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///a business centric number to identify the store that could be used to link the store to external data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a business centric number to identify the store that could be used to link the store to external data.")]
        public virtual string Number { get; set; }

        ///<summary>
        ///Is this store currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the store to be hidden from many business processes until re-activated. 
        ///</summary>
        [DataMember]
        [ApiMember(Description="Is this store currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the store to be hidden from many business processes until re-activated. ")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///the name of the store. Each store must have a name that unique in the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the store. Each store must have a name that unique in the system.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the display name of the store. This is a multilingual value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name of the store. This is a multilingual value.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///the general description of the store. Use this to provide internal (admin) users information about this store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the general description of the store. Use this to provide internal (admin) users information about this store.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///Indicates if this is a physical or a virtual store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if this is a physical or a virtual store.")]
        public virtual StoreType StoreType { get; set; }

        ///<summary>
        ///Indicates if this is a physical or a virtual location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if this is a physical or a virtual location.")]
        public virtual LocationClass LocationClass { get; set; }

        ///<summary>
        ///the full name of the manager of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the full name of the manager of the store.")]
        public virtual string Manager { get; set; }

        ///<summary>
        ///the telephone number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the telephone number of the store.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///the extension for the telephone number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension for the telephone number of the store.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///the fax number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fax number of the store.")]
        public virtual string FaxNumber { get; set; }

        ///<summary>
        ///the extension for the fax number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension for the fax number of the store.")]
        public virtual string FaxExtension { get; set; }

        ///<summary>
        ///the email of the store. This could be a specific person's address or a general customerService@ address depending on the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email of the store. This could be a specific person's address or a general customerService@ address depending on the store.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///a value indicating whether this location supports pickup for transferred items, and at the same time doesn't allow pickup from inventory.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this location supports pickup for transferred items, and at the same time doesn't allow pickup from inventory.")]
        public virtual bool IsPickUpLocation { get; set; }

        ///<summary>
        ///a value indicating whether this location supports pickup both for transferred items and from inventory
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this location supports pickup both for transferred items and from inventory")]
        public virtual bool SupportPickUp { get; set; }

        ///<summary>
        ///a value indicating whether this store supports delivery for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this store supports delivery for order fulfillment.")]
        public virtual bool SupportDelivery { get; set; }

        ///<summary>
        ///a value indicating whether this store supports shipping for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this store supports shipping for order fulfillment.")]
        public virtual bool SupportShipping { get; set; }

        ///<summary>
        ///a value indicating whether this store supports ship to store for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this store supports ship to store for order fulfillment.")]
        public virtual bool SupportShipToStore { get; set; }

        ///<summary>
        ///the store operating status. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store operating status. This value is not loaded by default.")]
        public virtual OperatingStatus OperatingStatus { get; set; }

        ///<summary>
        ///the store/warehouse opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store/warehouse opening hours schedule. This value is not loaded by default.")]
        public virtual FulfillmentSchedule Schedule { get; set; }

        ///<summary>
        ///the pickup service opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the pickup service opening hours schedule. This value is not loaded by default.")]
        public virtual FulfillmentSchedule PickUpSchedule { get; set; }

        ///<summary>
        ///the delivery service opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the delivery service opening hours schedule. This value is not loaded by default.")]
        public virtual FulfillmentSchedule DeliverySchedule { get; set; }

        ///<summary>
        ///The time zone of the schedules.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time zone of the schedules.")]
        public virtual string TimeZone { get; set; }

        ///<summary>
        ///A value indicating whether this fulfillment location manage his own schedule for delivery
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this fulfillment location manage his own schedule for delivery")]
        public virtual bool DeliveryScheduleManaged { get; set; }

        ///<summary>
        ///A value indicating whether this fulfillment location manage his own schedule for pickup
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this fulfillment location manage his own schedule for pickup")]
        public virtual bool PickUpScheduleManaged { get; set; }

        ///<summary>
        ///The inventory location identifier related to this fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier related to this fulfillment location")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The inventory provider identifier to use with this fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory provider identifier to use with this fulfillment location")]
        public virtual string InventoryProviderId { get; set; }

        ///<summary>
        ///value indicating whether this store has inventory enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="value indicating whether this store has inventory enabled")]
        public virtual bool IsInventoryEnabled { get; set; }

        ///<summary>
        ///value indicating whether inventory availability to promise is enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="value indicating whether inventory availability to promise is enabled")]
        public virtual bool IsAtpEnabled { get; set; }

        ///<summary>
        ///the property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The store's addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store's addresses.")]
        public virtual List<Address> Addresses { get; set; }

        ///<summary>
        ///The fulfillment transition type  driven from FulfillmentTransitionType lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment transition type  driven from FulfillmentTransitionType lookup")]
        public virtual string FulfillmentTransitionType { get; set; }

        ///<summary>
        ///The fulfillment transition cut off time - only the time portion is considered
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment transition cut off time - only the time portion is considered")]
        public virtual DateTime FulfillmentTransitionCutOffTime { get; set; }

        ///<summary>
        ///The fulfillment transition Lead Time
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment transition Lead Time")]
        public virtual decimal FulfillmentTransitionLeadTime { get; set; }
    }

    ///<summary>
    ///Stores are entities which represents physical stores or an online/web stores.
    ///</summary>
    [Route("/stores/{ScopeId}/{Id}", "DELETE")]
    [Api(Description="Stores are entities which represents physical stores or an online/web stores.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteStoreRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///the unique id of the Store
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique id of the Store")]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Stores are entities which represents physical stores or an online/web stores.
    ///</summary>
    [Route("/stores/extractForIndexing", "POST")]
    [Api(Description="Stores are entities which represents physical stores or an online/web stores.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ExtractStoreInformationForIndexingRequest
        : ScopedRequest, IReturn<ExtractStoreInformationForIndexingResponse>, IPost
    {
        public ExtractStoreInformationForIndexingRequest()
        {
            StoreIds = new Guid[]{};
        }

        ///<summary>
        ///The minimum "Last modification date" for filtering stores. When not specified or if StoreIds are specified, filtering will not be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum \"Last modification date\" for filtering stores. When not specified or if StoreIds are specified, filtering will not be applied.")]
        public virtual DateTime? LastModifiedSince { get; set; }

        ///<summary>
        ///The list of store ids to retrieve. When not specified, no filtering by id will be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of store ids to retrieve. When not specified, no filtering by id will be applied.")]
        public virtual Guid[] StoreIds { get; set; }

        ///<summary>
        ///The offset of the first record when requesting paged data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The offset of the first record when requesting paged data.")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The number of items to return: the page size when requesting paged data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of items to return: the page size when requesting paged data.")]
        public virtual int? MaximumItems { get; set; }
    }

    [DataContract]
    public partial class ExtractStoreInformationForIndexingResponse
    {
        public ExtractStoreInformationForIndexingResponse()
        {
            Stores = new List<LocationIndexingInformation>{};
        }

        ///<summary>
        ///The list of stores.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of stores.")]
        public virtual List<LocationIndexingInformation> Stores { get; set; }
    }

    ///<summary>
    ///Stores are entities which represents physical stores or an online/web stores.
    ///</summary>
    [Route("/stores/{ScopeId}/near/{SearchTerms}", "GET")]
    [Api(Description="Stores are entities which represents physical stores or an online/web stores.")]
    [DataContract]
    public partial class FindNearestStoresRequest
        : ScopedRequest, IReturn<FindNearestStoresResult>, IGet
    {
        ///<summary>
        ///The search terms.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The search terms.")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        ///The starting index used to find the stores
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting index used to find the stores")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The maximum number of stores
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of stores")]
        public virtual int MaximumItemsCount { get; set; }

        ///<summary>
        ///The fulfillment method type used to filter the stores.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment method type used to filter the stores.")]
        public virtual FulfillmentMethodType FulfillmentMethodType { get; set; }
    }

    ///<summary>
    ///Stores are entities which represents physical stores or an online/web stores.
    ///</summary>
    [Route("/stores/{ScopeId}/find", "POST")]
    [Api(Description="Stores are entities which represents physical stores or an online/web stores.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindStoresRequest
        : QueryRequestBase, IReturn<FindStoresQueryResult>, IPost
    {
        ///<summary>
        ///The word or phrase the store name or number is beginning with
        ///</summary>
        [DataMember]
        [ApiMember(Description="The word or phrase the store name or number is beginning with")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        ///Includes the stores of the child scopes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Includes the stores of the child scopes.")]
        public virtual bool IncludeChildScopes { get; set; }
    }

    ///<summary>
    ///Customers represents entities which have the ability to buy products.
    ///</summary>
    [Route("/customers/{ScopeId}/stores", "GET")]
    [Route("/customers/{ScopeId}/{CustomerId}/stores", "GET")]
    [Api(Description="Customers represents entities which have the ability to buy products.")]
    [ApiResponse(Description="Requested customer not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerStoresRequest
        : ScopedRequest, IReturn<CustomerStoresAssociations>, IGet
    {
        ///<summary>
        ///The unique id of the customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique id of the customer", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The value indicating whether the addresses should be included
        ///</summary>
        [DataMember]
        [ApiMember(Description="The value indicating whether the addresses should be included")]
        public virtual bool IncludeAddresses { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/operatingStatus", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="Requested store or operating status not found", StatusCode=404)]
    [DataContract]
    public partial class GetOperatingStatusRequest
        : ScopedRequest, IReturn<OperatingStatus>, IGet
    {
        ///<summary>
        ///The unique identifier of the FulfillmentLocation (Store or other) to retrieve.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The unique identifier of the FulfillmentLocation (Store or other) to retrieve.")]
        public virtual Guid FulfillmentLocationId { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/schedule", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="Requested Store or Schedule not found", StatusCode=404)]
    [DataContract]
    public partial class GetScheduleRequest
        : ScopedRequest, IReturn<FulfillmentSchedule>, IGet
    {
        ///<summary>
        ///The unique identifier of the Store to retrieve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Store to retrieve.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        /// Gets or sets the type of the schedule. The possible values are : OpeningHours, Delivery or PickUp.
        ///</summary>
        [DataMember]
        [ApiMember(Description=" Gets or sets the type of the schedule. The possible values are : OpeningHours, Delivery or PickUp.")]
        public virtual ScheduleType ScheduleType { get; set; }
    }

    ///<summary>
    ///Stores are entities which represents physical stores or an online/web stores.
    ///</summary>
    [Route("/stores/{ScopeId}/byName/{Name}", "GET")]
    [Api(Description="Stores are entities which represents physical stores or an online/web stores.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="Requested store not found", StatusCode=404)]
    [DataContract]
    public partial class GetStoreByNameRequest
        : ScopedRequest, IReturn<Store>, IGet
    {
        ///<summary>
        ///the name of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the store.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The culture name in which language tha data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///Specifies whether or not to load the collection of addresses linked to the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load the collection of addresses linked to the store.")]
        public virtual bool IncludeAddresses { get; set; }

        ///<summary>
        ///Specifies whether or not to load schedules of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load schedules of the store.")]
        public virtual bool IncludeSchedules { get; set; }

        ///<summary>
        ///Specifies whether or not to load the operating status the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load the operating status the store.")]
        public virtual bool IncludeOperatingStatus { get; set; }
    }

    ///<summary>
    ///Stores are entities which represents physical stores or an online/web stores.
    ///</summary>
    [Route("/stores/{ScopeId}/byNumber/{Number}", "GET")]
    [Api(Description="Stores are entities which represents physical stores or an online/web stores.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="Requested store not found", StatusCode=404)]
    [DataContract]
    public partial class GetStoreByNumberRequest
        : ScopedRequest, IReturn<Store>, IGet
    {
        ///<summary>
        ///the number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number of the store.")]
        public virtual string Number { get; set; }

        ///<summary>
        ///The culture name in which language tha data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///Specifies whether or not to load the collection of addresses linked to the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load the collection of addresses linked to the store.")]
        public virtual bool IncludeAddresses { get; set; }

        ///<summary>
        ///Specifies whether or not to load schedules of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load schedules of the store.")]
        public virtual bool IncludeSchedules { get; set; }

        ///<summary>
        ///Specifies whether or not to load the operating status the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load the operating status the store.")]
        public virtual bool IncludeOperatingStatus { get; set; }
    }

    ///<summary>
    ///Stores are entities which represents physical stores or an online/web stores.
    ///</summary>
    [Route("/stores/{ScopeId}/{Id}", "GET")]
    [Api(Description="Stores are entities which represents physical stores or an online/web stores.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="Requested store not found", StatusCode=404)]
    [DataContract]
    public partial class GetStoreRequest
        : ScopedRequest, IReturn<Store>, IGet
    {
        ///<summary>
        ///The culture name in which language tha data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///the unique id of the Store
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique id of the Store")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///Specifies whether or not to load the collection of addresses linked to the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load the collection of addresses linked to the store.")]
        public virtual bool IncludeAddresses { get; set; }

        ///<summary>
        ///Specifies whether or not to load schedules of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load schedules of the store.")]
        public virtual bool IncludeSchedules { get; set; }

        ///<summary>
        ///Specifies whether or not to load the operating status the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load the operating status the store.")]
        public virtual bool IncludeOperatingStatus { get; set; }
    }

    ///<summary>
    ///Stores are entities which represents physical stores or an online/web stores.
    ///</summary>
    [Route("/stores/{ScopeId}/{StoreId}", "PUT")]
    [Api(Description="Stores are entities which represents physical stores or an online/web stores.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateStoreRequest
        : ProfileOperationsRequest, IReturn<Store>, IPut
    {
        public UpdateStoreRequest()
        {
            Addresses = new List<Address>{};
        }

        ///<summary>
        ///the unique identifier of the Store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Store.")]
        public virtual Guid StoreId { get; set; }

        ///<summary>
        ///a business centric number to identify the store that could be used to link the store to external data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a business centric number to identify the store that could be used to link the store to external data.")]
        public virtual string Number { get; set; }

        ///<summary>
        ///Is this store currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the store to be hidden from many business processes until re-activated. 
        ///</summary>
        [DataMember]
        [ApiMember(Description="Is this store currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the store to be hidden from many business processes until re-activated. ")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///the name of the store. Each store must have a name that unique in the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the store. Each store must have a name that unique in the system.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the display name of the store. This is a multilingual value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name of the store. This is a multilingual value.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///the general description of the store. Use this to provide internal (admin) users information about this store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the general description of the store. Use this to provide internal (admin) users information about this store.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///Indicates if this is a physical or a virtual store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if this is a physical or a virtual store.")]
        public virtual StoreType StoreType { get; set; }

        ///<summary>
        ///Indicates if this is a physical or a virtual location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if this is a physical or a virtual location.")]
        public virtual LocationClass LocationClass { get; set; }

        ///<summary>
        ///the full name of the manager of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the full name of the manager of the store.")]
        public virtual string Manager { get; set; }

        ///<summary>
        ///the telephone number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the telephone number of the store.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///the extension for the telephone number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension for the telephone number of the store.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///the fax number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fax number of the store.")]
        public virtual string FaxNumber { get; set; }

        ///<summary>
        ///the extension for the fax number of the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension for the fax number of the store.")]
        public virtual string FaxExtension { get; set; }

        ///<summary>
        ///the email of the store. This could be a specific person's address or a general customerService@ address depending on the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email of the store. This could be a specific person's address or a general customerService@ address depending on the store.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///a value indicating whether this location supports pickup for transferred items, and at the same time doesn't allow pickup from inventory.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this location supports pickup for transferred items, and at the same time doesn't allow pickup from inventory.")]
        public virtual bool IsPickUpLocation { get; set; }

        ///<summary>
        ///a value indicating whether this location supports pickup both for transferred items and from inventory
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this location supports pickup both for transferred items and from inventory")]
        public virtual bool SupportPickUp { get; set; }

        ///<summary>
        ///a value indicating whether this store supports delivery for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this store supports delivery for order fulfillment.")]
        public virtual bool SupportDelivery { get; set; }

        ///<summary>
        ///a value indicating whether this store supports shipping for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this store supports shipping for order fulfillment.")]
        public virtual bool SupportShipping { get; set; }

        ///<summary>
        ///a value indicating whether this store supports ship to store for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this store supports ship to store for order fulfillment.")]
        public virtual bool SupportShipToStore { get; set; }

        ///<summary>
        ///the store operating status. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store operating status. This value is not loaded by default.")]
        public virtual OperatingStatus OperatingStatus { get; set; }

        ///<summary>
        ///the store/warehouse opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the store/warehouse opening hours schedule. This value is not loaded by default.")]
        public virtual FulfillmentSchedule Schedule { get; set; }

        ///<summary>
        ///the pickup service opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the pickup service opening hours schedule. This value is not loaded by default.")]
        public virtual FulfillmentSchedule PickUpSchedule { get; set; }

        ///<summary>
        ///the delivery service opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the delivery service opening hours schedule. This value is not loaded by default.")]
        public virtual FulfillmentSchedule DeliverySchedule { get; set; }

        ///<summary>
        ///The time zone of the schedules.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time zone of the schedules.")]
        public virtual string TimeZone { get; set; }

        ///<summary>
        ///A value indicating whether this fulfillment location manage his own schedule for delivery
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this fulfillment location manage his own schedule for delivery")]
        public virtual bool DeliveryScheduleManaged { get; set; }

        ///<summary>
        ///A value indicating whether this fulfillment location manage his own schedule for pickup
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this fulfillment location manage his own schedule for pickup")]
        public virtual bool PickUpScheduleManaged { get; set; }

        ///<summary>
        ///The inventory location identifier related to this fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier related to this fulfillment location")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The inventory provider identifier to use with this fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory provider identifier to use with this fulfillment location")]
        public virtual string InventoryProviderId { get; set; }

        ///<summary>
        ///value indicating whether this store has inventory enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="value indicating whether this store has inventory enabled")]
        public virtual bool IsInventoryEnabled { get; set; }

        ///<summary>
        ///value indicating whether inventory availability to promise is enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="value indicating whether inventory availability to promise is enabled")]
        public virtual bool IsAtpEnabled { get; set; }

        ///<summary>
        ///the property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The store's addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store's addresses.")]
        public virtual List<Address> Addresses { get; set; }

        ///<summary>
        ///The fulfillment transition type  driven from FulfillmentTransitionType lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment transition type  driven from FulfillmentTransitionType lookup")]
        public virtual string FulfillmentTransitionType { get; set; }

        ///<summary>
        ///The fulfillment transition cut off time - only the time portion is considered
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment transition cut off time - only the time portion is considered")]
        public virtual DateTime FulfillmentTransitionCutOffTime { get; set; }

        ///<summary>
        ///The fulfillment transition Lead Time
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment transition Lead Time")]
        public virtual decimal FulfillmentTransitionLeadTime { get; set; }
    }

    ///<summary>
    ///Stores are entities which represents physical stores or an online/web stores.
    ///</summary>
    [Route("/stores/{ScopeId}/{Id}/associatedScope", "PUT")]
    [Api(Description="Stores are entities which represents physical stores or an online/web stores.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateStoreScopeAssociationRequest
        : ScopedRequest, IReturnVoid, IPut
    {
        ///<summary>
        ///the unique identifier of the Store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Store.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The store's associated scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store's associated scope.")]
        [Required]
        public virtual string AssociatedScope { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Customers.Warehouses
{

    ///<summary>
    ///Warehouses are entities which represents physical warehouses.
    ///</summary>
    [Route("/warehouses/{ScopeId}/createOrUpdate", "PUT")]
    [Api(Description="Warehouses are entities which represents physical warehouses.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateOrUpdateWarehouseByNumberRequest
        : CreateWarehouseRequestBase, IReturn<Warehouse>, IPut
    {
    }

    ///<summary>
    ///Warehouses are entities which represents physical warehouses.
    ///</summary>
    [Route("/warehouses/{ScopeId}", "POST")]
    [Api(Description="Warehouses are entities which represents physical warehouses.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateWarehouseRequest
        : CreateWarehouseRequestBase, IReturn<Warehouse>, IPost
    {
        ///<summary>
        ///the unique identifier of the Warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Warehouse.")]
        public virtual Guid Id { get; set; }
    }

    [DataContract]
    public partial class CreateWarehouseRequestBase
        : ProfileOperationsRequest
    {
        public CreateWarehouseRequestBase()
        {
            Addresses = new List<Address>{};
            AssociatedScopes = new List<string>{};
        }

        ///<summary>
        ///a business centric number to identify the warehouse that could be used to link the warehouse to external data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a business centric number to identify the warehouse that could be used to link the warehouse to external data.")]
        public virtual string Number { get; set; }

        ///<summary>
        ///Is this warehouse currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the warehouse to be hidden from many business processes until re-activated. 
        ///</summary>
        [DataMember]
        [ApiMember(Description="Is this warehouse currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the warehouse to be hidden from many business processes until re-activated. ")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///the name of the warehouse. Each warehouse must have a name that unique in the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the warehouse. Each warehouse must have a name that unique in the system.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the display name of the warehouse. This is a multilingual value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name of the warehouse. This is a multilingual value.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///the general description of the warehouse. Use this to provide internal (admin) users information about this warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the general description of the warehouse. Use this to provide internal (admin) users information about this warehouse.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///Indicates if this is a physical or a virtual location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if this is a physical or a virtual location.")]
        public virtual LocationClass LocationClass { get; set; }

        ///<summary>
        ///the full name of the manager of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the full name of the manager of the warehouse.")]
        public virtual string Manager { get; set; }

        ///<summary>
        ///the telephone number of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the telephone number of the warehouse.")]
        public virtual string PhoneNumber { get; set; }

        ///<summary>
        ///the extension for the telephone number of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension for the telephone number of the warehouse.")]
        public virtual string PhoneExtension { get; set; }

        ///<summary>
        ///the fax number of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fax number of the warehouse.")]
        public virtual string FaxNumber { get; set; }

        ///<summary>
        ///the extension for the fax number of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the extension for the fax number of the warehouse.")]
        public virtual string FaxExtension { get; set; }

        ///<summary>
        ///the email of the warehouse. This could be a specific person's address or a general customerService@ address depending on the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email of the warehouse. This could be a specific person's address or a general customerService@ address depending on the warehouse.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///a value indicating whether this location supports pickup for transferred items, and at the same time doesn't allow pickup from inventory.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this location supports pickup for transferred items, and at the same time doesn't allow pickup from inventory.")]
        public virtual bool IsPickUpLocation { get; set; }

        ///<summary>
        ///a value indicating whether this location supports pickup both for transferred items and from inventory
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this location supports pickup both for transferred items and from inventory")]
        public virtual bool SupportPickUp { get; set; }

        ///<summary>
        ///a value indicating whether this warehouse supports delivery for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this warehouse supports delivery for order fulfillment.")]
        public virtual bool SupportDelivery { get; set; }

        ///<summary>
        ///a value indicating whether this warehouse supports shipping for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this warehouse supports shipping for order fulfillment.")]
        public virtual bool SupportShipping { get; set; }

        ///<summary>
        ///a value indicating whether this warehouse supports ship to store for order fulfillment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether this warehouse supports ship to store for order fulfillment.")]
        public virtual bool SupportShipToStore { get; set; }

        ///<summary>
        ///the warehouse operating status. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the warehouse operating status. This value is not loaded by default.")]
        public virtual OperatingStatus OperatingStatus { get; set; }

        ///<summary>
        ///the opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the opening hours schedule. This value is not loaded by default.")]
        public virtual FulfillmentSchedule Schedule { get; set; }

        ///<summary>
        ///the pickup service opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the pickup service opening hours schedule. This value is not loaded by default.")]
        public virtual FulfillmentSchedule PickUpSchedule { get; set; }

        ///<summary>
        ///the delivery service opening hours schedule. This value is not loaded by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the delivery service opening hours schedule. This value is not loaded by default.")]
        public virtual FulfillmentSchedule DeliverySchedule { get; set; }

        ///<summary>
        ///The time zone of the schedules.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time zone of the schedules.")]
        public virtual string TimeZone { get; set; }

        ///<summary>
        ///A value indicating whether this fulfillment location manage his own schedule for delivery
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this fulfillment location manage his own schedule for delivery")]
        public virtual bool DeliveryScheduleManaged { get; set; }

        ///<summary>
        ///A value indicating whether this fulfillment location manage his own schedule for pickup
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this fulfillment location manage his own schedule for pickup")]
        public virtual bool PickUpScheduleManaged { get; set; }

        ///<summary>
        ///the property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The warehouse's addresses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The warehouse's addresses.")]
        public virtual List<Address> Addresses { get; set; }

        ///<summary>
        ///The inventory location identifier related to this fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier related to this fulfillment location")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The inventory provider identifier to use with this fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory provider identifier to use with this fulfillment location")]
        public virtual string InventoryProviderId { get; set; }

        ///<summary>
        ///value indicating whether inventory is enabled for this fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="value indicating whether inventory is enabled for this fulfillment location.")]
        public virtual bool IsInventoryEnabled { get; set; }

        ///<summary>
        ///value indicating whether inventory availability to promise is enabled.
        ///</summary>
        [DataMember]
        [ApiMember(Description="value indicating whether inventory availability to promise is enabled.")]
        public virtual bool IsAtpEnabled { get; set; }

        ///<summary>
        ///The warehouse's associated scopes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The warehouse's associated scopes.")]
        public virtual List<string> AssociatedScopes { get; set; }

        ///<summary>
        ///The fulfillment transition type  driven from FulfillmentTransitionType lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment transition type  driven from FulfillmentTransitionType lookup")]
        public virtual string FulfillmentTransitionType { get; set; }

        ///<summary>
        ///The fulfillment transition cut off time - only the time portion is considered
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment transition cut off time - only the time portion is considered")]
        public virtual DateTime FulfillmentTransitionCutOffTime { get; set; }

        ///<summary>
        ///The fulfillment transition Lead Time
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment transition Lead Time")]
        public virtual decimal FulfillmentTransitionLeadTime { get; set; }
    }

    ///<summary>
    ///Warehouses are entities which represents physical warehouses.
    ///</summary>
    [Route("/warehouses/{ScopeId}/{Id}", "DELETE")]
    [Api(Description="Warehouses are entities which represents physical warehouses.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteWarehouseRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///the unique identifier of the Warehouse to be updated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Warehouse to be updated.")]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Warehouses are entities which represents physical warehouses.
    ///</summary>
    [Route("/warehouses/{ScopeId}/find", "POST")]
    [Api(Description="Warehouses are entities which represents physical warehouses.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindWarehousesRequest
        : QueryRequestBase, IReturn<FindWarehousesQueryResult>, IPost
    {
        ///<summary>
        ///The word or phrase the warehouse name or number is beginning with
        ///</summary>
        [DataMember]
        [ApiMember(Description="The word or phrase the warehouse name or number is beginning with")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        ///Includes the warehouses of the child score.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Includes the warehouses of the child score.")]
        public virtual bool IncludeChildScopes { get; set; }
    }

    ///<summary>
    ///Warehouses are entities which represents physical warehouses.
    ///</summary>
    [Route("/warehouses/{ScopeId}/byNumber/{Number}", "GET")]
    [Api(Description="Warehouses are entities which represents physical warehouses.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="Requested warehouse not found", StatusCode=404)]
    [DataContract]
    public partial class GetWarehouseByNumberRequest
        : ScopedRequest, IReturn<Warehouse>, IGet
    {
        ///<summary>
        ///the number of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number of the warehouse.")]
        public virtual string Number { get; set; }

        ///<summary>
        ///The culture name in which language tha data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///Specifies whether or not to load the collection of addresses linked to the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load the collection of addresses linked to the warehouse.")]
        public virtual bool IncludeAddresses { get; set; }

        ///<summary>
        ///Specifies whether or not to load schedules of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load schedules of the warehouse.")]
        public virtual bool IncludeSchedules { get; set; }

        ///<summary>
        ///Specifies whether or not to load the operating status of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load the operating status of the warehouse.")]
        public virtual bool IncludeOperatingStatus { get; set; }
    }

    ///<summary>
    ///Warehouses are entities which represents physical warehouses.
    ///</summary>
    [Route("/warehouses/{ScopeId}/{Id}", "GET")]
    [Api(Description="Warehouses are entities which represents physical warehouses.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="Requested warehouse not found", StatusCode=404)]
    [DataContract]
    public partial class GetWarehouseRequest
        : ScopedRequest, IReturn<Warehouse>, IGet
    {
        ///<summary>
        ///The unique id of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique id of the warehouse.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The culture name in which language tha data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///Specifies whether or not to load the collection of addresses linked to the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load the collection of addresses linked to the warehouse.")]
        public virtual bool IncludeAddresses { get; set; }

        ///<summary>
        ///Specifies whether or not to load schedules of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load schedules of the warehouse.")]
        public virtual bool IncludeSchedules { get; set; }

        ///<summary>
        ///Specifies whether or not to load the operating status of the warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load the operating status of the warehouse.")]
        public virtual bool IncludeOperatingStatus { get; set; }
    }

    ///<summary>
    ///Warehouses are entities which represents physical warehouses.
    ///</summary>
    [Route("/warehouses/{ScopeId}/{Id}", "PUT")]
    [Api(Description="Warehouses are entities which represents physical warehouses.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateWarehouseRequest
        : CreateWarehouseRequestBase, IReturn<Warehouse>, IPut
    {
        ///<summary>
        ///the unique identifier of the Warehouse to be updated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Warehouse to be updated.")]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Warehouses are entities which represents physical warehouses.
    ///</summary>
    [Route("/warehouses/{ScopeId}/{Id}/associatedScopes", "PUT")]
    [Api(Description="Warehouses are entities which represents physical warehouses.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateWarehouseScopeAssociationsRequest
        : ScopedRequest, IReturnVoid, IPut
    {
        public UpdateWarehouseScopeAssociationsRequest()
        {
            AssociatedScopes = new List<string>{};
        }

        ///<summary>
        ///the unique identifier of the Warehouse.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Warehouse.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The warehouse's associated scopes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The warehouse's associated scopes.")]
        public virtual List<string> AssociatedScopes { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Diagnostic
{

    ///<summary>
    ///Diagnostics.
    ///</summary>
    [Route("/diagnostic/basic", "GET")]
    [Api(Description="Diagnostics.")]
    [DataContract]
    public partial class BasicDiagnosticRequest
        : IReturn<BasicDiagnostic>, IGet
    {
    }

    ///<summary>
    ///Diagnostics.
    ///</summary>
    [Route("/diagnostic/caches", "GET")]
    [Api(Description="Diagnostics.")]
    [DataContract]
    public partial class GetCacheStatusRequest
        : IReturn<List<CacheStatus>>, IGet
    {
        ///<summary>
        ///Optional. Name of the cache to retrieve. If none specified return status for all caches
        ///</summary>
        [DataMember]
        [ApiMember(Description="Optional. Name of the cache to retrieve. If none specified return status for all caches")]
        public virtual string Name { get; set; }
    }

    ///<summary>
    ///Diagnostics.
    ///</summary>
    [Route("/diagnostic/versioninfo", "GET")]
    [Api(Description="Diagnostics.")]
    [DataContract]
    public partial class GetVersionInfoRequest
        : IReturn<VersionInfo>, IGet
    {
        ///<summary>
        ///The culture name in which language the url will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the url will be returned")]
        public virtual string CultureName { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Marketing
{

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{CampaignId}/full", "PUT")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AddOrUpdateCampaignRequest
        : ScopedRequest, IReturn<Campaign>, IPut
    {
        public AddOrUpdateCampaignRequest()
        {
            Promotions = new List<Promotion>{};
        }

        ///<summary>
        ///The id of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the campaign.")]
        public virtual Guid CampaignId { get; set; }

        ///<summary>
        ///The name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The start date in the time zone of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start date in the time zone of the campaign.")]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///The end date in the time zone of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date in the time zone of the campaign.")]
        public virtual DateTime EndDate { get; set; }

        ///<summary>
        ///The time zone of the Campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time zone of the Campaign.")]
        public virtual string TimeZone { get; set; }

        ///<summary>
        ///The type of the Campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the Campaign.")]
        public virtual string Type { get; set; }

        ///<summary>
        ///Indicates whether the campaign allows opting out.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the campaign allows opting out.")]
        public virtual bool AllowOptOut { get; set; }

        ///<summary>
        ///The promotions
        ///</summary>
        [DataMember]
        [ApiMember(Description="The promotions")]
        public virtual List<Promotion> Promotions { get; set; }

        ///<summary>
        ///The priority of the Campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The priority of the Campaign")]
        public virtual int Priority { get; set; }

        ///<summary>
        ///The status of the Campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status of the Campaign")]
        public virtual CampaignStatus Status { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{Id}/cancel", "POST")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CancelCampaignRequest
        : ScopedRequest, IReturn<Campaign>, IPost
    {
        ///<summary>
        ///The id of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the campaign.")]
        [Required]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///The coupon can be applied on a cart or an order. When a promotion is associated with one or more coupon codes, one of the coupons must appear in the customer's Cart to get the promotional discount.
    ///</summary>
    [Route("/coupons/consume/code", "POST")]
    [Api(Description="The coupon can be applied on a cart or an order. When a promotion is associated with one or more coupon codes, one of the coupons must appear in the customer's Cart to get the promotional discount.")]
    [DataContract]
    public partial class ConsumeCouponByCodeRequest
        : IReturnVoid, IPost
    {
        ///<summary>
        ///The coupon.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The coupon.")]
        public virtual string CouponCode { get; set; }

        ///<summary>
        ///The identifier of the customer that is consuming the coupon
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the customer that is consuming the coupon")]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///The coupon can be applied on a cart or an order. When a promotion is associated with one or more coupon codes, one of the coupons must appear in the customer's Cart to get the promotional discount.
    ///</summary>
    [Route("/coupons/consume", "POST")]
    [Api(Description="The coupon can be applied on a cart or an order. When a promotion is associated with one or more coupon codes, one of the coupons must appear in the customer's Cart to get the promotional discount.")]
    [DataContract]
    public partial class ConsumeCouponRequest
        : CouponOperationRequestBase, IReturnVoid, IPost
    {
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{FromCampaignId}/copy", "POST")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CopyCampaignRequest
        : ScopedRequest, IReturn<Campaign>, IPost
    {
        ///<summary>
        ///The id of the campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the campaign")]
        public virtual Guid FromCampaignId { get; set; }

        ///<summary>
        ///The name of the new campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the new campaign")]
        public virtual string NewCampaignName { get; set; }

        ///<summary>
        ///The start date in the time zone of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start date in the time zone of the campaign.")]
        public virtual DateTime NewCampaignStartDate { get; set; }

        ///<summary>
        ///The end date in the time zone of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date in the time zone of the campaign.")]
        public virtual DateTime? NewCampaignEndDate { get; set; }

        ///<summary>
        ///The description of the new campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the new campaign")]
        public virtual string NewCampaignDescription { get; set; }

        ///<summary>
        ///The timezone fo the campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The timezone fo the campaign")]
        public virtual string TimeZone { get; set; }

        ///<summary>
        ///The type of the campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the campaign")]
        public virtual string Type { get; set; }

        ///<summary>
        ///The priority of the Campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The priority of the Campaign")]
        public virtual int? Priority { get; set; }
    }

    [DataContract]
    public partial class CouponOperationRequestBase
    {
        ///<summary>
        ///The coupon.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The coupon.")]
        public virtual Coupon Coupon { get; set; }

        ///<summary>
        ///The identifier of the customer that is consuming the coupon
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the customer that is consuming the coupon")]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}", "POST")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateCampaignRequest
        : ScopedRequest, IReturn<Campaign>, IPost
    {
        ///<summary>
        ///The name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The start date in the time zone of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start date in the time zone of the campaign.")]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///The end date in the time zone of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date in the time zone of the campaign.")]
        public virtual DateTime EndDate { get; set; }

        ///<summary>
        ///The time zone of the Campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time zone of the Campaign.")]
        public virtual string TimeZone { get; set; }

        ///<summary>
        ///The type of the Campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the Campaign.")]
        public virtual string Type { get; set; }

        ///<summary>
        ///Indicates whether the campaign allows opting out.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the campaign allows opting out.")]
        public virtual bool AllowOptOut { get; set; }

        ///<summary>
        ///The priority of the Campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The priority of the Campaign")]
        public virtual int Priority { get; set; }
    }

    ///<summary>
    ///Segments are entities which are used to store one, or more marketing targeting conditions.
    ///</summary>
    [Route("/segments", "POST")]
    [Api(Description="Segments are entities which are used to store one, or more marketing targeting conditions.")]
    [DataContract]
    public partial class CreateOrUpdateSegmentRequest
        : IReturn<Segment>, IPost
    {
        ///<summary>
        ///The name of the segment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the segment", IsRequired=true)]
        public virtual string Name { get; set; }

        ///<summary>
        ///The description of the segment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the segment", IsRequired=true)]
        public virtual string Description { get; set; }

        ///<summary>
        ///The targeting condition (customer requirements) for the promotion to be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The targeting condition (customer requirements) for the promotion to be applied.")]
        public virtual TargetingCondition TargetingCondition { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether the segment is active and usable in promotion
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether the segment is active and usable in promotion")]
        public virtual bool IsActive { get; set; }
    }

    ///<summary>
    ///Segments are entities which are used to store one, or more marketing targeting conditions.
    ///</summary>
    [Route("/segment", "POST")]
    [Api(Description="Segments are entities which are used to store one, or more marketing targeting conditions.")]
    [DataContract]
    public partial class CreateSegmentRequest
        : IReturn<Segment>, IPost
    {
        ///<summary>
        ///The name of the segment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the segment", IsRequired=true)]
        public virtual string Name { get; set; }

        ///<summary>
        ///The description of the segment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the segment", IsRequired=true)]
        public virtual string Description { get; set; }

        ///<summary>
        ///The targeting condition (customer requirements) for the promotion to be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The targeting condition (customer requirements) for the promotion to be applied.")]
        public virtual TargetingCondition TargetingCondition { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether the segment is active and usable in promotion
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether the segment is active and usable in promotion")]
        public virtual bool IsActive { get; set; }
    }

    ///<summary>
    ///The coupon can be applied on a cart or an order. When a promotion is associated with one or more coupon codes, one of the coupons must appear in the customer's Cart to get the promotional discount.
    ///</summary>
    [Route("/coupons/delete/code", "DELETE")]
    [Api(Description="The coupon can be applied on a cart or an order. When a promotion is associated with one or more coupon codes, one of the coupons must appear in the customer's Cart to get the promotional discount.")]
    [DataContract]
    public partial class DeleteCouponByCodeRequest
        : IReturn<DeleteCouponResult>, IDelete
    {
        ///<summary>
        ///The coupon code.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The coupon code.")]
        public virtual string CouponCode { get; set; }

        ///<summary>
        ///Delete the promo code if it is used in an active promotion and update the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Delete the promo code if it is used in an active promotion and update the promotion.")]
        public virtual bool Force { get; set; }
    }

    ///<summary>
    ///Segments are entities which are used to store one, or more marketing targeting conditions.
    ///</summary>
    [Route("/segments/{SegmentId}", "DELETE")]
    [Api(Description="Segments are entities which are used to store one, or more marketing targeting conditions.")]
    [ApiResponse(Description="Requested segment not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteSegmentRequest
        : IReturn<DeleteSegmentResult>, IDelete
    {
        ///<summary>
        ///The id of the segment to delete.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the segment to delete.")]
        public virtual Guid SegmentId { get; set; }
    }

    ///<summary>
    ///A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.
    ///</summary>
    [Route("/promotions/{PromotionId}/coupons/export", "POST")]
    [Api(Description="A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.")]
    [DataContract]
    public partial class ExportCouponCodesRequest
        : ScopedRequest, IReturn<List<string>>, IPost
    {
        ///<summary>
        ///The promotion id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The promotion id.")]
        public virtual Guid PromotionId { get; set; }

        ///<summary>
        ///The promotion coupon mode.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The promotion coupon mode.")]
        public virtual CouponMode CouponMode { get; set; }

        ///<summary>
        ///The user name of the request initiator.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The user name of the request initiator.")]
        public virtual string RequestedBy { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/find", "POST")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [DataContract]
    public partial class FindCampaignsRequest
        : QueryRequestBase, IReturn<CampaignQueryResult>, IPost
    {
        ///<summary>
        ///The search term used by the query. The search term will search on the campaign name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The search term used by the query. The search term will search on the campaign name.")]
        public virtual string SearchTerm { get; set; }

        ///<summary>
        ///The campaign search mode.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The campaign search mode.")]
        public virtual CampaignSearchMode SearchMode { get; set; }

        ///<summary>
        ///The type of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the campaign.")]
        public virtual string CampaignType { get; set; }

        ///<summary>
        ///The range of dates for the campaign's start date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The range of dates for the campaign's start date")]
        public virtual Range<DateTime> StartDateRange { get; set; }

        ///<summary>
        ///The range of dates for the campaign's end date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The range of dates for the campaign's end date")]
        public virtual Range<DateTime> EndDateRange { get; set; }

        ///<summary>
        ///The date time at which the campaign must be effective.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date time at which the campaign must be effective.")]
        public virtual DateTime? EffectiveDateTime { get; set; }

        ///<summary>
        ///The status of the campaign(s) to search for.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status of the campaign(s) to search for.")]
        public virtual CampaignStatus CampaignStatus { get; set; }
    }

    ///<summary>
    ///Segments are entities which are used to store one, or more marketing targeting conditions.
    ///</summary>
    [Route("/segments/find", "POST")]
    [Api(Description="Segments are entities which are used to store one, or more marketing targeting conditions.")]
    [ApiResponse(Description="Requested segment not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindSegmentsRequest
        : IReturn<SegmentQueryResult>, IPost
    {
        ///<summary>
        ///Indicates whether the targeting conditions in the segment should be validated
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the targeting conditions in the segment should be validated")]
        public virtual bool ValidateTargeting { get; set; }

        ///<summary>
        ///The starting index. (The offset of the first record when requesting paged data)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting index. (The offset of the first record when requesting paged data)")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The number of items to return. (This is the page size when requesting paged data)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of items to return. (This is the page size when requesting paged data)")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///The sort by specifying the SegmentOrderField.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sort by specifying the SegmentOrderField.")]
        public virtual SegmentOrderField SortOrderField { get; set; }

        ///<summary>
        ///The sort direction. (Ascending or descending)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sort direction. (Ascending or descending)")]
        public virtual SortDirection SortDirection { get; set; }

        ///<summary>
        ///The status of the segment(s) to search for.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status of the segment(s) to search for.")]
        public virtual SegmentStatus SegmentStatus { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{CampaignId}/promotions", "GET")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="Requested promotions not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCampaignPromotionsRequest
        : ScopedRequest, IReturn<List<Promotion>>, IGet
    {
        ///<summary>
        ///The id of the campaign to retrieve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the campaign to retrieve.")]
        public virtual Guid CampaignId { get; set; }

        ///<summary>
        ///Indicates whether the targeting conditions in the promotions should be validated (only applicable if IncludePromotions is True)
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the targeting conditions in the promotions should be validated (only applicable if IncludePromotions is True)")]
        public virtual bool ValidateTargeting { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{CampaignId}", "GET")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="Requested campaign not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCampaignRequest
        : ScopedRequest, IReturn<Campaign>, IGet
    {
        ///<summary>
        ///The id of the campaign to retrieve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the campaign to retrieve.")]
        public virtual Guid CampaignId { get; set; }

        ///<summary>
        ///Indicates whether the promotions be fully loaded.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the promotions be fully loaded.")]
        public virtual bool IncludePromotions { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/byIds/{CampaignIds}", "GET")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="Requested campaigns not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCampaignsRequest
        : ScopedRequest, IReturn<List<Campaign>>, IGet
    {
        public GetCampaignsRequest()
        {
            CampaignIds = new List<Guid>{};
        }

        ///<summary>
        ///Gets or sets the ids of the campaigns to retrieve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the ids of the campaigns to retrieve.", IsRequired=true)]
        public virtual List<Guid> CampaignIds { get; set; }
    }

    ///<summary>
    ///The coupon can be applied on a cart or an order. When a promotion is associated with one or more coupon codes, one of the coupons must appear in the customer's Cart to get the promotional discount.
    ///</summary>
    [Route("/coupons/{CouponCode}", "GET")]
    [Api(Description="The coupon can be applied on a cart or an order. When a promotion is associated with one or more coupon codes, one of the coupons must appear in the customer's Cart to get the promotional discount.")]
    [ApiResponse(Description="The coupon does not exists.", StatusCode=404)]
    [DataContract]
    public partial class GetCouponRequest
        : IReturn<Coupon>, IGet
    {
        ///<summary>
        ///The coupon code.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The coupon code.")]
        public virtual string CouponCode { get; set; }
    }

    ///<summary>
    ///The coupon can be applied on a cart or an order. When a promotion is associated with one or more coupon codes, one of the coupons must appear in the customer's Cart to get the promotional discount.
    ///</summary>
    [Route("/coupons/validates", "POST")]
    [Route("/coupons/validates/{CustomerId}", "POST")]
    [Api(Description="The coupon can be applied on a cart or an order. When a promotion is associated with one or more coupon codes, one of the coupons must appear in the customer's Cart to get the promotional discount.")]
    [DataContract]
    public partial class GetCouponsRequest
        : IReturn<List<Coupon>>, IPost
    {
        public GetCouponsRequest()
        {
            CouponCodes = new List<string>{};
        }

        ///<summary>
        ///The coupons to retrieve
        ///</summary>
        [DataMember]
        [ApiMember(Description="The coupons to retrieve")]
        public virtual List<string> CouponCodes { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The customer unique identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer unique identifier")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The effective date time used to validate the coupon.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The effective date time used to validate the coupon.")]
        public virtual DateTime EffectiveDateTime { get; set; }

        ///<summary>
        ///Should the coupons be validated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Should the coupons be validated.")]
        public virtual bool ValidateCoupons { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/getlive", "GET")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [DataContract]
    public partial class GetLiveCampaignsRequest
        : ScopedRequest, IReturn<List<Campaign>>, IGet
    {
        ///<summary>
        ///The date time at which the campaign must be effective.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date time at which the campaign must be effective.")]
        public virtual DateTime EffectiveDateTime { get; set; }

        ///<summary>
        ///Indicates whether to include promotions of retrieved campaigns.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether to include promotions of retrieved campaigns.")]
        public virtual bool IncludePromotions { get; set; }
    }

    ///<summary>
    ///Requests related to the marketing application.
    ///</summary>
    [Route("/marketing/settings", "GET")]
    [Api(Description="Requests related to the marketing application.")]
    [DataContract]
    public partial class GetMarketingSettingsRequest
        : IReturn<Settings>, IGet
    {
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{CampaignId}/promotions/{PromotionId}", "GET")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="Requested promotion not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetPromotionRequest
        : ScopedRequest, IReturn<Promotion>, IGet
    {
        ///<summary>
        ///The id of the promotion's campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion's campaign")]
        public virtual Guid CampaignId { get; set; }

        ///<summary>
        ///The id of the promotion to retrieve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion to retrieve.")]
        public virtual Guid PromotionId { get; set; }

        ///<summary>
        ///Indicates whether the targeting conditions in the promotion should be validated
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the targeting conditions in the promotion should be validated")]
        public virtual bool ValidateTargeting { get; set; }
    }

    ///<summary>
    ///Segments are entities which are used to store one, or more marketing targeting conditions.
    ///</summary>
    [Route("/segments/{SegmentId}", "GET")]
    [Api(Description="Segments are entities which are used to store one, or more marketing targeting conditions.")]
    [ApiResponse(Description="Requested segment not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetSegmentRequest
        : IReturn<Segment>, IGet
    {
        ///<summary>
        ///The id of the segment to retrieve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the segment to retrieve.")]
        public virtual Guid SegmentId { get; set; }

        ///<summary>
        ///Indicates whether the targeting conditions in the segment should be validated
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the targeting conditions in the segment should be validated")]
        public virtual bool ValidateTargeting { get; set; }
    }

    ///<summary>
    ///Segments are entities which are used to store one, or more marketing targeting conditions.
    ///</summary>
    [Route("/segments", "GET")]
    [Api(Description="Segments are entities which are used to store one, or more marketing targeting conditions.")]
    [ApiResponse(Description="Requested segment not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetSegmentsRequest
        : IReturn<List<Segment>>, IGet
    {
        ///<summary>
        ///Indicates whether the targeting conditions in the segment should be validated
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the targeting conditions in the segment should be validated")]
        public virtual bool ValidateTargeting { get; set; }

        ///<summary>
        ///The starting index. (The offset of the first record when requesting paged data)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting index. (The offset of the first record when requesting paged data)")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The number of items to return. (This is the page size when requesting paged data)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of items to return. (This is the page size when requesting paged data)")]
        public virtual int MaximumItems { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/targeting", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetTargetingMetadataRequest
        : IReturn<GetTargetingMetadataResponse>, IGet
    {
        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.
    ///</summary>
    [Route("/promotions/{PromotionId}/coupons/import", "POST")]
    [Api(Description="A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.")]
    [DataContract]
    public partial class ImportCouponCodesRequest
        : ScopedRequest, IReturn<TaskInfo>, IPost
    {
        public ImportCouponCodesRequest()
        {
            CouponCodes = new List<string>{};
        }

        ///<summary>
        ///The promotion id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The promotion id.")]
        public virtual Guid PromotionId { get; set; }

        ///<summary>
        ///The user name of the request initiator
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The user name of the request initiator")]
        public virtual string RequestedBy { get; set; }

        ///<summary>
        ///The (friendly) name of the promotion (used in messages instead of the unique id)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The (friendly) name of the promotion (used in messages instead of the unique id)")]
        public virtual string PromotionName { get; set; }

        ///<summary>
        ///The list of coupon codes to add to the promotion
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The list of coupon codes to add to the promotion")]
        public virtual List<string> CouponCodes { get; set; }

        ///<summary>
        ///The task id. Use this to query the system for the state of the task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task id. Use this to query the system for the state of the task.")]
        public virtual Guid TaskId { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    ///<summary>
    ///The coupon can be applied on a cart or an order. When a promotion is associated with one or more coupon codes, one of the coupons must appear in the customer's Cart to get the promotional discount.
    ///</summary>
    [Route("/coupons/liberate", "POST")]
    [Api(Description="The coupon can be applied on a cart or an order. When a promotion is associated with one or more coupon codes, one of the coupons must appear in the customer's Cart to get the promotional discount.")]
    [DataContract]
    public partial class LiberateCouponRequest
        : CouponOperationRequestBase, IReturnVoid, IPost
    {
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{Id}/pause", "POST")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class PauseCampaignRequest
        : ScopedRequest, IReturn<Campaign>, IPost
    {
        ///<summary>
        ///The id of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the campaign.")]
        [Required]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.
    ///</summary>
    [Route("/promotion/engine/", "POST")]
    [Api(Description="A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.")]
    [DataContract]
    public partial class ProcessPromotionEngineRequest
        : IReturn<PromotionEngineResult>, IPost
    {
        ///<summary>
        ///The cart to process
        ///</summary>
        [DataMember]
        [ApiMember(Description="The cart to process")]
        public virtual Cart Cart { get; set; }

        ///<summary>
        ///The customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer")]
        public virtual Customer Customer { get; set; }

        ///<summary>
        ///The process mode of the PromotionEngine
        ///</summary>
        [DataMember]
        [ApiMember(Description="The process mode of the PromotionEngine")]
        public virtual ProcessPromotionEngineMode ProcessPromotionEngineMode { get; set; }

        ///<summary>
        ///The Order Creation date if exists or the cart modification date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Order Creation date if exists or the cart modification date")]
        public virtual DateTime OrderOrCartDateTime { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{Id}/publish", "POST")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class PublishCampaignRequest
        : ScopedRequest, IReturn<Campaign>, IPost
    {
        ///<summary>
        ///The id of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the campaign.")]
        [Required]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{Id}/reject", "POST")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class RejectCampaignRequest
        : ScopedRequest, IReturn<Campaign>, IPost
    {
        ///<summary>
        ///The id of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the campaign.")]
        [Required]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{Id}/submit", "POST")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class SubmitCampaignRequest
        : ScopedRequest, IReturn<Campaign>, IPost
    {
        ///<summary>
        ///The id of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the campaign.")]
        [Required]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{Id}", "PUT")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateCampaignRequest
        : ScopedRequest, IReturn<Campaign>, IPut
    {
        ///<summary>
        ///The id of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the campaign.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The start date in the time zone of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start date in the time zone of the campaign.")]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///The end date in the time zone of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date in the time zone of the campaign.")]
        public virtual DateTime EndDate { get; set; }

        ///<summary>
        ///The time zone of the Campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The time zone of the Campaign.")]
        public virtual string TimeZone { get; set; }

        ///<summary>
        ///The type of the Campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the Campaign.")]
        public virtual string Type { get; set; }

        ///<summary>
        ///Indicates whether the campaign allows opting out.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the campaign allows opting out.")]
        public virtual bool AllowOptOut { get; set; }

        ///<summary>
        ///The priority of the Campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The priority of the Campaign")]
        public virtual int Priority { get; set; }

        ///<summary>
        ///The status of the Campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status of the Campaign")]
        public virtual CampaignStatus Status { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{Id}/status", "PUT")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateCampaignStatusRequest
        : ScopedRequest, IReturn<Campaign>, IPut
    {
        ///<summary>
        ///The id of the campaign.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the campaign.")]
        [Required]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The status of the Campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status of the Campaign")]
        [Required]
        public virtual CampaignStatus Status { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/LookupType/Marketing/{LookupName}", "POST")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateMarketingLookupTypeDefinitionRequest
        : IReturn<Lookup>, IPost
    {
        public UpdateMarketingLookupTypeDefinitionRequest()
        {
            Values = new List<LookupValue>{};
        }

        ///<summary>
        ///The name of this lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of this lookup")]
        [Required]
        public virtual string LookupName { get; set; }

        ///<summary>
        ///The display name for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name for this lookup.")]
        [Required]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description of this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of this lookup.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The list of values available for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of values available for this lookup.")]
        public virtual List<LookupValue> Values { get; set; }
    }

    ///<summary>
    ///Requests related to the marketing application.
    ///</summary>
    [Route("/marketing/settings", "PUT")]
    [Api(Description="Requests related to the marketing application.")]
    [DataContract]
    public partial class UpdateMarketingSettingsRequest
        : IReturn<Settings>, IPut
    {
        ///<summary>
        ///Gets or sets a value indicating whether the product picker fetch products by IDs or by skus.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether the product picker fetch products by IDs or by skus.")]
        public virtual ProductPickerMode ProductPickerMode { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether campaign inheritance is managed at the campaign-level.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether campaign inheritance is managed at the campaign-level.")]
        public virtual bool AllowCampaignLevelInheritanceManagement { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether campaign are inherited by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether campaign are inherited by default.")]
        public virtual bool CampaignsAreInheritedByDefault { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether Order rewards are splitted on LineItems or applied on shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether Order rewards are splitted on LineItems or applied on shipment.")]
        public virtual bool OrderRewardsAreSplittedOnLineItem { get; set; }
    }

    ///<summary>
    ///Segments are entities which are used to store one, or more marketing targeting conditions.
    ///</summary>
    [Route("/segment", "PUT")]
    [Api(Description="Segments are entities which are used to store one, or more marketing targeting conditions.")]
    [DataContract]
    public partial class UpdateSegmentRequest
        : IReturn<Segment>, IPut
    {
        ///<summary>
        ///The id of the segment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the segment", IsRequired=true)]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The name of the segment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the segment", IsRequired=true)]
        public virtual string Name { get; set; }

        ///<summary>
        ///The description of the segment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the segment", IsRequired=true)]
        public virtual string Description { get; set; }

        ///<summary>
        ///The targeting condition (customer requirements) for the promotion to be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The targeting condition (customer requirements) for the promotion to be applied.")]
        public virtual TargetingCondition TargetingCondition { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether the segment is active and usable in promotion
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether the segment is active and usable in promotion")]
        public virtual bool IsActive { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Marketing.Promotions
{

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{CampaignId}/promotions", "POST")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreatePromotionRequest
        : ScopedRequest, IReturn<Promotion>, IPost
    {
        ///<summary>
        ///The id of the promotion's campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion's campaign")]
        public virtual Guid CampaignId { get; set; }

        ///<summary>
        ///The promotion to be created
        ///</summary>
        [DataMember]
        [ApiMember(Description="The promotion to be created")]
        public virtual Promotion Promotion { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{CampaignId}/promotions/{PromotionId}", "DELETE")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeletePromotionRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The id of the promotion's campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion's campaign")]
        public virtual Guid CampaignId { get; set; }

        ///<summary>
        ///The id of the promotion to delete
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion to delete")]
        public virtual Guid PromotionId { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/dataexchange/promotions/{PromotionId}/promoCodes/export", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ExportPromoCodesRequest
        : IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///The id of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion.")]
        public virtual Guid PromotionId { get; set; }

        ///<summary>
        ///The path of the file to import. Not used for now.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The path of the file to import. Not used for now.")]
        public virtual string Path { get; set; }

        ///<summary>
        ///The correlation id for the durable task. Not used for now.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task. Not used for now.")]
        public virtual Guid CorrelationId { get; set; }

        ///<summary>
        ///The scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope.")]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.
    ///</summary>
    [Route("/promotions/{ScopeId}/{PromotionId}/promoCodes", "POST")]
    [Api(Description="A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindPromoCodesRequest
        : ScopedRequest, IReturn<FindPromoCodesResponse>, IPost
    {
        ///<summary>
        ///The id of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion.")]
        public virtual Guid PromotionId { get; set; }

        ///<summary>
        ///The starting index. The default value is 0.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting index. The default value is 0.")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The number of items to return. The default value is 10.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of items to return. The default value is 10.")]
        public virtual int MaximumItems { get; set; }
    }

    [DataContract]
    public partial class FindPromoCodesResponse
    {
        public FindPromoCodesResponse()
        {
            PromoCodes = new List<PromoCodeItem>{};
        }

        ///<summary>
        ///The list of the promotion's promo codes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of the promotion's promo codes.")]
        public virtual List<PromoCodeItem> PromoCodes { get; set; }
    }

    ///<summary>
    ///A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.
    ///</summary>
    [Route("/promotions/{ScopeId}/{PromotionId}/promoCodes/generate", "POST")]
    [Api(Description="A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GeneratePromoCodesRequest
        : ScopedRequest, IReturn<GeneratePromoCodesResponse>, IPost
    {
        ///<summary>
        ///The id of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion.")]
        public virtual Guid PromotionId { get; set; }

        ///<summary>
        ///The id of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion.")]
        public virtual string Prefix { get; set; }

        ///<summary>
        ///The id of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion.")]
        public virtual string Suffix { get; set; }

        ///<summary>
        ///The number of promo codes to generate.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of promo codes to generate.")]
        public virtual int Quantity { get; set; }
    }

    [DataContract]
    public partial class GeneratePromoCodesResponse
    {
        ///<summary>
        ///The promo codes generation is successful.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The promo codes generation is successful.")]
        public virtual bool Success { get; set; }
    }

    ///<summary>
    ///A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.
    ///</summary>
    [Route("/promotions/{ScopeId}/{PromotionId}/promoCodes/count", "GET")]
    [Api(Description="A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetPromoCodesCountRequest
        : ScopedRequest, IReturn<GetPromoCodesCountResponse>, IGet
    {
        ///<summary>
        ///The id of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion.")]
        public virtual Guid PromotionId { get; set; }
    }

    [DataContract]
    public partial class GetPromoCodesCountResponse
    {
        ///<summary>
        ///The number of promo codes for the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of promo codes for the promotion.")]
        public virtual int Count { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{CampaignId}/promotions/summaries", "GET")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="Requested campaign not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetPromotionSummariesRequest
        : ScopedRequest, IReturn<PromotionSummaries>, IGet
    {
        ///<summary>
        ///The id of the campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the campaign")]
        public virtual Guid CampaignId { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/dataexchange/promotions/{PromotionId}/promoCodes/import", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ImportPromoCodesRequest
        : IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///The id of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion.")]
        public virtual Guid PromotionId { get; set; }

        ///<summary>
        ///The path of the file to import.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The path of the file to import.")]
        public virtual string Path { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }

        ///<summary>
        ///The scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope.")]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Campaigns are entities used to organize marketing promotions.
    ///</summary>
    [Route("/campaigns/{ScopeId}/{CampaignId}/promotions/{PromotionId}", "PUT")]
    [Api(Description="Campaigns are entities used to organize marketing promotions.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdatePromotionRequest
        : ScopedRequest, IReturn<Promotion>, IPut
    {
        ///<summary>
        ///The id of the promotion's campaign
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion's campaign")]
        public virtual Guid CampaignId { get; set; }

        ///<summary>
        ///The id of the promotion to be updated
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion to be updated")]
        public virtual Guid PromotionId { get; set; }

        ///<summary>
        ///The updated promotion
        ///</summary>
        [DataMember]
        [ApiMember(Description="The updated promotion")]
        public virtual Promotion Promotion { get; set; }
    }

    ///<summary>
    ///A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.
    ///</summary>
    [Route("/promotions/{ScopeId}/{PromotionId}/promoCodes/{PromoCode}/validate", "POST")]
    [Api(Description="A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ValidatePromoCodeRequest
        : ScopedRequest, IReturn<ValidationResult>, IPost
    {
        ///<summary>
        ///The id of the promotion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the promotion.")]
        public virtual Guid PromotionId { get; set; }

        ///<summary>
        ///The promo code to validate
        ///</summary>
        [DataMember]
        [ApiMember(Description="The promo code to validate")]
        public virtual string PromoCode { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Metadata
{

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/definitions/category/{Name}", "POST")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class CreateCategoryDefinitionRequest
        : IReturn<ProductDefinition>, IPost
    {
        ///<summary>
        ///The name of the category definition.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The name of the category definition.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The description of the category definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the category definition")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The localized display names of the category definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The localized display names of the category definition")]
        public virtual LocalizedString DisplayName { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/customer/{LookupName}", "POST")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateCustomerLookupTypeDefinitionRequest
        : IReturn<Lookup>, IPost
    {
        public CreateCustomerLookupTypeDefinitionRequest()
        {
            Values = new List<LookupValue>{};
        }

        ///<summary>
        ///The name of this lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of this lookup")]
        [Required]
        public virtual string LookupName { get; set; }

        ///<summary>
        ///The display name for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name for this lookup.")]
        [Required]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description of this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of this lookup.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The list of values available for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of values available for this lookup.")]
        public virtual List<LookupValue> Values { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/EntityType/{EntityTypeName}", "POST")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateEntityTypeRequest
        : IReturn<EntityDefinition>, IPost
    {
        public CreateEntityTypeRequest()
        {
            Attributes = new AttributeDefinition[]{};
        }

        ///<summary>
        ///The display name for this entity type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name for this entity type.")]
        [Required]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The unique name for this entity type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique name for this entity type.")]
        [Required]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///The list of attributes describing this entity type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of attributes describing this entity type.")]
        [Required]
        public virtual AttributeDefinition[] Attributes { get; set; }

        ///<summary>
        ///The description for the entity definition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description for the entity definition.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///Whether or not the instances of this entity is considered as a shared entity, meaning that an instance of the entity will be reused by multiple other entities (using relations).
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the instances of this entity is considered as a shared entity, meaning that an instance of the entity will be reused by multiple other entities (using relations).")]
        public virtual bool IsSharedEntity { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/order/{LookupName}", "POST")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateOrderLookupTypeDefinitionRequest
        : IReturn<Lookup>, IPost
    {
        public CreateOrderLookupTypeDefinitionRequest()
        {
            Values = new List<LookupValue>{};
        }

        ///<summary>
        ///The name of this lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of this lookup")]
        [Required]
        public virtual string LookupName { get; set; }

        ///<summary>
        ///The display name for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name for this lookup.")]
        [Required]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description of this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of this lookup.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The list of values available for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of values available for this lookup.")]
        public virtual List<LookupValue> Values { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/attributegroups/product/{Name}", "POST")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class CreateProductAttributeGroupRequest
        : IReturn<ProductPropertyDefinitionGroup>, IPost
    {
        ///<summary>
        ///The name of the attribute group
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The name of the attribute group")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The localized display names of the attribute group
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The localized display names of the attribute group")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description of the attribute group
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the attribute group")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The display order of the attribute group
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display order of the attribute group")]
        public virtual int DisplayOrder { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/attributes/product/{AttributeName}", "POST")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class CreateProductAttributeRequest
        : IReturn<ProductPropertyDefinition>, IPost
    {
        ///<summary>
        ///The name of the attribute
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The name of the attribute")]
        public virtual string AttributeName { get; set; }

        ///<summary>
        ///The localized display names of the attribute
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The localized display names of the attribute")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///A value indicating whether a value is required for this attribute
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether a value is required for this attribute")]
        public virtual bool IsRequired { get; set; }

        ///<summary>
        ///The ID of the attribute group, if the attribute is associated to a group
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ID of the attribute group, if the attribute is associated to a group")]
        public virtual string GroupName { get; set; }

        ///<summary>
        ///A value indicating whether this attribute is localizable and a distinct value can be specified for different cultures
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this attribute is localizable and a distinct value can be specified for different cultures")]
        public virtual bool Localizable { get; set; }

        ///<summary>
        ///The data type of this attribute
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The data type of this attribute")]
        public virtual PropertyDataType DataType { get; set; }

        ///<summary>
        ///The default value
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default value")]
        public virtual ValueTypeWrapper DefaultValue { get; set; }

        ///<summary>
        ///The minimum value of the allowed range. If the data type is a string, this is the minimum length of the string.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum value of the allowed range. If the data type is a string, this is the minimum length of the string.")]
        public virtual ValueTypeWrapper MinimumValue { get; set; }

        ///<summary>
        ///The maximum value of the allowed range. If the data type is a string, this is the maximum length of the string.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum value of the allowed range. If the data type is a string, this is the maximum length of the string.")]
        public virtual ValueTypeWrapper MaximumValue { get; set; }

        ///<summary>
        ///The description of the attribute
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the attribute")]
        public virtual string Description { get; set; }

        ///<summary>
        ///A value indicating whether the attribute will be automatically returned with all Category definitions of the system
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the attribute will be automatically returned with all Category definitions of the system")]
        public virtual bool IncludeInAllCategoryDefinition { get; set; }

        ///<summary>
        ///A value indicating whether the attribute will be automatically returned with all Product definitions of the system
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the attribute will be automatically returned with all Product definitions of the system")]
        public virtual bool IncludeInAllProductDefinition { get; set; }

        ///<summary>
        ///A value indicating whether or not the attribute should be automatically included in variant definitions of the system
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether or not the attribute should be automatically included in variant definitions of the system")]
        public virtual bool IncludeInAllVariantDefinition { get; set; }

        ///<summary>
        ///A value indicating whether this instance is hidden in the orchestrator
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this instance is hidden in the orchestrator")]
        public virtual bool IsHiddenInOrchestrator { get; set; }

        ///<summary>
        ///A value indicating whether multiple values can be specified. Applicable only for attributes of type 'Lookup'.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether multiple values can be specified. Applicable only for attributes of type 'Lookup'.")]
        public virtual bool AllowMultipleSelection { get; set; }

        ///<summary>
        ///The name of the lookup type. Applicable only for attributes of type 'Lookup'.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the lookup type. Applicable only for attributes of type 'Lookup'.")]
        public virtual string LookupName { get; set; }

        ///<summary>
        ///A value indicating whether this attribute is searchable in ContentManagement(CM) system/Admin UI, default value is true
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this attribute is searchable in ContentManagement(CM) system/Admin UI, default value is true")]
        public virtual bool IsSearchableAdmin { get; set; }

        ///<summary>
        ///A value indicating whether this attribute is searchable in ContentDelivery(CD) system/public website, default value is false
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this attribute is searchable in ContentDelivery(CD) system/public website, default value is false")]
        public virtual bool IsSearchableWeb { get; set; }

        ///<summary>
        ///A value indicating whether this attribute is facetable in ContentManagement(CM) system/Admin UI, default value is false
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this attribute is facetable in ContentManagement(CM) system/Admin UI, default value is false")]
        public virtual bool IsFacettableAdmin { get; set; }

        ///<summary>
        ///A value indicating whether this attribute is facetable in ContentDelivery(CD) system/public website, default value is false
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this attribute is facetable in ContentDelivery(CD) system/public website, default value is false")]
        public virtual bool IsFacettableWeb { get; set; }

        ///<summary>
        ///A value indicating whether this attribute  should be used as a source for 'type - ahead' and 'spell - check' suggestions in ContentManagement(CM) system/Admin UI, default value is false
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this attribute  should be used as a source for 'type - ahead' and 'spell - check' suggestions in ContentManagement(CM) system/Admin UI, default value is false")]
        public virtual bool IsTypeAheadAdmin { get; set; }

        ///<summary>
        ///A value indicating whether this attribute  should be used as a source for 'type - ahead' and 'spell - check' suggestions in ContentDelivery(CD) system/public website, default value is false
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this attribute  should be used as a source for 'type - ahead' and 'spell - check' suggestions in ContentDelivery(CD) system/public website, default value is false")]
        public virtual bool IsTypeAheadWeb { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/definitions/product/{Name}", "POST")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class CreateProductDefinitionRequest
        : IReturn<ProductDefinition>, IPost
    {
        ///<summary>
        ///The name of the product definition.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The name of the product definition.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The description of the product definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the product definition")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The localized display names of the product definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The localized display names of the product definition")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///Whether the product definition allows setting price lists
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the product definition allows setting price lists")]
        public virtual bool AllowPriceLists { get; set; }

        ///<summary>
        ///Whether the components of this product can be divided
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the components of this product can be divided")]
        public virtual bool IsDivisible { get; set; }

        ///<summary>
        ///A number of divisions the specified component may be split into
        ///</summary>
        [DataMember]
        [ApiMember(Description="A number of divisions the specified component may be split into")]
        public virtual int NumberOfDivision { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/product/{LookupName}", "POST")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateProductLookupTypeDefinitionRequest
        : IReturn<Lookup>, IPost
    {
        public CreateProductLookupTypeDefinitionRequest()
        {
            Values = new List<LookupValue>{};
        }

        ///<summary>
        ///The name of this lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of this lookup")]
        [Required]
        public virtual string LookupName { get; set; }

        ///<summary>
        ///The display name for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name for this lookup.")]
        [Required]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description of this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of this lookup.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The list of values available for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of values available for this lookup.")]
        public virtual List<LookupValue> Values { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/attributegroups/profile/{Name}", "POST")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class CreateProfileAttributeGroupRequest
        : IReturn<ProfileAttributeGroup>, IPost
    {
        ///<summary>
        ///The name of the new profile attribute group
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the new profile attribute group")]
        [Required]
        public virtual string Name { get; set; }

        ///<summary>
        ///The description of the new profile attribute group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the new profile attribute group.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The localized names of the new profile attribute group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The localized names of the new profile attribute group.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The sort order of the profile attribute group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sort order of the profile attribute group.")]
        public virtual int DisplayOrder { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/attributegroups/product/{Name}", "DELETE")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class DeleteProductAttributeGroupRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The name of the attribute group
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The name of the attribute group")]
        public virtual string Name { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/attributes/product/{AttributeName}", "DELETE")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class DeleteProductAttributeRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The name of the attribute
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The name of the attribute")]
        public virtual string AttributeName { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/product/{LookupName}/values", "DELETE")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteProductLookupValuesRequest
        : IReturnVoid, IDelete
    {
        public DeleteProductLookupValuesRequest()
        {
            Values = new List<string>{};
        }

        ///<summary>
        ///The name of a lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of a lookup")]
        [Required]
        public virtual string LookupName { get; set; }

        ///<summary>
        ///The list of values to be removed from this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of values to be removed from this lookup.")]
        public virtual List<string> Values { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/attributegroups/profile/{Name}", "DELETE")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteProfileAttributeGroupRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The name of the profile attribute group to delete
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The name of the profile attribute group to delete")]
        [Required]
        public virtual string Name { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/attributegroups/product/find", "POST")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class FindProductAttributeGroupsRequest
        : IReturn<ProductPropertyDefinitionGroupQueryResult>, IPost
    {
        public FindProductAttributeGroupsRequest()
        {
            GroupNames = new List<string>{};
        }

        ///<summary>
        ///Determines whether or not to include the attributes associated to each group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determines whether or not to include the attributes associated to each group.")]
        public virtual bool IncludeAttributes { get; set; }

        ///<summary>
        ///The names of the groups to retrieve. All groups will be returned if this is null or empty.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The names of the groups to retrieve. All groups will be returned if this is null or empty.")]
        public virtual List<string> GroupNames { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/currencies", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class GetCurrenciesRequest
        : IReturn<GetCurrenciesResponse>, IGet
    {
        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///Whether to include the unsupported currencies
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether to include the unsupported currencies")]
        public virtual bool IncludeUnsupported { get; set; }
    }

    [DataContract]
    public partial class GetCurrenciesResponse
    {
        public GetCurrenciesResponse()
        {
            Currencies = new List<Currency>{};
        }

        ///<summary>
        ///The list of the currencies.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of the currencies.")]
        public virtual List<Currency> Currencies { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/definitions/customer/{Name}", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="Requested definition not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerDefinitionRequest
        : IReturn<EntityDefinition>, IGet
    {
        ///<summary>
        ///The id to retrieve related entity definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id to retrieve related entity definition", IsRequired=true)]
        public virtual string Name { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/definitions/customer", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="Requested definitions not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerDefinitionsRequest
        : IReturn<List<EntityDefinition>>, IGet
    {
        ///<summary>
        ///The culture name in which language tha data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/customer/{LookupName}", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="Requested lookup id not found", StatusCode=404)]
    [DataContract]
    public partial class GetCustomerLookupRequest
        : GetModuleLookupBase, IReturn<Lookup>, IGet
    {
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/customer/", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class GetCustomerLookupsRequest
        : IReturn<List<Lookup>>, IGet
    {
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/marketing/{LookupName}", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="Requested lookup id not found", StatusCode=404)]
    [DataContract]
    public partial class GetMarketingLookupRequest
        : GetModuleLookupBase, IReturn<Lookup>, IGet
    {
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/marketing/", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class GetMarketingLookupsRequest
        : IReturn<List<Lookup>>, IGet
    {
    }

    [DataContract]
    public partial class GetModuleLookupBase
    {
        ///<summary>
        ///The id to retrieve related lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id to retrieve related lookup")]
        public virtual string LookupName { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/definitions/order/{Name}", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="Requested definition not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetOrderDefinitionRequest
        : IReturn<EntityDefinition>, IGet
    {
        ///<summary>
        ///The id to retrieve related entity definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id to retrieve related entity definition", IsRequired=true)]
        public virtual string Name { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/definitions/order", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="Requested definitions not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetOrderDefinitionsRequest
        : IReturn<List<EntityDefinition>>, IGet
    {
        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/order/{LookupName}", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="Requested lookup id not found", StatusCode=404)]
    [DataContract]
    public partial class GetOrderLookupRequest
        : GetModuleLookupBase, IReturn<Lookup>, IGet
    {
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/order/", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class GetOrderLookupsRequest
        : IReturn<List<Lookup>>, IGet
    {
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/product/{LookupName}", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="Requested lookup id not found", StatusCode=404)]
    [DataContract]
    public partial class GetProductLookupRequest
        : GetModuleLookupBase, IReturn<Lookup>, IGet
    {
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/product/", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class GetProductLookupsRequest
        : IReturn<List<Lookup>>, IGet
    {
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/attributegroups/profile/{Name}", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class GetProfileAttributeGroupRequest
        : IReturn<ProfileAttributeGroup>, IGet
    {
        ///<summary>
        ///The name of the profile attribute group to receive.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The name of the profile attribute group to receive.")]
        [Required]
        public virtual string Name { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/attributegroups/profile", "GET")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class GetProfileAttributeGroupsRequest
        : IReturn<GetProfileAttributeGroupsResponse>, IGet
    {
    }

    [DataContract]
    public partial class GetProfileAttributeGroupsResponse
    {
        public GetProfileAttributeGroupsResponse()
        {
            ProfileAttributeGroups = new List<ProfileAttributeGroup>{};
        }

        ///<summary>
        ///The list of the profile attribute groups.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of the profile attribute groups.")]
        public virtual List<ProfileAttributeGroup> ProfileAttributeGroups { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/definitions/category/{Name}", "PUT")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class UpdateCategoryDefinitionRequest
        : IReturn<ProductDefinition>, IPut
    {
        public UpdateCategoryDefinitionRequest()
        {
            AttributesToAdd = new List<CategoryDefinitionAttributeToAdd>{};
            AttributesToRemove = new List<string>{};
        }

        ///<summary>
        ///The name of the category definition
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The name of the category definition")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The description of the category definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the category definition")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The localized display names of the category definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The localized display names of the category definition")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The list of attributes to associate to the definition. If none are specified, the list is unchanged.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of attributes to associate to the definition. If none are specified, the list is unchanged.")]
        public virtual List<CategoryDefinitionAttributeToAdd> AttributesToAdd { get; set; }

        ///<summary>
        ///The list of the names of the attributes to be removed from the category definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of the names of the attributes to be removed from the category definition")]
        public virtual List<string> AttributesToRemove { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/customer/{LookupName}", "PUT")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateCustomerLookupTypeDefinitionRequest
        : IReturn<Lookup>, IPut
    {
        public UpdateCustomerLookupTypeDefinitionRequest()
        {
            Values = new List<LookupValue>{};
        }

        ///<summary>
        ///The name of this lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of this lookup")]
        [Required]
        public virtual string LookupName { get; set; }

        ///<summary>
        ///The display name for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name for this lookup.")]
        [Required]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description of this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of this lookup.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The list of values available for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of values available for this lookup.")]
        public virtual List<LookupValue> Values { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/EntityType/{EntityTypeName}", "PUT")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateEntityTypeRequest
        : IReturn<EntityDefinition>, IPost
    {
        public UpdateEntityTypeRequest()
        {
            Attributes = new List<SaveAttributeDefinition>{};
        }

        ///<summary>
        ///The display name for this entity type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name for this entity type.")]
        [Required]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The unique name for this entity type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique name for this entity type.")]
        [Required]
        public virtual string EntityTypeName { get; set; }

        ///<summary>
        ///The list of attributes describing this entity type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of attributes describing this entity type.")]
        [Required]
        public virtual List<SaveAttributeDefinition> Attributes { get; set; }

        ///<summary>
        ///The description for the entity definition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description for the entity definition.")]
        public virtual string Description { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/order/{LookupName}", "PUT")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateOrderLookupTypeDefinitionRequest
        : IReturn<Lookup>, IPut
    {
        public UpdateOrderLookupTypeDefinitionRequest()
        {
            Values = new List<LookupValue>{};
        }

        ///<summary>
        ///The name of this lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of this lookup")]
        [Required]
        public virtual string LookupName { get; set; }

        ///<summary>
        ///The display name for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name for this lookup.")]
        [Required]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description of this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of this lookup.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The list of values available for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of values available for this lookup.")]
        public virtual List<LookupValue> Values { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/attributegroups/product/{Name}", "PUT")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class UpdateProductAttributeGroupRequest
        : IReturn<ProductPropertyDefinitionGroup>, IPut
    {
        ///<summary>
        ///The name of the attribute group
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The name of the attribute group")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The localized display names of the attribute group
        ///</summary>
        [DataMember]
        [ApiMember(Description="The localized display names of the attribute group")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description of the attribute group
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the attribute group")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The display order of the attribute group
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display order of the attribute group")]
        public virtual int DisplayOrder { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/attributes/product/{AttributeName}", "PUT")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class UpdateProductAttributeRequest
        : IReturn<ProductPropertyDefinition>, IPut
    {
        ///<summary>
        ///The name of the attribute
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The name of the attribute")]
        public virtual string AttributeName { get; set; }

        ///<summary>
        ///The localized display names of the attribute
        ///</summary>
        [DataMember]
        [ApiMember(Description="The localized display names of the attribute")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///A value indicating whether a value is required for this attribute
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether a value is required for this attribute")]
        public virtual bool IsRequired { get; set; }

        ///<summary>
        ///The ID of the attribute group, if the attribute is associated to a group
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ID of the attribute group, if the attribute is associated to a group")]
        public virtual string GroupName { get; set; }

        ///<summary>
        ///The default value
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default value")]
        public virtual ValueTypeWrapper DefaultValue { get; set; }

        ///<summary>
        ///The minimum value of the allowed range. If the data type is a string, this is the minimum length of the string.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum value of the allowed range. If the data type is a string, this is the minimum length of the string.")]
        public virtual ValueTypeWrapper MinimumValue { get; set; }

        ///<summary>
        ///The maximum value of the allowed range. If the data type is a string, this is the maximum length of the string.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum value of the allowed range. If the data type is a string, this is the maximum length of the string.")]
        public virtual ValueTypeWrapper MaximumValue { get; set; }

        ///<summary>
        ///The description of the attribute
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the attribute")]
        public virtual string Description { get; set; }

        ///<summary>
        ///A value indicating whether the attribute will be automatically returned with all Category definitions of the system
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the attribute will be automatically returned with all Category definitions of the system")]
        public virtual bool IncludeInAllCategoryDefinition { get; set; }

        ///<summary>
        ///A value indicating whether the attribute will be automatically returned with all Product definitions of the system
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the attribute will be automatically returned with all Product definitions of the system")]
        public virtual bool IncludeInAllProductDefinition { get; set; }

        ///<summary>
        ///A value indicating whether or not the attribute should be automatically included in variant definitions of the system
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether or not the attribute should be automatically included in variant definitions of the system")]
        public virtual bool IncludeInAllVariantDefinition { get; set; }

        ///<summary>
        ///A value indicating whether this instance is hidden in the orchestrator
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this instance is hidden in the orchestrator")]
        public virtual bool IsHiddenInOrchestrator { get; set; }

        ///<summary>
        ///A value indicating whether this attribute is searchable in ContentManagement(CM) system/Admin UI
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this attribute is searchable in ContentManagement(CM) system/Admin UI")]
        public virtual bool? IsSearchableAdmin { get; set; }

        ///<summary>
        ///A value indicating whether this attribute is searchable in ContentDelivery(CD) system/public website
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this attribute is searchable in ContentDelivery(CD) system/public website")]
        public virtual bool? IsSearchableWeb { get; set; }

        ///<summary>
        ///A value indicating whether this attribute is facetable in ContentManagement(CM) system/Admin UI
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this attribute is facetable in ContentManagement(CM) system/Admin UI")]
        public virtual bool? IsFacettableAdmin { get; set; }

        ///<summary>
        ///A value indicating whether this attribute is facetable in ContentDelivery(CD) system/public website
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this attribute is facetable in ContentDelivery(CD) system/public website")]
        public virtual bool? IsFacettableWeb { get; set; }

        ///<summary>
        ///A value indicating whether this attribute  should be used as a source for 'type - ahead' and 'spell - check' suggestions in ContentManagement(CM) system/Admin UI
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this attribute  should be used as a source for 'type - ahead' and 'spell - check' suggestions in ContentManagement(CM) system/Admin UI")]
        public virtual bool? IsTypeAheadAdmin { get; set; }

        ///<summary>
        ///A value indicating whether this attribute  should be used as a source for 'type - ahead' and 'spell - check' suggestions in ContentDelivery(CD) system/public website
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this attribute  should be used as a source for 'type - ahead' and 'spell - check' suggestions in ContentDelivery(CD) system/public website")]
        public virtual bool? IsTypeAheadWeb { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/definitions/product/{Name}", "PUT")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [DataContract]
    public partial class UpdateProductDefinitionRequest
        : IReturn<ProductDefinition>, IPut
    {
        public UpdateProductDefinitionRequest()
        {
            AttributesToAdd = new List<ProductDefinitionAttributeToAdd>{};
            AttributesToRemove = new List<string>{};
        }

        ///<summary>
        ///The name of the product definition
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The name of the product definition")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The description of the product definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of the product definition")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The localized display names of the product definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The localized display names of the product definition")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The list of attributes to be added to the product definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of attributes to be added to the product definition")]
        public virtual List<ProductDefinitionAttributeToAdd> AttributesToAdd { get; set; }

        ///<summary>
        ///The list of attribute names to be removed from the product definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of attribute names to be removed from the product definition")]
        public virtual List<string> AttributesToRemove { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/lookups/product/{LookupName}", "PUT")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateProductLookupTypeDefinitionRequest
        : IReturn<Lookup>, IPut
    {
        public UpdateProductLookupTypeDefinitionRequest()
        {
            Values = new List<LookupValue>{};
        }

        ///<summary>
        ///The name of this lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of this lookup")]
        [Required]
        public virtual string LookupName { get; set; }

        ///<summary>
        ///The display name for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name for this lookup.")]
        [Required]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description of this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description of this lookup.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The list of values available for this lookup.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of values available for this lookup.")]
        public virtual List<LookupValue> Values { get; set; }
    }

    ///<summary>
    ///Metadata are entities which represents additional definitions and attribute information.
    ///</summary>
    [Route("/metadata/attributegroups/profile/{Name}", "PUT")]
    [Api(Description="Metadata are entities which represents additional definitions and attribute information.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateProfileAttributeGroupRequest
        : IReturn<ProfileAttributeGroup>, IPut
    {
        ///<summary>
        ///The name of the profile attribute group to update.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The name of the profile attribute group to update.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The localized names of the profile attribute group to update.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The localized names of the profile attribute group to update.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The description for the profile attribute group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The description for the profile attribute group.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The sort order of the profile attribute group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sort order of the profile attribute group.")]
        public virtual int DisplayOrder { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders
{

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/orderhistory", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class AddOrderHistoryRequest
        : ScopedRequest, IReturnVoid, IPost
    {
        ///<summary>
        ///The identifier of the order related to this item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the order related to this item.")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///The category of this history item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category of this history item.")]
        public virtual string Category { get; set; }

        ///<summary>
        ///The entity id related to the new order history item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The entity id related to the new order history item.")]
        public virtual string EntityId { get; set; }

        ///<summary>
        ///The shipment id related to the new order history item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment id related to the new order history item.")]
        public virtual string ShipmentId { get; set; }

        ///<summary>
        ///The fulfillment location id related to the new order history item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location id related to the new order history item.")]
        public virtual string FulfillmentLocationId { get; set; }

        ///<summary>
        ///Comment for this history item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Comment for this history item.")]
        public virtual string Comment { get; set; }

        ///<summary>
        ///Old value for modified entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Old value for modified entity.")]
        public virtual string OldValue { get; set; }

        ///<summary>
        ///New value for modified entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="New value for modified entity.")]
        public virtual string NewValue { get; set; }

        ///<summary>
        ///Reason related to entity modification.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Reason related to entity modification.")]
        public virtual string Reason { get; set; }

        ///<summary>
        ///Custom data for added specifications about this history item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Custom data for added specifications about this history item.")]
        public virtual PropertyBag CustomData { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/notes", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class AddOrderNoteRequest
        : ScopedRequest, IReturnVoid, IPost
    {
        ///<summary>
        ///The parent id of the note.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The parent id of the note.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The content of the note.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The content of the note.")]
        public virtual string Content { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/paymentHistory", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class AddPaymentHistoryRequest
        : ScopedRequest, IReturnVoid, IPost
    {
        ///<summary>
        ///The identifier of the order related to this payment history.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the order related to this payment history.")]
        public virtual string OrderId { get; set; }

        ///<summary>
        ///The identifier of the order related to this payment history. Will be fetched from database
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the order related to this payment history. Will be fetched from database")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///The category of this payment history is Payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category of this payment history is Payment.")]
        public virtual string Category { get; set; }

        ///<summary>
        ///The subcategory of this payment history.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The subcategory of this payment history.")]
        public virtual string Subcategory { get; set; }

        ///<summary>
        ///The payment id (Guid) related to the payment history.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment id (Guid) related to the payment history.")]
        public virtual string PaymentId { get; set; }

        ///<summary>
        ///Comment for this payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Comment for this payment.")]
        public virtual string Comment { get; set; }

        ///<summary>
        ///The transaction id of this payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The transaction id of this payment.")]
        public virtual string TransactionId { get; set; }

        ///<summary>
        ///The transaction date of this payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The transaction date of this payment.")]
        public virtual DateTime TransactionDate { get; set; }

        ///<summary>
        ///The amount of this payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount of this payment.")]
        public virtual decimal Amount { get; set; }

        ///<summary>
        ///Custom data for added specifications about this payment history.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Custom data for added specifications about this payment history.")]
        public virtual PropertyBag Data { get; set; }

        ///<summary>
        ///The transaction status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The transaction status.")]
        public virtual string TransactionStatus { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/notes", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class AddShipmentNoteRequest
        : ScopedRequest, IReturnVoid, IPost
    {
        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order identifier.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment identifier.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///Note to add to the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Note to add to the shipment.")]
        public virtual string Content { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/orderDraft/changeOwnership", "POST")]
    [Route("/orders/{ScopeId}/{CustomerId}/{OrderId}/orderDraft/changeOwnership", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class ChangeOwnershipCartOrderDraftRequest
        : ScopedRequest, IReturn<ProcessedCart>, IPost
    {
        ///<summary>
        ///The unique identifier of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The unique identifier of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the customer.")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///A value indicating whether pending order draft modifications must be reverted to the original order cart or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether pending order draft modifications must be reverted to the original order cart or not.")]
        public virtual bool RevertPendingChanges { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/copycart", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class CopyCartFromOrderRequest
        : ScopedRequest, IReturn<Cart>, IPost
    {
        ///<summary>
        ///The unique identifier of the order to be used for copy.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order to be used for copy.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The name of cart to be copied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of cart to be copied.")]
        public virtual string CartName { get; set; }

        ///<summary>
        ///Indicator to keep existing cart line items or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicator to keep existing cart line items or not.")]
        public virtual bool KeepExistingLineItems { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/copy", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class CopyOrderRequest
        : ScopedRequest, IReturn<Cart>, IPost
    {
        ///<summary>
        ///The unique identifier of the order to be copied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order to be copied.")]
        public virtual Guid OrderId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/orderDraft", "POST")]
    [Route("/orders/{ScopeId}/{CustomerId}/{OrderId}/orderDraft", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class CreateCartOrderDraftRequest
        : ScopedRequest, IReturn<ProcessedCart>, IPost
    {
        ///<summary>
        ///The unique identifier of the order (new id for generating a new order or an existing order id).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order (new id for generating a new order or an existing order id).")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The unique identifier of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the customer.")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The unique identifier of the order to copy details from.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order to copy details from.")]
        public virtual Guid? CopyFromOrderId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class CreateOrderRequest
        : IReturn<Order>, IPost
    {
        ///<summary>
        ///the cart that will be used as basis to create an order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cart that will be used as basis to create an order.")]
        public virtual Cart Cart { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/documents/{Name}", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class CreateShipmentDocumentRequest
        : ScopedRequest, IReturn<ShipmentDocument>, IPost
    {
        ///<summary>
        ///The shipment id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment id.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The order id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order id.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The name of the document.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the document.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///Additional notes relative to the shipment pickup confirmation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Additional notes relative to the shipment pickup confirmation.")]
        public virtual string AdditionalNotes { get; set; }

        ///<summary>
        ///The base64 string representation of the document.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The base64 string representation of the document.")]
        public virtual string Document { get; set; }

        ///<summary>
        ///The document type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The document type.")]
        public virtual string DocumentType { get; set; }

        ///<summary>
        ///The image height.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The image height.")]
        public virtual double ImageHeight { get; set; }

        ///<summary>
        ///The image width.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The image width.")]
        public virtual double ImageWidth { get; set; }

        ///<summary>
        ///The name of the recipient.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the recipient.")]
        public virtual string Recipient { get; set; }

        ///<summary>
        ///The type of document used to identifty the recipient.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of document used to identifty the recipient.")]
        public virtual string ProofOfIdentity { get; set; }

        ///<summary>
        ///The content type of the blob object.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The content type of the blob object.")]
        public virtual string ContentType { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/orderDraft", "DELETE")]
    [Route("/orders/{ScopeId}/{CustomerId}/{OrderId}/orderDraft", "DELETE")]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class DeleteCartOrderDraftRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The unique identifier of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The unique identifier of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the customer.")]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/documents/{Name}", "DELETE")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class DeleteShipmentDocumentRequest
        : ScopedRequest, IReturn<ShipmentDocument>, IDelete
    {
        ///<summary>
        ///The order id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order id.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The shipment id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment id.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The shipment document name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment document name.")]
        public virtual string Name { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/integration/orders/schema/export", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ExportOrderSchemaRequest
        : IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///File name containing the exported order schema.
        ///</summary>
        [DataMember]
        [ApiMember(Description="File name containing the exported order schema.")]
        public virtual string FileName { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    ///<summary>
    ///Fulfillment methods are entities used to select how a shipment will be delivered.
    ///</summary>
    [Route("/fulfillmentMethods/{ScopeId}/{CartName}", "POST")]
    [Route("/fulfillmentMethods/{ScopeId}/{CustomerId}/{CartName}", "POST")]
    [Api(Description="Fulfillment methods are entities used to select how a shipment will be delivered.")]
    [DataContract]
    public partial class FindCalculatedFulfillmentMethodsRequest
        : ScopedRequest, IReturn<List<FulfillmentMethod>>, IPost
    {
        ///<summary>
        ///the unique identifier of the shipment. The id of the shipment on which the retrieved FulfillmentMethod will be used.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the shipment. The id of the shipment on which the retrieved FulfillmentMethod will be used.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the unique identifier of the Customer owning the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Customer owning the cart.", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The name of the cart to retrieve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the cart to retrieve.")]
        public virtual string CartName { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/count", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class FindOrdersCountRequest
        : QueryRequestBase, IReturn<QueryCountResult>, IPost
    {
        public FindOrdersCountRequest()
        {
            OrderStatus = new List<string>{};
            ShipmentStatus = new List<string>{};
            PaymentStatus = new List<string>{};
        }

        ///<summary>
        ///A series of terms that will be used in the search for orders.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A series of terms that will be used in the search for orders.")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        ///Customer id
        ///</summary>
        [DataMember]
        [ApiMember(Description="Customer id")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///the order status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order status.")]
        public virtual List<string> OrderStatus { get; set; }

        ///<summary>
        ///the list of shipment status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of shipment status.")]
        public virtual List<string> ShipmentStatus { get; set; }

        ///<summary>
        ///the list of payment status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of payment status.")]
        public virtual List<string> PaymentStatus { get; set; }

        ///<summary>
        ///the fulfillment method thype.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment method thype.")]
        public virtual string FulfillmentMethodType { get; set; }

        ///<summary>
        ///the fulfillment location id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment location id.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the date range for the fulfillment date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date range for the fulfillment date.")]
        public virtual Range<DateTime> FulfillmentDateRange { get; set; }

        ///<summary>
        ///the date range for last modified date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date range for last modified date.")]
        public virtual Range<DateTime> LastModifiedDateRange { get; set; }

        ///<summary>
        ///the date range for created date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date range for created date.")]
        public virtual Range<DateTime> CreatedDateRange { get; set; }

        ///<summary>
        ///Whether results are filtered by needing attention only.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether results are filtered by needing attention only.")]
        public virtual bool FilterNeedingAttentionOnly { get; set; }

        ///<summary>
        ///Whether the search term is used on full-text indexed fields or not
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the search term is used on full-text indexed fields or not")]
        public virtual bool SearchFulltextFields { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/find", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class FindOrdersRequest
        : QueryRequestBase, IReturn<OrderQueryResult>, IPost
    {
        public FindOrdersRequest()
        {
            OrderStatus = new List<string>{};
            ShipmentStatus = new List<string>{};
            PaymentStatus = new List<string>{};
        }

        ///<summary>
        ///A series of terms that will be used in the search for orders.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A series of terms that will be used in the search for orders.")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        ///Customer id
        ///</summary>
        [DataMember]
        [ApiMember(Description="Customer id")]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///the order status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order status.")]
        public virtual List<string> OrderStatus { get; set; }

        ///<summary>
        ///the list of shipment status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of shipment status.")]
        public virtual List<string> ShipmentStatus { get; set; }

        ///<summary>
        ///the list of payment status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of payment status.")]
        public virtual List<string> PaymentStatus { get; set; }

        ///<summary>
        ///the fulfillment method thype.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment method thype.")]
        public virtual string FulfillmentMethodType { get; set; }

        ///<summary>
        ///the fulfillment location id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment location id.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the date range for the fulfillment date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date range for the fulfillment date.")]
        public virtual Range<DateTime> FulfillmentDateRange { get; set; }

        ///<summary>
        ///the date range for last modified date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date range for last modified date.")]
        public virtual Range<DateTime> LastModifiedDateRange { get; set; }

        ///<summary>
        ///the date range for created date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date range for created date.")]
        public virtual Range<DateTime> CreatedDateRange { get; set; }

        ///<summary>
        ///Whether we should retrieve the fulfillmentStates or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether we should retrieve the fulfillmentStates or not.")]
        public virtual bool IncludeFulfillmentStates { get; set; }

        ///<summary>
        ///Whether we should retrieve the active fulfillment SLAs or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether we should retrieve the active fulfillment SLAs or not.")]
        public virtual bool IncludeActiveFulfillmentSLAs { get; set; }

        ///<summary>
        ///Whether results are filtered by needing attention only.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether results are filtered by needing attention only.")]
        public virtual bool FilterNeedingAttentionOnly { get; set; }

        ///<summary>
        ///Whether the search term is used on full-text indexed fields or not
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the search term is used on full-text indexed fields or not")]
        public virtual bool SearchFulltextFields { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/shipments/documents/find", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="Documents not found", StatusCode=404)]
    [DataContract]
    public partial class FindShipmentDocumentsRequest
        : ScopedRequest, IReturn<ShipmentDocumentQueryResult>, IPost
    {
        public FindShipmentDocumentsRequest()
        {
            OrderIds = new List<Guid>{};
            ShipmentIds = new List<Guid>{};
            DocumentTypes = new List<string>{};
            Names = new List<string>{};
        }

        ///<summary>
        ///The list of order ids for filtering the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of order ids for filtering the request.")]
        public virtual List<Guid> OrderIds { get; set; }

        ///<summary>
        ///The list of shipment ids for filtering the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of shipment ids for filtering the request.")]
        public virtual List<Guid> ShipmentIds { get; set; }

        ///<summary>
        ///The list of document types for filtering the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of document types for filtering the request.")]
        public virtual List<string> DocumentTypes { get; set; }

        ///<summary>
        ///The list of names of the document for filtering the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of names of the document for filtering the request.")]
        public virtual List<string> Names { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/shipments/documents/summaries/find", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="Documents not found", StatusCode=404)]
    [DataContract]
    public partial class FindShipmentDocumentsSummariesRequest
        : ScopedRequest, IReturn<ShipmentDocumentSummaryQueryResult>, IPost
    {
        public FindShipmentDocumentsSummariesRequest()
        {
            OrderIds = new List<Guid>{};
            ShipmentIds = new List<Guid>{};
            DocumentTypes = new List<string>{};
            Names = new List<string>{};
        }

        ///<summary>
        ///The list of order ids for filtering the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of order ids for filtering the request.")]
        public virtual List<Guid> OrderIds { get; set; }

        ///<summary>
        ///The list of shipment ids for filtering the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of shipment ids for filtering the request.")]
        public virtual List<Guid> ShipmentIds { get; set; }

        ///<summary>
        ///The list of document types for filtering the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of document types for filtering the request.")]
        public virtual List<string> DocumentTypes { get; set; }

        ///<summary>
        ///The list of names of the document for filtering the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of names of the document for filtering the request.")]
        public virtual List<string> Names { get; set; }
    }

    [DataContract]
    public enum FulfillmentShipmentStatusType
    {
        FulfillmentOnly,
        PickupOnly,
        Both,
    }

    ///<summary>
    ///Fulfillment methods are entities used to select how a shipment will be delivered.
    ///</summary>
    [Route("/fulfillmentMethods/{ScopeId}/", "GET")]
    [Api(Description="Fulfillment methods are entities used to select how a shipment will be delivered.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetAvailableFulfillmentMethodsByScopeRequest
        : ScopedRequest, IReturn<GetFulfillmentMethodsResponse>, IGet
    {
        ///<summary>
        ///If set to true, will exclude all the inactive providers from the result.
        ///</summary>
        [DataMember]
        [ApiMember(Description="If set to true, will exclude all the inactive providers from the result.")]
        public virtual bool ExcludeInactive { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/availableTaxProviders", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class GetAvailableTaxProvidersRequest
        : IReturn<List<TaxProviderDetails>>, IGet
    {
        ///<summary>
        ///The culture name in which language that data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language that data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///ShipmentFulfillmentInfos are entities which represent the Shipment Fulfillment Informations of a customer.
    ///</summary>
    [Route("/shipmentFulfillmentInfos/{ScopeId}/count", "GET")]
    [Api(Description="ShipmentFulfillmentInfos are entities which represent the Shipment Fulfillment Informations of a customer.")]
    [DataContract]
    public partial class GetCountShipmentFulfillmentInfosRequest
        : ScopedRequest, IReturn<CountShipmentFulfillmentInfos>, IGet
    {
        public GetCountShipmentFulfillmentInfosRequest()
        {
            Statuses = new List<string>{};
        }

        ///<summary>
        ///the PickUpLocationId
        ///</summary>
        [DataMember(Name="pickUpLocationId")]
        [ApiMember(Description="the PickUpLocationId")]
        public virtual Guid? PickUpLocationId { get; set; }

        ///<summary>
        ///the FulfillmentLocationId
        ///</summary>
        [DataMember(Name="fulfillmentLocationId")]
        [ApiMember(Description="the FulfillmentLocationId")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the StartDate, ISO-8601 format
        ///</summary>
        [DataMember(Name="startDate")]
        [ApiMember(Description="the StartDate, ISO-8601 format")]
        public virtual DateTime? StartDate { get; set; }

        ///<summary>
        ///the EndDate, ISO-8601 format
        ///</summary>
        [DataMember(Name="endDate")]
        [ApiMember(Description="the EndDate, ISO-8601 format")]
        public virtual DateTime? EndDate { get; set; }

        ///<summary>
        ///the Statuses
        ///</summary>
        [DataMember(Name="statuses")]
        [ApiMember(Description="the Statuses")]
        public virtual List<string> Statuses { get; set; }

        ///<summary>
        ///the FulfillmentMethodType
        ///</summary>
        [DataMember(Name="type")]
        [ApiMember(Description="the FulfillmentMethodType")]
        public virtual FulfillmentMethodType FulfillmentMethodType { get; set; }

        ///<summary>
        ///the SearchText
        ///</summary>
        [DataMember(Name="searchText")]
        [ApiMember(Description="the SearchText")]
        public virtual string SearchText { get; set; }

        ///<summary>
        ///true if you just want to get flagged Shipments
        ///</summary>
        [DataMember(Name="flaggedOnly")]
        [ApiMember(Description="true if you just want to get flagged Shipments")]
        public virtual bool FlaggedOnly { get; set; }

        ///<summary>
        ///value indicating whether or not shipments in final state of the workflow will be returned
        ///</summary>
        [DataMember(Name="excludeShipmentInFinalState")]
        [ApiMember(Description="value indicating whether or not shipments in final state of the workflow will be returned")]
        public virtual bool ExcludeShipmentInFinalState { get; set; }

        ///<summary>
        ///the date Range filter
        ///</summary>
        [DataMember(Name="dateRangeFilter")]
        [ApiMember(Description="the date Range filter")]
        public virtual GetShipmentFulfillmentInfosDateRangeFilter DateRangeFilter { get; set; }

        ///<summary>
        ///the order id
        ///</summary>
        [DataMember(Name="orderId")]
        [ApiMember(Description="the order id")]
        public virtual Guid? OrderId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/lastOrder", "GET")]
    [Route("/orders/{ScopeId}/{CustomerId}/lastOrder", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="Requested customer not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerLastOrderRequest
        : ScopedRequest, IReturn<Order>, IGet
    {
        ///<summary>
        ///The unique identifier of the Customer to retrieve last order from.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Customer to retrieve last order from.")]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/orderedProducts", "GET")]
    [Route("/orders/{ScopeId}/{CustomerId}/orderedProducts", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCustomerOrderedProductsRequest
        : ScopedRequest, IReturn<GetCustomerOrderedProductsResponse>, IGet
    {
        ///<summary>
        ///The unique identifier of the customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the customer", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The starting date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting date", IsRequired=true)]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///The ending date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ending date", IsRequired=true)]
        public virtual DateTime EndDate { get; set; }

        ///<summary>
        ///The minimum number of times a customer ordered any amount of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum number of times a customer ordered any amount of the product", IsRequired=true)]
        public virtual int MinimumOrderedNumberOfTimes { get; set; }

        ///<summary>
        ///The maximum number of products to return. If not specified, will be used a default value
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of products to return. If not specified, will be used a default value")]
        public virtual int MaximumItems { get; set; }
    }

    [DataContract]
    public partial class GetCustomerOrderedProductsResponse
    {
        public GetCustomerOrderedProductsResponse()
        {
            OrderedProducts = new List<OrderedProductInfo>{};
        }

        ///<summary>
        ///The list of ordered products
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of ordered products")]
        public virtual List<OrderedProductInfo> OrderedProducts { get; set; }
    }

    [DataContract]
    public partial class GetFulfillmentMethodsResponse
    {
        public GetFulfillmentMethodsResponse()
        {
            FulfillmentMethods = new List<FulfillmentMethodInfo>{};
        }

        ///<summary>
        ///List of fulfillment mnethods.
        ///</summary>
        [DataMember]
        [ApiMember(Description="List of fulfillment mnethods.")]
        public virtual List<FulfillmentMethodInfo> FulfillmentMethods { get; set; }
    }

    ///<summary>
    ///ShipmentFulfillmentInfos are entities which represent the Shipment Fulfillment Informations of a customer.
    ///</summary>
    [Route("/shipmentFulfillmentInfos/{ScopeId}/numberOfShipmentsForFulfillmentLocation/{FulfillmentLocationId}", "GET")]
    [Api(Description="ShipmentFulfillmentInfos are entities which represent the Shipment Fulfillment Informations of a customer.")]
    [DataContract]
    public partial class GetNumberOfShipmentsForFulfillmentLocationRequest
        : ScopedRequest, IReturn<GetNumberOfShipmentsForFulfillmentLocationResponse>, IGet
    {
        ///<summary>
        ///the FulfillmentLocationId
        ///</summary>
        [DataMember(Name="FulfillmentLocationId")]
        [ApiMember(Description="the FulfillmentLocationId")]
        public virtual Guid FulfillmentLocationId { get; set; }
    }

    [DataContract]
    public partial class GetNumberOfShipmentsForFulfillmentLocationResponse
    {
        public GetNumberOfShipmentsForFulfillmentLocationResponse()
        {
            Statuses = new List<NumberOfShipmentForStatus>{};
        }

        ///<summary>
        ///The number of shipments by status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of shipments by status.")]
        public virtual List<NumberOfShipmentForStatus> Statuses { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class GetOrderByIdRequest
        : ScopedRequest, IReturn<Order>, IGet
    {
        ///<summary>
        ///The order id for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order id for the request.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///a value indicating whether include line items or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether include line items or not.")]
        public virtual bool IncludeLineItems { get; set; }

        ///<summary>
        ///a value indicating whether include shipment or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether include shipment or not.")]
        public virtual bool IncludeShipment { get; set; }

        ///<summary>
        ///a value indicating whether include payments or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether include payments or not.")]
        public virtual bool IncludePayment { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/byNumber/{OrderNumber}", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class GetOrderByNumberRequest
        : ScopedRequest, IReturn<Order>, IGet
    {
        ///<summary>
        ///The order number for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order number for the request.")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///a value indicating whether include line items or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether include line items or not.")]
        public virtual bool IncludeLineItems { get; set; }

        ///<summary>
        ///a value indicating whether include shipment or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether include shipment or not.")]
        public virtual bool IncludeShipment { get; set; }

        ///<summary>
        ///a value indicating whether include payments or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether include payments or not.")]
        public virtual bool IncludePayment { get; set; }

        ///<summary>
        ///The customer identifier for the request
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer identifier for the request")]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/orderhistory", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class GetOrderHistoryRequest
        : ScopedRequest, IReturn<List<OrderHistoryItem>>, IGet
    {
        ///<summary>
        ///The identifier of the order to be used for retrieving items.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the order to be used for retrieving items.")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///The shipment identifier to be used to filter items from the order (optional).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment identifier to be used to filter items from the order (optional).")]
        public virtual Guid? ShipmentId { get; set; }

        ///<summary>
        ///The fulfillment location identifier to be used to filter items from the order (optional).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location identifier to be used to filter items from the order (optional).")]
        public virtual Guid? FulfillmentLocationId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/notes", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="Requested order not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetOrderNotesRequest
        : ScopedRequest, IReturn<List<Note>>, IGet
    {
        ///<summary>
        ///The unique identifier of the Order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Order.")]
        public virtual Guid OrderId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/settings", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="Requested settings not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetOrderSettingsRequest
        : IReturn<OrderSettings>, IGet
    {
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/paymentHistory", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class GetPaymentHistoryRequest
        : ScopedRequest, IReturn<GetPaymentHistoryQueryResult>, IGet
    {
        ///<summary>
        ///The identifier of the order to be used for retrieving payment history.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the order to be used for retrieving payment history.")]
        public virtual string OrderId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/printOrders", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="Requested settings not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetPrintableOrdersUriRequest
        : ScopedRequest, IReturn<string>, IPost
    {
        public GetPrintableOrdersUriRequest()
        {
            OrderIds = new List<Guid>{};
        }

        ///<summary>
        ///The list of order id for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of order id for the request.")]
        public virtual List<Guid> OrderIds { get; set; }

        ///<summary>
        ///The culture (language) name in which the data will be returned. The first order's culture will be used if blank.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture (language) name in which the data will be returned. The first order's culture will be used if blank.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The content format.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The content format.")]
        public virtual string Format { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/printuri", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="Requested settings not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetPrintableOrderUriRequest
        : ScopedRequest, IReturn<string>, IGet
    {
        ///<summary>
        ///The order id for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order id for the request.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The culture (language) name in which the data will be returned. The order's culture will be used if blank.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture (language) name in which the data will be returned. The order's culture will be used if blank.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The content format.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The content format.")]
        public virtual string Format { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/documents/{Name}", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="Document not found", StatusCode=404)]
    [DataContract]
    public partial class GetShipmentDocumentRequest
        : ScopedRequest, IReturn<ShipmentDocument>, IGet
    {
        ///<summary>
        ///The order id for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order id for the request.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The shipment id for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment id for the request.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The name of the document.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the document.")]
        public virtual string Name { get; set; }
    }

    [DataContract]
    public enum GetShipmentFulfillmentInfosDateRangeFilter
    {
        FulfillmentBeginDate,
        OrderCreatedDate,
        FulfillmentLastAssignedDate,
    }

    ///<summary>
    ///ShipmentFulfillmentInfos are entities which represent the Shipment Fulfillment Informations of a customer.
    ///</summary>
    [Route("/shipmentFulfillmentInfos/{ScopeId}", "GET")]
    [Api(Description="ShipmentFulfillmentInfos are entities which represent the Shipment Fulfillment Informations of a customer.")]
    [DataContract]
    public partial class GetShipmentFulfillmentInfosRequest
        : ScopedRequest, IReturn<ShipmentFulfillmentInfoQueryResult>, IGet
    {
        public GetShipmentFulfillmentInfosRequest()
        {
            Statuses = new List<string>{};
            RequiredFields = new string[]{};
        }

        ///<summary>
        ///the PickUpLocationId
        ///</summary>
        [DataMember(Name="pickUpLocationId")]
        [ApiMember(Description="the PickUpLocationId")]
        public virtual Guid? PickUpLocationId { get; set; }

        ///<summary>
        ///the FulfillmentLocationId
        ///</summary>
        [DataMember(Name="fulfillmentLocationId")]
        [ApiMember(Description="the FulfillmentLocationId")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the StartDate, ISO-8601 format
        ///</summary>
        [DataMember(Name="startDate")]
        [ApiMember(Description="the StartDate, ISO-8601 format")]
        public virtual DateTime? StartDate { get; set; }

        ///<summary>
        ///the EndDate, ISO-8601 format
        ///</summary>
        [DataMember(Name="endDate")]
        [ApiMember(Description="the EndDate, ISO-8601 format")]
        public virtual DateTime? EndDate { get; set; }

        ///<summary>
        ///the Statuses
        ///</summary>
        [DataMember(Name="statuses")]
        [ApiMember(Description="the Statuses")]
        public virtual List<string> Statuses { get; set; }

        ///<summary>
        ///the FulfillmentMethodType
        ///</summary>
        [DataMember(Name="type")]
        [ApiMember(Description="the FulfillmentMethodType")]
        public virtual FulfillmentMethodType FulfillmentMethodType { get; set; }

        ///<summary>
        ///the PageSize
        ///</summary>
        [DataMember(Name="pageSize")]
        [ApiMember(Description="the PageSize")]
        public virtual int? PageSize { get; set; }

        ///<summary>
        ///the PageNumber
        ///</summary>
        [DataMember(Name="pageNumber")]
        [ApiMember(Description="the PageNumber")]
        public virtual int? PageNumber { get; set; }

        ///<summary>
        ///the sorted fields, seperated by commas, use '-' before field name for descending
        ///</summary>
        [DataMember(Name="sort")]
        [ApiMember(Description="the sorted fields, seperated by commas, use '-' before field name for descending")]
        public virtual string Sort { get; set; }

        ///<summary>
        ///the SearchText
        ///</summary>
        [DataMember(Name="searchText")]
        [ApiMember(Description="the SearchText")]
        public virtual string SearchText { get; set; }

        ///<summary>
        ///true if you just want to get flagged Shipments
        ///</summary>
        [DataMember(Name="flaggedOnly")]
        [ApiMember(Description="true if you just want to get flagged Shipments")]
        public virtual bool FlaggedOnly { get; set; }

        ///<summary>
        ///value indicating whether or not shipments in final state of the workflow will be returned
        ///</summary>
        [DataMember(Name="excludeShipmentInFinalState")]
        [ApiMember(Description="value indicating whether or not shipments in final state of the workflow will be returned")]
        public virtual bool ExcludeShipmentInFinalState { get; set; }

        ///<summary>
        ///the date range filter
        ///</summary>
        [DataMember(Name="dateRangeFilter")]
        [ApiMember(Description="the date range filter")]
        public virtual GetShipmentFulfillmentInfosDateRangeFilter DateRangeFilter { get; set; }

        ///<summary>
        ///the order id
        ///</summary>
        [DataMember(Name="orderId")]
        [ApiMember(Description="the order id")]
        public virtual Guid? OrderId { get; set; }

        ///<summary>
        ///The fields from ShipmentFulfillmentInfo that are absolutely required. Default is all.
        ///</summary>
        [DataMember(Name="requiredFields")]
        [ApiMember(Description="The fields from ShipmentFulfillmentInfo that are absolutely required. Default is all.")]
        public virtual string[] RequiredFields { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{ShipmentId}/shipment/notes", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="Requested shipment not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetShipmentNotesRequest
        : ScopedRequest, IReturn<List<Note>>, IGet
    {
        ///<summary>
        ///The unique identifier of the Shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Shipment.")]
        public virtual Guid ShipmentId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/taxCategories", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class GetTaxCategoriesRequest
        : IReturn<List<TaxCategory>>, IGet
    {
        ///<summary>
        ///a value indicating whether include system categories or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether include system categories or not.")]
        public virtual bool GetSystemCategories { get; set; }

        ///<summary>
        ///a value indicating whether include only supported categories or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether include only supported categories or not.")]
        public virtual bool GetOnlySupportedCategories { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/taxProviderByScope", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="When the provider was not found.", StatusCode=404)]
    [DataContract]
    public partial class GetTaxProviderByScopeRequest
        : ScopedRequest, IReturn<TaxProviderDetails>, IGet
    {
        ///<summary>
        ///The name of the provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the provider")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The culture name in which language that data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language that data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/integration/orders/schema/import", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ImportOrderSchemaRequest
        : IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///File name containing the order schema to import.
        ///</summary>
        [DataMember]
        [ApiMember(Description="File name containing the order schema to import.", IsRequired=true)]
        public virtual string FileName { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/integration/orders/import", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ImportOrdersRequest
        : IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///The location (store) of the order
        ///</summary>
        [DataMember]
        [ApiMember(Description="The location (store) of the order")]
        public virtual string OrderLocationNumber { get; set; }

        ///<summary>
        ///Prefix used to allow system integrator to ensure that there will be no clash with current order numbering
        ///</summary>
        [DataMember]
        [ApiMember(Description="Prefix used to allow system integrator to ensure that there will be no clash with current order numbering")]
        public virtual string OrderNumberBatchPrefix { get; set; }

        ///<summary>
        ///The path of the file(s) to import.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The path of the file(s) to import.")]
        public virtual string Path { get; set; }

        ///<summary>
        ///Indicates that existing orders will be replaced based on their Order Number
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates that existing orders will be replaced based on their Order Number")]
        public virtual bool? ReplaceExistingOrders { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    [DataContract]
    public partial class NumberOfShipmentForStatus
    {
        ///<summary>
        ///The status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status.")]
        public virtual string Status { get; set; }

        ///<summary>
        ///The number of shipments.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of shipments.")]
        public virtual int NumberOfShipments { get; set; }

        ///<summary>
        ///A value indicating how the shipment is treated from the point of view of the location requesting the number of shipments.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating how the shipment is treated from the point of view of the location requesting the number of shipments.")]
        public virtual FulfillmentShipmentStatusType FulfillmentShipmentStatusType { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/postProcess", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class PostProcessOrderRequest
        : IReturn<OrderFulfillmentState>, IPost
    {
        public PostProcessOrderRequest()
        {
            ShipmentIds = new List<Guid>{};
            FinishedStatusesToIgnore = new List<string>{};
        }

        ///<summary>
        ///The identifier of the sales or dependant scope in which the order is processed
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the sales or dependant scope in which the order is processed")]
        [Required]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The unique system identifier of the order to post process
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique system identifier of the order to post process")]
        [Required]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The optional list of shipment ids to filter for reprocessing the order
        ///</summary>
        [DataMember]
        [ApiMember(Description="The optional list of shipment ids to filter for reprocessing the order")]
        public virtual List<Guid> ShipmentIds { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether if the fulfillment process for this order needs to be restarted.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether if the fulfillment process for this order needs to be restarted.")]
        public virtual bool RestartFulfillmentProcess { get; set; }

        ///<summary>
        ///Gets or sets a list of statuses that are not considered as finished.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a list of statuses that are not considered as finished.")]
        public virtual List<string> FinishedStatusesToIgnore { get; set; }
    }

    ///<summary>
    ///Processed orders.
    ///</summary>
    [Route("/processedOrders/{ScopeId}/{OrderId}/releaselock", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Processed orders.")]
    [DataContract]
    public partial class ReleaseOrderLockForShipmentRequest
        : ScopedRequest, IReturnVoid, IPost
    {
        ///<summary>
        ///the order id that will get locked.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order id that will get locked.", IsRequired=true)]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The shipment requesting a lock on the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment requesting a lock on the order.", IsRequired=true)]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The timeout(in seconds) after which the lock will expire. Optional.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The timeout(in seconds) after which the lock will expire. Optional.")]
        public virtual double Timeout { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/renderTemplate", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class RenderOrderShipmentTemplateRequest
        : ScopedRequest, IReturn<RenderOrderShipmentTemplateResponse>, IGet
    {
        ///<summary>
        ///The name of the culture (language) to use to render the template.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the culture (language) to use to render the template.", IsRequired=true)]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The shipment id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment id.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The orderId related to the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The orderId related to the shipment.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The name of the template to render.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the template to render.")]
        public virtual string TemplateName { get; set; }

        ///<summary>
        ///The name of the content to render.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the content to render.")]
        public virtual string ContentName { get; set; }
    }

    [DataContract]
    public partial class RenderOrderShipmentTemplateResponse
    {
        ///<summary>
        ///the scope of the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the scope of the shipment.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the id of the associated shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the associated shipment.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the id of the order associated to the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the order associated to the shipment.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///the rendered template.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the rendered template.")]
        public virtual string Content { get; set; }

        ///<summary>
        ///The name of the culture (language) to used to render the template.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the culture (language) to used to render the template.", IsRequired=true)]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/print/renderTemplate", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="Requested settings not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class RenderPrintableOrderDetailRequest
        : ScopedRequest, IReturn<byte[]>, IGet
    {
        ///<summary>
        ///The order id for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order id for the request.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The culture (language) name in which the data will be returned. Will fallback to the system language or en-US if left blank or if the culture is not present for the contents.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture (language) name in which the data will be returned. Will fallback to the system language or en-US if left blank or if the culture is not present for the contents.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The content format.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The content format.")]
        public virtual string Format { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/resume", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ResumeOrderRequest
        : IReturn<OrderFulfillmentState>, IPost
    {
        ///<summary>
        ///The identifier of the sales or dependant scope in which the order is processed
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the sales or dependant scope in which the order is processed")]
        [Required]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the unique system order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system order identifier.")]
        [Required]
        public virtual Guid OrderId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="The order was modified since the last time it was fetched or is currently locked. Refetch the order, reprocess modifications whether it is still necessary and retry to save it.", StatusCode=409)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class SaveOrderRequest
        : ScopedRequest, IReturn<Order>, IPost
    {
        ///<summary>
        ///The unique identifier of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The Order that will be updated with all it's content as is.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Order that will be updated with all it's content as is.")]
        public virtual Order Order { get; set; }

        ///<summary>
        ///A value indicating whether an order post-processing should be queued or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether an order post-processing should be queued or not.")]
        public virtual bool ExecutePostProcessing { get; set; }
    }

    ///<summary>
    ///Processed orders.
    ///</summary>
    [Route("/processedOrders/{ScopeId}/{OrderId}", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Processed orders.")]
    [DataContract]
    public partial class SaveProcessedOrderRequest
        : ScopedRequest, IReturn<Order>, IPost
    {
        ///<summary>
        ///the unique system idenfitifier for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system idenfitifier for the request.", IsRequired=true)]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The Order that will be updated with all it's content as is.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Order that will be updated with all it's content as is.", IsRequired=true)]
        public virtual OrderProcessingResult ProcessedOrder { get; set; }

        ///<summary>
        ///The Order that will be updated with all it's content as is.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Order that will be updated with all it's content as is.", IsRequired=true)]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The value indicating whether to save the ProcessingResult
        ///</summary>
        [DataMember]
        [ApiMember(Description="The value indicating whether to save the ProcessingResult")]
        public virtual bool SaveProcessingResult { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/split", "PUT")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ShipmentSplitRequest
        : ScopedRequest, IReturn<Order>, IPut
    {
        public ShipmentSplitRequest()
        {
            ShipmentSplitItems = new List<ShipmentSplitItem>{};
        }

        ///<summary>
        ///The identifier of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the order.", IsRequired=true)]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The identifier of the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the shipment.", IsRequired=true)]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The list of shipment split items.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of shipment split items.")]
        public virtual List<ShipmentSplitItem> ShipmentSplitItems { get; set; }

        ///<summary>
        ///A value indicating whether the fulfillment location id should be copied from the original shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the fulfillment location id should be copied from the original shipment.")]
        public virtual bool CopyFulfillmentLocationId { get; set; }

        ///<summary>
        ///The attributes to be inserted in the new shipment's property bag.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The attributes to be inserted in the new shipment's property bag.")]
        public virtual PropertyBag ExtraParams { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/orderDraft/submit", "POST")]
    [Route("/orders/{ScopeId}/{CustomerId}/{OrderId}/orderDraft/submit", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class SubmitCartOrderDraftRequest
        : ScopedRequest, IReturn<Order>, IPost
    {
        ///<summary>
        ///The unique identifier of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The unique identifier of the customer.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the customer.")]
        public virtual Guid CustomerId { get; set; }
    }

    ///<summary>
    ///Processed orders.
    ///</summary>
    [Route("/processedOrders/{ScopeId}/{OrderId}/lock", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Processed orders.")]
    [DataContract]
    public partial class TryAcquireOrderLockForShipmentRequest
        : ScopedRequest, IReturn<OrderLockInfo>, IPost
    {
        ///<summary>
        ///the order id that will get locked.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order id that will get locked.", IsRequired=true)]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The shipment requesting a lock on the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment requesting a lock on the order.", IsRequired=true)]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The timeout(in seconds) after which the lock will expire. Optional.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The timeout(in seconds) after which the lock will expire. Optional.")]
        public virtual double Timeout { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/settings", "PUT")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="Requested settings not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateOrderSettingsRequest
        : IReturn<OrderSettings>, IPut
    {
        public UpdateOrderSettingsRequest()
        {
            PropertyBag = new Dictionary<string, string>{};
        }

        ///<summary>
        ///determine if the changes made to an order will be audited
        ///</summary>
        [DataMember]
        [ApiMember(Description="determine if the changes made to an order will be audited")]
        public virtual bool IsOrderAuditEnabled { get; set; }

        ///<summary>
        ///whether order processing is enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether order processing is enabled")]
        public virtual bool IsFulfillmentProcessingEnabled { get; set; }

        ///<summary>
        ///whether order edition is enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether order edition is enabled")]
        public virtual bool IsOrderEditionEnabled { get; set; }

        ///<summary>
        ///the cart expiration days
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cart expiration days")]
        public virtual int CartExpirationDays { get; set; }

        ///<summary>
        ///the default total workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the default total workflow")]
        public virtual string DefaultCartTotalWorkflow { get; set; }

        ///<summary>
        ///the default checkout workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the default checkout workflow")]
        public virtual string DefaultCartCheckoutWorkflow { get; set; }

        ///<summary>
        ///the default checkout workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the default checkout workflow")]
        public virtual string DefaultOrderProcessingWorkflow { get; set; }

        ///<summary>
        ///the default checkout workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the default checkout workflow")]
        public virtual string DefaultOrderTotalWorkflow { get; set; }

        ///<summary>
        ///the default submit order workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the default submit order workflow")]
        public virtual string DefaultSubmitOrderWorkflow { get; set; }

        ///<summary>
        ///the order post processing workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order post processing workflow")]
        public virtual string OrderPostProcessingWorkflow { get; set; }

        ///<summary>
        ///the order canceled workflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order canceled workflow")]
        public virtual string OrderCanceledWorkflow { get; set; }

        ///<summary>
        ///the order value maximum filter
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order value maximum filter")]
        public virtual int OrderValueMaximumFilter { get; set; }

        ///<summary>
        ///the customer search is limited to the current and child scopes only
        ///</summary>
        [DataMember]
        [ApiMember(Description="the customer search is limited to the current and child scopes only")]
        public virtual bool LimitCustomerSearchToCurrentAndChildScopes { get; set; }

        ///<summary>
        ///allows the final total of a shipment to be modified
        ///</summary>
        [DataMember]
        [ApiMember(Description="allows the final total of a shipment to be modified")]
        public virtual bool AllowManualAdjustmentsOfShipmentTotal { get; set; }

        ///<summary>
        ///store picker default tab in the new order wizard
        ///</summary>
        [DataMember]
        [ApiMember(Description="store picker default tab in the new order wizard")]
        public virtual string StorePickerDefaultTab { get; set; }

        ///<summary>
        ///the list of inventory statuses available to order
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of inventory statuses available to order")]
        public virtual string OrderableInventoryStatuses { get; set; }

        ///<summary>
        ///a value indicating whether in store picking is allowed
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether in store picking is allowed")]
        public virtual bool IsInStorePickingAllowed { get; set; }

        ///<summary>
        ///The default checkout workflow for recurring orders. If null the system will default to DefaultCartCheckoutWorkflow
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default checkout workflow for recurring orders. If null the system will default to DefaultCartCheckoutWorkflow")]
        public virtual string DefaultRecurringOrderCartCheckoutWorkflow { get; set; }

        ///<summary>
        ///the recurring order creation error email address
        ///</summary>
        [DataMember]
        [ApiMember(Description="the recurring order creation error email address")]
        public virtual string RecurringOrderCreationErrorEmailAddress { get; set; }

        ///<summary>
        ///the regular expression used to validate tracking numbers
        ///</summary>
        [DataMember]
        [ApiMember(Description="the regular expression used to validate tracking numbers")]
        public virtual string TrackingNumberValidationRegExp { get; set; }

        ///<summary>
        ///the property bag containing extended properties for this command
        ///</summary>
        [DataMember]
        [ApiMember(Description="the property bag containing extended properties for this command")]
        public virtual Dictionary<string, string> PropertyBag { get; set; }

        ///<summary>
        ///the editable shipment states
        ///</summary>
        [DataMember]
        [ApiMember(Description="the editable shipment states")]
        public virtual string EditableShipmentStates { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/documents/{Name}", "PUT")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class UpdateShipmentDocumentRequest
        : ScopedRequest, IReturn<ShipmentDocument>, IPut
    {
        ///<summary>
        ///The order id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order id.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The shipment id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment id.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The name of the document.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the document.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///Additional notes related to the confirmation
        ///</summary>
        [DataMember]
        [ApiMember(Description="Additional notes related to the confirmation")]
        public virtual string AdditionalNotes { get; set; }

        ///<summary>
        ///The base64 string representation of the document
        ///</summary>
        [DataMember]
        [ApiMember(Description="The base64 string representation of the document")]
        public virtual string Document { get; set; }

        ///<summary>
        ///The document type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The document type.")]
        public virtual string DocumentType { get; set; }

        ///<summary>
        ///The height of the image
        ///</summary>
        [DataMember]
        [ApiMember(Description="The height of the image")]
        public virtual double ImageHeight { get; set; }

        ///<summary>
        ///The width of the image
        ///</summary>
        [DataMember]
        [ApiMember(Description="The width of the image")]
        public virtual double ImageWidth { get; set; }

        ///<summary>
        ///The name of the recipient.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the recipient.")]
        public virtual string Recipient { get; set; }

        ///<summary>
        ///The type of document used to identifty the recipient.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of document used to identifty the recipient.")]
        public virtual string ProofOfIdentity { get; set; }

        ///<summary>
        ///The content type of the blob object.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The content type of the blob object.")]
        public virtual string ContentType { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.Fulfillment
{

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/state/messages", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AddShipmentFulfillmentMessagesRequest
        : IReturn<OrderFulfillmentState>, IPost
    {
        public AddShipmentFulfillmentMessagesRequest()
        {
            ExecutionMessages = new List<ExecutionMessage>{};
            ValidationResults = new List<ValidationResult>{};
        }

        ///<summary>
        ///The identifier of the sales or dependant scope in which the order is processed
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the sales or dependant scope in which the order is processed")]
        [Required]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the unique system order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system order identifier.")]
        [Required]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///the unique system shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system shipment identifier.")]
        [Required]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The list of ExecutionMessage to add
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of ExecutionMessage to add")]
        public virtual List<ExecutionMessage> ExecutionMessages { get; set; }

        ///<summary>
        ///The list of ValidationResult to add
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of ValidationResult to add")]
        public virtual List<ValidationResult> ValidationResults { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/fulfillmentState", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ChangeOrderStatusRequest
        : ScopedRequest, IReturn<OrderFulfillmentState>, IPost
    {
        ///<summary>
        ///The unique system identifier for the order
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The unique system identifier for the order")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The status the shipments should be transitioned to. This value needs to be part of the ShipmentFulfillmentState.AllowedStatusChanges otherwise will fail.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The status the shipments should be transitioned to. This value needs to be part of the ShipmentFulfillmentState.AllowedStatusChanges otherwise will fail.")]
        public virtual string RequestedStatus { get; set; }

        ///<summary>
        ///The defined reason, if any, why the change is requested.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The defined reason, if any, why the change is requested.")]
        public virtual string Reason { get; set; }

        ///<summary>
        ///An additional description or comment about the status change request. This information is automatically appended to the order notes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="An additional description or comment about the status change request. This information is automatically appended to the order notes.")]
        public virtual string Notes { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/fulfillmentState", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ChangeShipmentStatusRequest
        : ScopedRequest, IReturn<OrderFulfillmentState>, IPost
    {
        ///<summary>
        ///The unique system identifier for the order
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The unique system identifier for the order")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The unique shipment identifier
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The unique shipment identifier")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The status the shipment should be transitioned to. This value needs to be part of the ShipmentFulfillmentState.AllowedStatusChanges otherwise will fail.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The status the shipment should be transitioned to. This value needs to be part of the ShipmentFulfillmentState.AllowedStatusChanges otherwise will fail.")]
        public virtual string RequestedStatus { get; set; }

        ///<summary>
        ///The defined reason, if any, why the change is requested.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The defined reason, if any, why the change is requested.")]
        public virtual string Reason { get; set; }

        ///<summary>
        ///An additional description or comment provided for the status change request. This information will be automatically appended to the shipment notes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="An additional description or comment provided for the status change request. This information will be automatically appended to the shipment notes.")]
        public virtual string Notes { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/orders/{ScopeId}/find", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [DataContract]
    public partial class FindFulfillmentOrdersRequest
        : ScopedRequest, IReturn<FulfillmentOrderQueryResult>, IPost
    {
        public FindFulfillmentOrdersRequest()
        {
            FulfillmentShipmentStatuses = new List<FulfillmentShipmentStatus>{};
            OrderIds = new List<Guid>{};
        }

        ///<summary>
        ///A series of terms that will be used in the search for shipments.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A series of terms that will be used in the search for shipments.")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        ///The starting index in the results to start getting the orders.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting index in the results to start getting the orders.")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The maximum number of results to return. Default value : 50
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of results to return. Default value : 50")]
        public virtual int? MaximumItems { get; set; }

        ///<summary>
        ///Whether it should use ascending order (using order creation date) or descending order (using order last modified date).
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether it should use ascending order (using order creation date) or descending order (using order last modified date).")]
        public virtual SortDirection SortDirection { get; set; }

        ///<summary>
        ///a date in the past defining the limit to get orders based on its creation date. It is ignored when 'SearchTerms' has a value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a date in the past defining the limit to get orders based on its creation date. It is ignored when 'SearchTerms' has a value.")]
        public virtual DateTime? MinimumLimitDate { get; set; }

        ///<summary>
        ///The fulfillment location id orders' shipment need to be associated to.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location id orders' shipment need to be associated to.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The list of fulfillment shipment statuses orders' shipment need to be associated to.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of fulfillment shipment statuses orders' shipment need to be associated to.")]
        public virtual List<FulfillmentShipmentStatus> FulfillmentShipmentStatuses { get; set; }

        ///<summary>
        ///A list of specific order ids needed to be fetched.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of specific order ids needed to be fetched.")]
        public virtual List<Guid> OrderIds { get; set; }
    }

    [DataContract]
    public partial class FulfillmentShipmentStatus
    {
        ///<summary>
        ///A shipment status we want fulfillment shipments for.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A shipment status we want fulfillment shipments for.")]
        public virtual string ShipmentStatus { get; set; }

        ///<summary>
        ///A value indicating whether the shipment status needs to apply to a pick location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the shipment status needs to apply to a pick location.")]
        public virtual bool IsForPickUpLocation { get; set; }

        ///<summary>
        ///The aggregated status for the location we fetch fulfillment shipments for.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The aggregated status for the location we fetch fulfillment shipments for.")]
        public virtual string AggregatedStatus { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/fulfillmentState", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetOrderFulfillmentStateRequest
        : IReturn<OrderFulfillmentState>, IGet
    {
        ///<summary>
        ///The identifier of the sales or dependant scope in which the order is processed
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the sales or dependant scope in which the order is processed")]
        [Required]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The unique system identifier for the Order
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique system identifier for the Order")]
        [Required]
        public virtual Guid OrderId { get; set; }
    }

    ///<summary>
    ///ShipmentFulfillmentInfos are entities which represent the Shipment Fulfillment Informations of a customer.
    ///</summary>
    [Route("/shipmentFulfillmentInfos/{ScopeId}/printShipments", "POST")]
    [Api(Description="ShipmentFulfillmentInfos are entities which represent the Shipment Fulfillment Informations of a customer.")]
    [ApiResponse(Description="Requested settings not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetPrintableShipmentsUriRequest
        : ScopedRequest, IReturn<string>, IPost
    {
        public GetPrintableShipmentsUriRequest()
        {
            ShipmentIds = new List<Guid>{};
        }

        ///<summary>
        ///The list of shipment id for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of shipment id for the request.")]
        public virtual List<Guid> ShipmentIds { get; set; }
    }

    ///<summary>
    ///ShipmentFulfillmentInfos are entities which represent the Shipment Fulfillment Informations of a customer.
    ///</summary>
    [Route("/shipmentFulfillmentInfos/{ScopeId}/{ShipmentId}/printuri", "GET")]
    [Api(Description="ShipmentFulfillmentInfos are entities which represent the Shipment Fulfillment Informations of a customer.")]
    [ApiResponse(Description="Requested settings not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetPrintableShipmentUriRequest
        : ScopedRequest, IReturn<string>, IGet
    {
        ///<summary>
        ///The shipment id for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment id for the request.")]
        public virtual Guid ShipmentId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/state/failure", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ReportShipmentFulfillmentFailureRequest
        : IReturn<OrderFulfillmentState>, IPost
    {
        ///<summary>
        ///The identifier of the sales or dependant scope in which the order is processed
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the sales or dependant scope in which the order is processed")]
        [Required]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The unique system order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique system order identifier.")]
        [Required]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The unique system shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique system shipment identifier.")]
        [Required]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The name of the source of the failure
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the source of the failure")]
        [Required]
        public virtual string FailureSource { get; set; }

        ///<summary>
        ///The date and time at which the failure occured
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date and time at which the failure occured")]
        [Required]
        public virtual DateTime? FailureDate { get; set; }

        ///<summary>
        ///The stack trace
        ///</summary>
        [DataMember]
        [ApiMember(Description="The stack trace")]
        [Required]
        public virtual string StackTrace { get; set; }

        ///<summary>
        ///a value indicating whether the workflow is in error.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether the workflow is in error.")]
        [Required]
        public virtual bool WorkflowInError { get; set; }

        ///<summary>
        ///a value indicating whether the workflow is resumable.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether the workflow is resumable.")]
        [Required]
        public virtual bool IsResumable { get; set; }

        ///<summary>
        ///the attempting state transition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the attempting state transition.")]
        [Required]
        public virtual string TransitioningState { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/fulfillmentState/restartTask", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class RestartShipmentFulfillmentProcessingRequest
        : IReturn<OrderFulfillmentState>, IPost
    {
        ///<summary>
        ///The identifier of the sales or dependant scope in which the order is processed
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the sales or dependant scope in which the order is processed")]
        [Required]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the unique system order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system order identifier.")]
        [Required]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///the unique system shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system shipment identifier.")]
        [Required]
        public virtual Guid ShipmentId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/fulfillmentState/startNewWorkflow", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class StartNewShipmentFulfillmentWorkflowRequest
        : IReturn<OrderFulfillmentState>, IPost
    {
        ///<summary>
        ///The identifier of the sales or dependant scope in which the order is processed
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the sales or dependant scope in which the order is processed")]
        [Required]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the unique system order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system order identifier.")]
        [Required]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///the unique system shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system shipment identifier.")]
        [Required]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the path of the fulfillment workflow.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the path of the fulfillment workflow.")]
        public virtual string WorkflowXamlPath { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/state", "PUT")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateShipmentFulfillmentStateRequest
        : IReturn<OrderFulfillmentState>, IPut
    {
        public UpdateShipmentFulfillmentStateRequest()
        {
            NextStatuses = new List<string>{};
            AllowedManualTransitions = new List<string>{};
            AllowedStatusChanges = new List<string>{};
        }

        ///<summary>
        ///The identifier of the sales or dependant scope in which the order is processed
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the sales or dependant scope in which the order is processed")]
        [Required]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the unique system order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system order identifier.")]
        [Required]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///the unique system shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system shipment identifier.")]
        [Required]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the current status of the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the current status of the shipment.")]
        [Required]
        public virtual string Status { get; set; }

        ///<summary>
        ///a list of the potential statuses the shipment could transition to from its current status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of the potential statuses the shipment could transition to from its current status.")]
        [Required]
        public virtual List<string> NextStatuses { get; set; }

        ///<summary>
        ///a list of allowed manual transitions from the shipment current status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of allowed manual transitions from the shipment current status.")]
        [Required]
        public virtual List<string> AllowedManualTransitions { get; set; }

        ///<summary>
        ///a list of allowed status changes that can be requested.  Requesting any other changes will fail.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of allowed status changes that can be requested.  Requesting any other changes will fail.")]
        [Required]
        public virtual List<string> AllowedStatusChanges { get; set; }

        ///<summary>
        ///whether the saving an order in the current state should resume a processing the order within the fulfillment process.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether the saving an order in the current state should resume a processing the order within the fulfillment process.")]
        public virtual bool AllowsShipmentChangesProcessing { get; set; }

        ///<summary>
        ///a flag indicating that fulfillment is complete for this shipment. 
        ///</summary>
        [DataMember]
        [ApiMember(Description="a flag indicating that fulfillment is complete for this shipment. ")]
        [Required]
        public virtual bool IsFinished { get; set; }

        ///<summary>
        ///the scheduled time at which fulfillment will begin.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the scheduled time at which fulfillment will begin.")]
        public virtual DateTime? FulfillmentScheduledTimeBeginDate { get; set; }

        ///<summary>
        ///the scheduled time at which fulfillment will end.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the scheduled time at which fulfillment will end.")]
        public virtual DateTime? FulfillmentScheduledTimeEndDate { get; set; }

        ///<summary>
        ///the whether the fulfillment task lock should be extended for another defined amount of time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the whether the fulfillment task lock should be extended for another defined amount of time.")]
        public virtual TimeSpan? RenewFulfillmentTaskLockExpirationOnProcess { get; set; }

        ///<summary>
        ///the task Id responsible for fulfilling the shipment
        ///</summary>
        [DataMember]
        [ApiMember(Description="the task Id responsible for fulfilling the shipment")]
        public virtual Guid? TaskId { get; set; }

        ///<summary>
        ///whether clear state failure messages.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether clear state failure messages.")]
        public virtual bool ClearFulfillmentFailureMessages { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/WorkflowXamlPath", "PUT")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateShipmentFulfillmentWorkflowXamlPathRequest
        : IReturn<OrderFulfillmentState>, IPut
    {
        ///<summary>
        ///The identifier of the sales or dependant scope in which the order is processed
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the sales or dependant scope in which the order is processed")]
        [Required]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the unique system order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system order identifier.")]
        [Required]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///the unique system shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique system shipment identifier.")]
        [Required]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the path of the fulfillment workflow.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the path of the fulfillment workflow.")]
        [Required]
        public virtual string WorkflowXamlPath { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.Fulfillment.Carriers
{

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/quotes/confirm", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ConfirmFulfillmentCarrierQuotesRequest
        : IReturn<ConfirmFulfillmentCarrierQuotesResponse>, IPost
    {
        public ConfirmFulfillmentCarrierQuotesRequest()
        {
            Quotes = new List<FulfillmentCarrierQuoteToConfirm>{};
        }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The fulfillment carrier identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment carrier identifier.")]
        public virtual Guid FulfillmentCarrierId { get; set; }

        ///<summary>
        ///The quotes to confirm.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quotes to confirm.")]
        public virtual List<FulfillmentCarrierQuoteToConfirm> Quotes { get; set; }

        ///<summary>
        ///The property bag containing extended/custom properties for this request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended/custom properties for this request.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class ConfirmFulfillmentCarrierQuotesResponse
    {
        public ConfirmFulfillmentCarrierQuotesResponse()
        {
            ConfirmedQuotes = new List<FulfillmentCarrierQuoteConfirmation>{};
        }

        ///<summary>
        ///The confirmed quotes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The confirmed quotes.")]
        public virtual List<FulfillmentCarrierQuoteConfirmation> ConfirmedQuotes { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/manifests", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateFulfillmentCarrierManifestRequest
        : IReturn<CreateFulfillmentCarrierManifestResponse>, IPost
    {
        public CreateFulfillmentCarrierManifestRequest()
        {
            PackageIds = new List<Guid>{};
        }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment location identifier.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The fulfillment carrier identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment carrier identifier.")]
        public virtual Guid FulfillmentCarrierId { get; set; }

        ///<summary>
        ///The optional carrier account id used for the package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The optional carrier account id used for the package.")]
        public virtual string CarrierAccountId { get; set; }

        ///<summary>
        ///The optional carrier account name used for the package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The optional carrier account name used for the package.")]
        public virtual string CarrierAccountName { get; set; }

        ///<summary>
        ///The optional carrier name used for the package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The optional carrier name used for the package.")]
        public virtual string CarrierName { get; set; }

        ///<summary>
        ///The optional carrier sevice level used for the package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The optional carrier sevice level used for the package.")]
        public virtual string CarrierServiceLevel { get; set; }

        ///<summary>
        ///The package's ids to create a manifest for. An empty list will do all unmanifested packages for this carrier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The package's ids to create a manifest for. An empty list will do all unmanifested packages for this carrier.")]
        public virtual List<Guid> PackageIds { get; set; }

        ///<summary>
        ///The name of the culture (language) to use to render any messages.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the culture (language) to use to render any messages.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The property bag containing extended/custom properties for this request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended/custom properties for this request.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class CreateFulfillmentCarrierManifestResponse
    {
        public CreateFulfillmentCarrierManifestResponse()
        {
            Manifests = new List<FulfillmentCarrierManifest>{};
        }

        ///<summary>
        ///The created manifests.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The created manifests.")]
        public virtual List<FulfillmentCarrierManifest> Manifests { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/quotes/documents", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentCarrierDocumentsRequest
        : IReturn<GetFulfillmentCarrierDocumentsResponse>, IPost
    {
        public GetFulfillmentCarrierDocumentsRequest()
        {
            DocumentsToRetrieve = new List<FulfillmentCarrierDocumentToRetrieve>{};
        }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The fulfillment carrier identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment carrier identifier.")]
        public virtual Guid FulfillmentCarrierId { get; set; }

        ///<summary>
        ///The documents to retrieve.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The documents to retrieve.")]
        public virtual List<FulfillmentCarrierDocumentToRetrieve> DocumentsToRetrieve { get; set; }

        ///<summary>
        ///The property bag containing extended/custom properties for this request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended/custom properties for this request.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class GetFulfillmentCarrierDocumentsResponse
    {
        public GetFulfillmentCarrierDocumentsResponse()
        {
            Documents = new List<FulfillmentCarrierDocument>{};
        }

        ///<summary>
        ///The documents.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The documents.")]
        public virtual List<FulfillmentCarrierDocument> Documents { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/quotes", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentCarrierQuotesRequest
        : IReturn<GetFulfillmentCarrierQuotesResponse>, IPost
    {
        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The fulfillment carrier identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment carrier identifier.")]
        public virtual Guid FulfillmentCarrierId { get; set; }

        ///<summary>
        ///A value indicating whether the quote is for a return shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the quote is for a return shipment.")]
        public virtual bool IsReturn { get; set; }

        ///<summary>
        ///The order location used to generate quotes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order location used to generate quotes.")]
        public virtual FulfillmentCarrierOrderLocation OrderLocation { get; set; }

        ///<summary>
        ///The package used to generate quotes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The package used to generate quotes.")]
        public virtual FulfillmentCarrierPackage Package { get; set; }

        ///<summary>
        ///The address where the package originates.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The address where the package originates.")]
        public virtual FulfillmentCarrierAddress AddressFrom { get; set; }

        ///<summary>
        ///The destination address of the package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The destination address of the package.")]
        public virtual FulfillmentCarrierAddress AddressTo { get; set; }

        ///<summary>
        ///The billing address for the package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The billing address for the package.")]
        public virtual FulfillmentCarrierAddress AddressBilling { get; set; }

        ///<summary>
        ///The culture (language) in which the quote is being processed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture (language) in which the quote is being processed.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The property bag containing extended/custom properties for this request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended/custom properties for this request.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class GetFulfillmentCarrierQuotesResponse
    {
        public GetFulfillmentCarrierQuotesResponse()
        {
            Quotes = new List<FulfillmentCarrierQuote>{};
            Messages = new List<FulfillmentCarrierQuoteMessage>{};
        }

        ///<summary>
        ///The quotes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quotes.")]
        public virtual List<FulfillmentCarrierQuote> Quotes { get; set; }

        ///<summary>
        ///The messages.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The messages.")]
        public virtual List<FulfillmentCarrierQuoteMessage> Messages { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/carriers/{ScopeId}/{FulfillmentCarrierId}/quotes/refund", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class RefundFulfillmentCarrierQuotesRequest
        : IReturnVoid, IPost
    {
        public RefundFulfillmentCarrierQuotesRequest()
        {
            Quotes = new List<FulfillmentCarrierQuoteToRefund>{};
        }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The fulfillment carrier identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment carrier identifier.")]
        public virtual Guid FulfillmentCarrierId { get; set; }

        ///<summary>
        ///The quotes to refund.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quotes to refund.")]
        public virtual List<FulfillmentCarrierQuoteToRefund> Quotes { get; set; }

        ///<summary>
        ///The property bag containing extended/custom properties for this request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended/custom properties for this request.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.Fulfillment.Competitions
{

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}/locations", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AddFulfillmentCompetitionLocationsRequest
        : ScopedRequest, IReturn<FulfillmentCompetition>, IPost
    {
        public AddFulfillmentCompetitionLocationsRequest()
        {
            FulfillmentLocationIds = new List<Guid>{};
        }

        ///<summary>
        ///The identifier of the fulfillment competition to which the fulfillment locations are added.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The identifier of the fulfillment competition to which the fulfillment locations are added.")]
        public virtual Guid FulfillmentCompetitionId { get; set; }

        ///<summary>
        ///The list of fulfillment locations to add into the specified fulfillment competition.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The list of fulfillment locations to add into the specified fulfillment competition.")]
        public virtual List<Guid> FulfillmentLocationIds { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}/locations/{FulfillmentLocationId}/status", "PUT")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ChangeFulfillmentCompetitionLocationStatusRequest
        : ScopedRequest, IReturn<FulfillmentCompetition>, IPut
    {
        ///<summary>
        ///The identifier of the fulfillment competition whose fulfillment competition location status is changing.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The identifier of the fulfillment competition whose fulfillment competition location status is changing.")]
        public virtual Guid FulfillmentCompetitionId { get; set; }

        ///<summary>
        ///The identifier of the fulfillment location whose status is changing.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The identifier of the fulfillment location whose status is changing.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The new status of the fulfillment competition location.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The new status of the fulfillment competition location.")]
        public virtual FulfillmentCompetitionLocationStatus Status { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}/status", "PUT")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ChangeFulfillmentCompetitionStatusRequest
        : ScopedRequest, IReturn<FulfillmentCompetition>, IPut
    {
        ///<summary>
        ///The identifier of the fulfillment competition to which the status is changing.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The identifier of the fulfillment competition to which the status is changing.")]
        public virtual Guid FulfillmentCompetitionId { get; set; }

        ///<summary>
        ///The new status of the fulfillment competition.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The new status of the fulfillment competition.")]
        public virtual FulfillmentCompetitionStatus Status { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/competitions/{ScopeId}", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateFulfillmentCompetitionRequest
        : ScopedRequest, IReturn<FulfillmentCompetition>, IPost
    {
        public CreateFulfillmentCompetitionRequest()
        {
            FulfillmentLocationIds = new List<Guid>{};
        }

        ///<summary>
        ///The fulfillment competition's identifier which can be specified when creating the competition. Otherwise it is generated automatically.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment competition's identifier which can be specified when creating the competition. Otherwise it is generated automatically.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The identifier of the order whose shipment's fulfillment is subject of the competition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the order whose shipment's fulfillment is subject of the competition.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The identifier of the shipment whose fulfillment is subject of the competition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the shipment whose fulfillment is subject of the competition.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the list of the fulfillment locations who are participating in the newly created competition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of the fulfillment locations who are participating in the newly created competition.")]
        public virtual List<Guid> FulfillmentLocationIds { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}", "DELETE")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteFulfillmentCompetitionRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The identifier of the fulfillment competition to be removed.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The identifier of the fulfillment competition to be removed.")]
        public virtual Guid FulfillmentCompetitionId { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/competitions/{ScopeId}/count", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [DataContract]
    public partial class FindFulfillmentCompetitionsCountRequest
        : ScopedRequest, IReturn<QueryCountResult>, IPost
    {
        public FindFulfillmentCompetitionsCountRequest()
        {
            FulfillmentCompetitionStatuses = new List<FulfillmentCompetitionStatus>{};
            FulfillmentCompetitionLocationStatuses = new List<FulfillmentCompetitionLocationStatus>{};
        }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order identifier.")]
        public virtual Guid? OrderId { get; set; }

        ///<summary>
        ///The shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment identifier.")]
        public virtual Guid? ShipmentId { get; set; }

        ///<summary>
        ///The list of fulfillment competition statuses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of fulfillment competition statuses.")]
        public virtual List<FulfillmentCompetitionStatus> FulfillmentCompetitionStatuses { get; set; }

        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location identifier.")]
        public virtual Guid? FulfillmentLocationId { get; set; }

        ///<summary>
        ///The list of fulfillment competition location statuses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of fulfillment competition location statuses.")]
        public virtual List<FulfillmentCompetitionLocationStatus> FulfillmentCompetitionLocationStatuses { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/competitions/{ScopeId}/find", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [DataContract]
    public partial class FindFulfillmentCompetitionsRequest
        : ScopedRequest, IReturn<FulfillmentCompetitionQueryResult>, IPost
    {
        public FindFulfillmentCompetitionsRequest()
        {
            FulfillmentCompetitionStatuses = new List<FulfillmentCompetitionStatus>{};
            FulfillmentCompetitionLocationStatuses = new List<FulfillmentCompetitionLocationStatus>{};
        }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order identifier.")]
        public virtual Guid? OrderId { get; set; }

        ///<summary>
        ///The shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment identifier.")]
        public virtual Guid? ShipmentId { get; set; }

        ///<summary>
        ///The list of fulfillment competition statuses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of fulfillment competition statuses.")]
        public virtual List<FulfillmentCompetitionStatus> FulfillmentCompetitionStatuses { get; set; }

        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location identifier.")]
        public virtual Guid? FulfillmentLocationId { get; set; }

        ///<summary>
        ///The list of fulfillment competition location statuses.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of fulfillment competition location statuses.")]
        public virtual List<FulfillmentCompetitionLocationStatus> FulfillmentCompetitionLocationStatuses { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}", "GET")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="Requested competition not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentCompetitionRequest
        : ScopedRequest, IReturn<FulfillmentCompetition>, IGet
    {
        ///<summary>
        ///The fulfillment competition identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment competition identifier.")]
        public virtual Guid FulfillmentCompetitionId { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/competitions/{ScopeId}/{FulfillmentCompetitionId}/locations", "DELETE")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class RemoveFulfillmentCompetitionLocationsRequest
        : ScopedRequest, IReturn<FulfillmentCompetition>, IDelete
    {
        public RemoveFulfillmentCompetitionLocationsRequest()
        {
            FulfillmentLocationIds = new List<Guid>{};
        }

        ///<summary>
        ///The identifier of the fulfillment competition from which the fulfillment competition locations are removed.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The identifier of the fulfillment competition from which the fulfillment competition locations are removed.")]
        public virtual Guid FulfillmentCompetitionId { get; set; }

        ///<summary>
        ///The list of the fulfillment location identifiers which will be removed from the fulfillment competition.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The list of the fulfillment location identifiers which will be removed from the fulfillment competition.")]
        public virtual List<Guid> FulfillmentLocationIds { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.Fulfillment.Exceptions
{

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/exceptions/{ScopeId}/{FulfillmentLocationId}/{OrderId}/{ShipmentId}/{LineItemId}", "PUT")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateOrUpdateFulfillmentExceptionRequest
        : ScopedRequest, IReturn<FulfillmentException>, IPut
    {
        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location identifier.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The identifier of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the order.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The identifier of the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the shipment.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The identifier of the line item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the line item.")]
        public virtual Guid LineItemId { get; set; }

        ///<summary>
        ///The reason lookup value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reason lookup value.")]
        public virtual string ReasonLookupValue { get; set; }

        ///<summary>
        ///The note.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The note.")]
        public virtual string Note { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/exceptions/{ScopeId}/{FulfillmentLocationId}/{OrderId}/{ShipmentId}/{LineItemId}", "DELETE")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteFulfillmentExceptionRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location identifier.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The identifier of the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the order.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The identifier of the shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the shipment.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The identifier of the line item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the line item.")]
        public virtual Guid LineItemId { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/exceptions/{ScopeId}/{FulfillmentLocationId}/{OrderId}", "GET")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentExceptionsRequest
        : ScopedRequest, IReturn<FulfillmentExceptionResult>, IGet
    {
        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location identifier.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order identifier.")]
        public virtual Guid OrderId { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.Fulfillment.Packages
{

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packages/{ScopeId}", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateFulfillmentPackageRequest
        : IReturn<FulfillmentPackage>, IPost
    {
        public CreateFulfillmentPackageRequest()
        {
            FulfillmentPackageItems = new List<FulfillmentPackageItem>{};
        }

        ///<summary>
        ///The fulfillment package identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment package identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The fulfillment package type identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment package type identifier.")]
        public virtual Guid FulfillmentPackageTypeId { get; set; }

        ///<summary>
        ///The fulfillment package items.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package items.")]
        public virtual List<FulfillmentPackageItem> FulfillmentPackageItems { get; set; }

        ///<summary>
        ///The tracking number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tracking number.")]
        public virtual string TrackingNumber { get; set; }

        ///<summary>
        ///The tracking url.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tracking url.")]
        public virtual string TrackingUrl { get; set; }

        ///<summary>
        ///The tracking reference id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tracking reference id.")]
        public virtual string TrackingReferenceId { get; set; }

        ///<summary>
        ///The return tracking number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The return tracking number.")]
        public virtual string ReturnTrackingNumber { get; set; }

        ///<summary>
        ///The return tracking url.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The return tracking url.")]
        public virtual string ReturnTrackingUrl { get; set; }

        ///<summary>
        ///The return tracking reference id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The return tracking reference id.")]
        public virtual string ReturnTrackingReferenceId { get; set; }

        ///<summary>
        ///The carrier name used for the package for outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier name used for the package for outbound.")]
        public virtual string CarrierNameOutbound { get; set; }

        ///<summary>
        ///The carrier account name used for the package for outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier account name used for the package for outbound.")]
        public virtual string CarrierAccountNameOutbound { get; set; }

        ///<summary>
        ///The carrier service level used for the package for outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier service level used for the package for outbound.")]
        public virtual string CarrierServiceLevelOutbound { get; set; }

        ///<summary>
        ///The carrier account id used for the package for outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier account id used for the package for outbound.")]
        public virtual string CarrierAccountIdOutbound { get; set; }

        ///<summary>
        ///The carrier manifest requirement.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier manifest requirement.")]
        public virtual FulfillmentCarrierManifestRequirement CarrierManifestRequirement { get; set; }

        ///<summary>
        ///The carrier manifest status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier manifest status.")]
        public virtual FulfillmentCarrierManifestStatus CarrierManifestStatus { get; set; }

        ///<summary>
        ///The carrier outbound cost.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier outbound cost.")]
        public virtual decimal CarrierOutboundCost { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packageTypes/{ScopeId}", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateFulfillmentPackageTypeRequest
        : IReturn<FulfillmentPackageType>, IPost
    {
        ///<summary>
        ///The fulfillment package type identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment package type identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The fulfillment package type display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package type display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The fulfillment package type short display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package type short display name.")]
        public virtual LocalizedString ShortDisplayName { get; set; }

        ///<summary>
        ///The fulfillment package type description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package type description.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The Distance UOM.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Distance UOM.")]
        public virtual string DistanceUOM { get; set; }

        ///<summary>
        ///The UOM Length.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UOM Length.")]
        public virtual decimal Length { get; set; }

        ///<summary>
        ///The UOM Height.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UOM Height.")]
        public virtual decimal Height { get; set; }

        ///<summary>
        ///The UOM Width.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UOM Width.")]
        public virtual decimal Width { get; set; }

        ///<summary>
        ///A value indicating whether the fulfillment package type is active or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the fulfillment package type is active or not.")]
        public virtual bool IsActive { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packages/{ScopeId}/byShipment/{ShipmentId}", "DELETE")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteFulfillmentPackageForShipmentRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The shipment identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The shipment identifier.")]
        public virtual Guid ShipmentId { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packages/{ScopeId}/{Id}", "DELETE")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteFulfillmentPackageRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The fulfillment package id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment package id.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packageTypes/{ScopeId}/{Id}", "DELETE")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteFulfillmentPackageTypeRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The fulfillment package type id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment package type id.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packages/{ScopeId}/findmanifest", "GET")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindFulfillmentManifestPackagesRequest
        : IReturn<FulfillmentPackageResult>, IGet
    {
        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment location identifier.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The optional shipping provider identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The optional shipping provider identifier.")]
        public virtual Guid? ShippingProviderId { get; set; }

        ///<summary>
        ///The optional fulfillment status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The optional fulfillment status.")]
        public virtual string FulfillmentStatus { get; set; }

        ///<summary>
        ///The optional manifested from date filter (utc).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The optional manifested from date filter (utc).")]
        public virtual DateTime? ManifestedFrom { get; set; }

        ///<summary>
        ///The optional manifested from date filter (utc).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The optional manifested from date filter (utc).")]
        public virtual DateTime? ManifestedTo { get; set; }

        ///<summary>
        ///The optional manifest reference id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The optional manifest reference id.")]
        public virtual string ManifestReferenceId { get; set; }

        ///<summary>
        ///A value indicating whether fulfillment packages with a manifest are returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether fulfillment packages with a manifest are returned.")]
        public virtual bool IncludePackagesWithManifest { get; set; }

        ///<summary>
        ///A value indicating whether fulfillment packages without a manifest are returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether fulfillment packages without a manifest are returned.")]
        public virtual bool IncludePackagesWithoutManifest { get; set; }

        ///<summary>
        ///A value indicating whether fulfillment package items are retrieved with each package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether fulfillment package items are retrieved with each package.")]
        public virtual bool IncludePackageItems { get; set; }

        ///<summary>
        ///The carrier account id for outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier account id for outbound.")]
        public virtual string CarrierAccountIdOutbound { get; set; }

        ///<summary>
        ///The carrier account name for outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier account name for outbound.")]
        public virtual string CarrierAccountNameOutbound { get; set; }

        ///<summary>
        ///The carrier name for outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier name for outbound.")]
        public virtual string CarrierNameOutbound { get; set; }

        ///<summary>
        ///The carrier service level for outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier service level for outbound.")]
        public virtual string CarrierServiceLevelOutbound { get; set; }

        ///<summary>
        ///The optional carrier manifest requirement to find.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The optional carrier manifest requirement to find.")]
        public virtual FulfillmentCarrierManifestRequirement CarrierManifestRequirement { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packages/{ScopeId}/find", "GET")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindFulfillmentPackagesRequest
        : IReturn<FulfillmentPackageResult>, IGet
    {
        public FindFulfillmentPackagesRequest()
        {
            ShipmentIds = new List<Guid>{};
        }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order identifier.")]
        public virtual Guid? OrderId { get; set; }

        ///<summary>
        ///A list of shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of shipment identifier.")]
        public virtual List<Guid> ShipmentIds { get; set; }

        ///<summary>
        ///The culture name in which language the data for the fulfillment package type will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data for the fulfillment package type will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///A value indicating whether the fulfillment package type should be returns along each fulfillment package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the fulfillment package type should be returns along each fulfillment package.")]
        public virtual bool IncludeFulfillmentPackageType { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packageTypes/{ScopeId}/find", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [DataContract]
    public partial class FindFulfillmentPackageTypesRequest
        : IReturn<FulfillmentPackageTypeResult>, IPost
    {
        ///<summary>
        ///Scope to retrieve fulfillment package types for
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Scope to retrieve fulfillment package types for")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///Determine if parent scope fulfillment package types are included or not
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determine if parent scope fulfillment package types are included or not")]
        public virtual bool IncludeParentScopes { get; set; }

        ///<summary>
        ///Whether we should retrieve only the active fulfillment package types.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether we should retrieve only the active fulfillment package types.")]
        public virtual bool OnlyActive { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packages/{ScopeId}/{Id}", "GET")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="Requested fulfillment package not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentPackageRequest
        : IReturn<FulfillmentPackage>, IGet
    {
        ///<summary>
        ///The fulfillment package identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment package identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The culture name in which language the data for the fulfillment package type will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data for the fulfillment package type will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///A value indicating whether the fulfillment package type should be returns along the fulfillment package.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="A value indicating whether the fulfillment package type should be returns along the fulfillment package.")]
        public virtual bool IncludeFulfillmentPackageType { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packageTypes/{ScopeId}/{Id}", "GET")]
    [Api(Description="API calls used during the fulfillment process.")]
    [DataContract]
    public partial class GetFulfillmentPackageTypeRequest
        : IReturn<FulfillmentPackageType>, IGet
    {
        ///<summary>
        ///The fulfillment package type identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package type identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///Determine if parent scopes should be considered when searching fulfillment package type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determine if parent scopes should be considered when searching fulfillment package type.")]
        public virtual bool IncludeParentScopes { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packages/{ScopeId}/list", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ListFulfillmentPackagesRequest
        : IReturn<FulfillmentPackageResult>, IPost
    {
        public ListFulfillmentPackagesRequest()
        {
            ShipmentIds = new List<Guid>{};
            FulfillmentPackageIds = new List<Guid>{};
        }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order identifier.")]
        public virtual Guid? OrderId { get; set; }

        ///<summary>
        ///A list of shipment identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of shipment identifier.")]
        public virtual List<Guid> ShipmentIds { get; set; }

        ///<summary>
        ///A list of fulfillment package identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of fulfillment package identifier.")]
        public virtual List<Guid> FulfillmentPackageIds { get; set; }

        ///<summary>
        ///The culture name in which language the data for the fulfillment package type will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data for the fulfillment package type will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///A value indicating whether the fulfillment package type should be returns along each fulfillment package.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the fulfillment package type should be returns along each fulfillment package.")]
        public virtual bool IncludeFulfillmentPackageType { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packages/{ScopeId}/transferFulfillmentPackageItems", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class TransferFulfillmentPackageItemsRequest
        : IReturn<FulfillmentPackage>, IPost
    {
        public TransferFulfillmentPackageItemsRequest()
        {
            FulfillmentPackageItemTransferInfos = new List<FulfillmentPackageItemTransferInfo>{};
        }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The fulfillment package identifier to transfer items from.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment package identifier to transfer items from.")]
        public virtual Guid SourceFulfillmentPackageId { get; set; }

        ///<summary>
        ///The fulfillment package identifier to transfer items to. Set to null to create a new fulfillment package using default package type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package identifier to transfer items to. Set to null to create a new fulfillment package using default package type.")]
        public virtual Guid? DestinationFulfillmentPackageId { get; set; }

        ///<summary>
        ///A list containing information about fulfillment package items that needs to be transfer from one package to another.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list containing information about fulfillment package items that needs to be transfer from one package to another.")]
        public virtual List<FulfillmentPackageItemTransferInfo> FulfillmentPackageItemTransferInfos { get; set; }
    }

    [DataContract]
    public partial class UpdateFulfillmentPackage
    {
        ///<summary>
        ///The fulfillment package type identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment package type identifier.")]
        public virtual Guid FulfillmentPackageTypeId { get; set; }

        ///<summary>
        ///The fulfillment package identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment package identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The tracking number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tracking number.")]
        public virtual string TrackingNumber { get; set; }

        ///<summary>
        ///The tracking url.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tracking url.")]
        public virtual string TrackingUrl { get; set; }

        ///<summary>
        ///The tracking reference id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tracking reference id.")]
        public virtual string TrackingReferenceId { get; set; }

        ///<summary>
        ///The return tracking number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The return tracking number.")]
        public virtual string ReturnTrackingNumber { get; set; }

        ///<summary>
        ///The return tracking url.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The return tracking url.")]
        public virtual string ReturnTrackingUrl { get; set; }

        ///<summary>
        ///The return tracking reference id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The return tracking reference id.")]
        public virtual string ReturnTrackingReferenceId { get; set; }

        ///<summary>
        ///The manifest reference id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The manifest reference id.")]
        public virtual string ManifestReferenceId { get; set; }

        ///<summary>
        ///The manifest url.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The manifest url.")]
        public virtual string ManifestUrl { get; set; }

        ///<summary>
        ///The carrier account id for outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier account id for outbound.")]
        public virtual string CarrierAccountIdOutbound { get; set; }

        ///<summary>
        ///The carrier account name for outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier account name for outbound.")]
        public virtual string CarrierAccountNameOutbound { get; set; }

        ///<summary>
        ///The carrier name for outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier name for outbound.")]
        public virtual string CarrierNameOutbound { get; set; }

        ///<summary>
        ///The carrier service level for outbound.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier service level for outbound.")]
        public virtual string CarrierServiceLevelOutbound { get; set; }

        ///<summary>
        ///The carrier manifest requirement.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier manifest requirement.")]
        public virtual FulfillmentCarrierManifestRequirement CarrierManifestRequirement { get; set; }

        ///<summary>
        ///The carrier manifest status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier manifest status.")]
        public virtual FulfillmentCarrierManifestStatus CarrierManifestStatus { get; set; }

        ///<summary>
        ///The carrier outbound cost.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier outbound cost.")]
        public virtual decimal CarrierOutboundCost { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packages/{ScopeId}/{Id}", "PUT")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateFulfillmentPackageRequest
        : UpdateFulfillmentPackage, IReturn<FulfillmentPackage>, IPut
    {
        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packages/{ScopeId}/bulkupdate", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateFulfillmentPackagesRequest
        : IReturn<FulfillmentPackageResult>, IPost
    {
        public UpdateFulfillmentPackagesRequest()
        {
            FulfillmentPackages = new List<UpdateFulfillmentPackage>{};
        }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The fulfillment packages to update.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment packages to update.")]
        public virtual List<UpdateFulfillmentPackage> FulfillmentPackages { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/packageTypes/{ScopeId}/{Id}", "PUT")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateFulfillmentPackageTypeRequest
        : IReturn<FulfillmentPackageType>, IPut
    {
        ///<summary>
        ///The fulfillment package type identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment package type identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The fulfillment package type display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package type display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The fulfillment package type short display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package type short display name.")]
        public virtual LocalizedString ShortDisplayName { get; set; }

        ///<summary>
        ///The fulfillment package type description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment package type description.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The Distance UOM.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Distance UOM.")]
        public virtual string DistanceUOM { get; set; }

        ///<summary>
        ///The UOM Length.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UOM Length.")]
        public virtual decimal Length { get; set; }

        ///<summary>
        ///The UOM Height.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UOM Height.")]
        public virtual decimal Height { get; set; }

        ///<summary>
        ///The UOM Width.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UOM Width.")]
        public virtual decimal Width { get; set; }

        ///<summary>
        ///A value indicating whether the fulfillment package type is active or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the fulfillment package type is active or not.")]
        public virtual bool IsActive { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.Fulfillment.SLA
{

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/SLAs/{ScopeId}", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateFulfillmentSLARequest
        : IReturn<FulfillmentSLA>, IPost
    {
        ///<summary>
        ///The fulfillment sla id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment sla id.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The order identifier.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The shipment identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The shipment identifier.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment location identifier.")]
        public virtual Guid? FulfillmentLocationId { get; set; }

        ///<summary>
        ///The name.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The delay before the sla will expire.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The delay before the sla will expire.")]
        public virtual int DelayInMinutes { get; set; }

        ///<summary>
        ///The warning time before the sla will expire.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The warning time before the sla will expire.")]
        public virtual int ExpiryWarningTimeInMinutes { get; set; }

        ///<summary>
        ///The default delay in minutes when the SLA time exceeded the max days (Default is 5).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default delay in minutes when the SLA time exceeded the max days (Default is 5).")]
        public virtual int? DefaultDelayInMinutesWhenSLADateExceedsMaxDate { get; set; }

        ///<summary>
        ///The number of days the SLA can extend into the future (Default is 30).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of days the SLA can extend into the future (Default is 30).")]
        public virtual int? SLACreationMaxDays { get; set; }

        ///<summary>
        ///The expiry date and time to use if passed in to the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expiry date and time to use if passed in to the request.")]
        public virtual DateTime? ExpiryDate { get; set; }

        ///<summary>
        ///The schedule type to use.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The schedule type to use.")]
        public virtual ScheduleType ScheduleType { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/SLAs/disable", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DisableFulfillmentSLARequest
        : IReturn<FulfillmentSLA>, IPost
    {
        ///<summary>
        ///The fulfillment SLA id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment SLA id.")]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/SLAs/{ScopeId}/find", "POST")]
    [Api(Description="API calls used during the fulfillment process.")]
    [DataContract]
    public partial class FindFulfillmentSLARequest
        : QueryRequestBase, IReturn<FulfillmentSLAQueryResult>, IPost
    {
        ///<summary>
        ///The fulfillment location id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location id.")]
        public virtual Guid? FulfillmentLocationId { get; set; }

        ///<summary>
        ///The order id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order id.")]
        public virtual Guid? OrderId { get; set; }

        ///<summary>
        ///The shipment id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment id.")]
        public virtual Guid? ShipmentId { get; set; }

        ///<summary>
        ///Whether we should retrieve only the active fulfillment SLA.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether we should retrieve only the active fulfillment SLA.")]
        public virtual bool OnlyActive { get; set; }

        ///<summary>
        ///Whether we should retrieve only the fulfillment SLA near expiry or expired.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether we should retrieve only the fulfillment SLA near expiry or expired.")]
        public virtual bool OnlyNearExpiryOrExpired { get; set; }
    }

    [DataContract]
    public partial class FulfillmentSLAQueryResult
        : QueryResult<FulfillmentSLA>
    {
    }

    ///<summary>
    ///API calls used during the fulfillment process.
    ///</summary>
    [Route("/fulfillments/SLAs/{ScopeId}/{Id}", "GET")]
    [Api(Description="API calls used during the fulfillment process.")]
    [ApiResponse(Description="Requested fulfillment SLA not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentSLARequest
        : IReturn<FulfillmentSLA>, IGet
    {
        ///<summary>
        ///The fulfillment SLA identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The fulfillment SLA identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The scope id.")]
        public virtual string ScopeId { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.InventoryReservation
{

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/reservations/{OwnerId}/cancelAll", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CancelAllInventoryReservedItemsRequest
        : IReturnVoid, IPost
    {
        ///<summary>
        ///Gets or sets the unique identifier of the order, order draft or cart (according to the owner type)
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the unique identifier of the order, order draft or cart (according to the owner type)")]
        public virtual Guid OwnerId { get; set; }

        ///<summary>
        ///The inventory location identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier")]
        public virtual string InventoryLocationId { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/reservations/{OwnerId}/cancelList", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CancelInventoryReservedItemsRequest
        : IReturnVoid, IPost
    {
        public CancelInventoryReservedItemsRequest()
        {
            ReservationIds = new Guid[]{};
        }

        ///<summary>
        ///The unique identifier of the order, order draft or cart (according to the owner type)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order, order draft or cart (according to the owner type)")]
        public virtual Guid OwnerId { get; set; }

        ///<summary>
        ///The inventory reservation identifiers
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory reservation identifiers")]
        public virtual Guid[] ReservationIds { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/reservations/{OwnerId}/changeStockStatus", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ChangeInventoryReservedItemsStockStatusRequest
        : IReturn<ChangeInventoryReservedItemsStockStatusResult>, IPost
    {
        public ChangeInventoryReservedItemsStockStatusRequest()
        {
            ReservationIds = new Guid[]{};
        }

        ///<summary>
        ///The unique identifier of the order, order draft or cart (according to the owner type)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order, order draft or cart (according to the owner type)")]
        public virtual Guid OwnerId { get; set; }

        ///<summary>
        ///The inventory reservation identifiers
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory reservation identifiers")]
        public virtual Guid[] ReservationIds { get; set; }

        ///<summary>
        ///The new stock status reservation identifiers
        ///</summary>
        [DataMember]
        [ApiMember(Description="The new stock status reservation identifiers")]
        public virtual StockStatus StockStatus { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/reservations/{OwnerId}/confirm", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ConfirmInventoryReservedOrderItemsRequest
        : IReturn<IEnumerable<InventoryReservedItem>>, IPost
    {
        public ConfirmInventoryReservedOrderItemsRequest()
        {
            ReservationIds = new Guid[]{};
        }

        ///<summary>
        ///The unique identifier of the order, order draft or cart (according to the owner type)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order, order draft or cart (according to the owner type)")]
        public virtual Guid OwnerId { get; set; }

        ///<summary>
        ///The inventory reservation identifiers
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory reservation identifiers")]
        public virtual Guid[] ReservationIds { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/reservations/{OwnerId}/evaluate", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class EvaluateInventoryAvailabilityRequest
        : IReturn<List<InventoryItemAvailabilityEvaluationResult>>, IPost
    {
        public EvaluateInventoryAvailabilityRequest()
        {
            Requests = new InventoryItemAvailabilityEvaluationRequest[]{};
        }

        ///<summary>
        ///The unique identifier of the order, order draft or cart (according to the owner type)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order, order draft or cart (according to the owner type)")]
        public virtual Guid OwnerId { get; set; }

        ///<summary>
        ///The inventory item availability evaluation requests
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory item availability evaluation requests")]
        public virtual InventoryItemAvailabilityEvaluationRequest[] Requests { get; set; }

        ///<summary>
        ///The inventory availability evaluation date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory availability evaluation date")]
        public virtual DateTime? EvaluationDate { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/reservations/{OwnerId}", "GET")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetInventoryReservedItemsRequest
        : IReturn<IEnumerable<InventoryReservedItem>>, IGet
    {
        ///<summary>
        ///The unique identifier of the order, order draft or cart (according to the owner type)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order, order draft or cart (according to the owner type)")]
        public virtual Guid OwnerId { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/reservations/{OwnerId}", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ReserveInventoryItemsRequest
        : IReturn<InventoryReservationResult>, IPost
    {
        public ReserveInventoryItemsRequest()
        {
            InventoryItemReservationRequests = new InventoryItemReservationRequest[]{};
        }

        ///<summary>
        ///The unique identifier of the order, order draft or cart (according to the owner type)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the order, order draft or cart (according to the owner type)")]
        public virtual Guid OwnerId { get; set; }

        ///<summary>
        ///The owner type
        ///</summary>
        [DataMember]
        [ApiMember(Description="The owner type")]
        public virtual OwnerType OwnerType { get; set; }

        ///<summary>
        ///The inventory location identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The value that allows or not a partial availability reservation
        ///</summary>
        [DataMember]
        [ApiMember(Description="The value that allows or not a partial availability reservation")]
        public virtual bool AllowPartialAvailabilityReservation { get; set; }

        ///<summary>
        ///The effective date of the reservation
        ///</summary>
        [DataMember]
        [ApiMember(Description="The effective date of the reservation")]
        public virtual DateTime? EffectiveDate { get; set; }

        ///<summary>
        ///The inventory item reservation requests
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory item reservation requests")]
        public virtual InventoryItemReservationRequest[] InventoryItemReservationRequests { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.OrderDraft
{

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orderdraft/{ScopeId}/{DraftId}/payment/{PaymentId}", "GET")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetOrderDraftPaymentRequest
        : ScopedRequest, IReturn<Payment>, IGet
    {
        ///<summary>
        ///The id of the draft order for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the draft order for the request.")]
        public virtual Guid DraftId { get; set; }

        ///<summary>
        ///The of payment associate to the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The of payment associate to the cart.")]
        public virtual Guid PaymentId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orderdraft/{ScopeId}/{DraftId}/payment/{PaymentId}", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateOrderDraftPaymentRequest
        : ScopedRequest, IReturn<Payment>, IPost
    {
        ///<summary>
        ///The id of the draft order for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the draft order for the request.")]
        public virtual Guid DraftId { get; set; }

        ///<summary>
        ///The of payment associate to the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The of payment associate to the cart.")]
        public virtual Guid PaymentId { get; set; }

        ///<summary>
        ///The paymant status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The paymant status.")]
        public virtual string PaymentStatus { get; set; }

        ///<summary>
        ///The payment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment method.")]
        public virtual PaymentMethod PaymentMethod { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this request.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.Picking
{

    ///<summary>
    ///Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    ///</summary>
    [Route("/pickingMissions/{ScopeId}/{Id}/assignPicker", "POST")]
    [Api(Description="Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AssignPickerToPickingMissionRequest
        : IReturn<PickingMission>, IPost
    {
        ///<summary>
        ///the picking mission identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picking mission identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the picker.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picker.")]
        public virtual string Picker { get; set; }
    }

    ///<summary>
    ///Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    ///</summary>
    [Route("/pickingMissions/{ScopeId}/{Id}/cancelAssembly", "POST")]
    [Api(Description="Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CancelPickingMissionAssemblyRequest
        : IReturn<PickingMission>, IPost
    {
        ///<summary>
        ///the picking mission identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picking mission identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    ///</summary>
    [Route("/pickingMissions/{ScopeId}/{Id}/cancel", "POST")]
    [Api(Description="Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CancelPickingMissionRequest
        : IReturn<PickingMission>, IPost
    {
        ///<summary>
        ///the picking mission identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picking mission identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    ///</summary>
    [Route("/pickingMissions/{ScopeId}/{Id}/completeAssembly", "POST")]
    [Api(Description="Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CompletePickingMissionAssemblyRequest
        : IReturn<PickingMission>, IPost
    {
        public CompletePickingMissionAssemblyRequest()
        {
            MissionItemPickedQuantities = new List<MissionItemPickedQuantity>{};
        }

        ///<summary>
        ///the picking mission identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picking mission identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the mission item picked quantities.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the mission item picked quantities.")]
        public virtual List<MissionItemPickedQuantity> MissionItemPickedQuantities { get; set; }
    }

    ///<summary>
    ///Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    ///</summary>
    [Route("/pickingMissions/{ScopeId}", "POST")]
    [Api(Description="Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreatePickingMissionRequest
        : IReturn<PickingMission>, IPost
    {
        public CreatePickingMissionRequest()
        {
            MissionItems = new List<MissionItem>{};
        }

        ///<summary>
        ///the picking mission id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picking mission id.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the fulfillment location identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the fulfillment location identifier.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the picking mission items.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the picking mission items.")]
        public virtual List<MissionItem> MissionItems { get; set; }
    }

    ///<summary>
    ///Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    ///</summary>
    [Route("/pickingMissions/{ScopeId}/byLocation/{FulfillmentLocationId}", "GET")]
    [Api(Description="Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentLocationPickingMissionsRequest
        : IReturn<PickingMissionResult>, IGet
    {
        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the fulfillment location identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the fulfillment location identifier.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the picking mission status.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picking mission status.")]
        public virtual PickingMissionStatus? Status { get; set; }
    }

    ///<summary>
    ///Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    ///</summary>
    [Route("/pickingMissions/{ScopeId}/byOrder/{OrderId}", "GET")]
    [Api(Description="Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetOrderPickingMissionsRequest
        : IReturn<PickingMissionResult>, IGet
    {
        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the order identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the order identifier.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///the fulfillment location identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the fulfillment location identifier.")]
        public virtual Guid? FulfillmentLocationId { get; set; }

        ///<summary>
        ///the picking mission status.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picking mission status.")]
        public virtual PickingMissionStatus? Status { get; set; }
    }

    ///<summary>
    ///Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    ///</summary>
    [Route("/pickingMissions/{ScopeId}/{Id}", "GET")]
    [Api(Description="Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.")]
    [ApiResponse(Description="Requested picking mission not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetPickingMissionRequest
        : IReturn<PickingMission>, IGet
    {
        ///<summary>
        ///the picking mission identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picking mission identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    ///</summary>
    [Route("/pickingMissions/{ScopeId}/byShipment/{ShipmentId}", "GET")]
    [Api(Description="Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetShipmentPickingMissionsRequest
        : IReturn<PickingMissionResult>, IGet
    {
        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the shipment identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the shipment identifier.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the fulfillment location identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the fulfillment location identifier.")]
        public virtual Guid? FulfillmentLocationId { get; set; }

        ///<summary>
        ///the picking mission status.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picking mission status.")]
        public virtual PickingMissionStatus? Status { get; set; }
    }

    ///<summary>
    ///Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    ///</summary>
    [Route("/pickingMissions/{ScopeId}/{Id}/saveAssemblyProgress", "PUT")]
    [Api(Description="Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class SavePickingMissionAssemblyProgressRequest
        : IReturn<PickingMission>, IPut
    {
        public SavePickingMissionAssemblyProgressRequest()
        {
            MissionItemPickedQuantities = new List<MissionItemPickedQuantity>{};
        }

        ///<summary>
        ///the picking mission identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picking mission identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the mission item picked quantities.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the mission item picked quantities.")]
        public virtual List<MissionItemPickedQuantity> MissionItemPickedQuantities { get; set; }
    }

    ///<summary>
    ///Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    ///</summary>
    [Route("/pickingMissions/{ScopeId}/{Id}/startAssembly", "POST")]
    [Api(Description="Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class StartPickingMissionAssemblyRequest
        : IReturn<PickingMission>, IPost
    {
        ///<summary>
        ///the picking mission identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picking mission identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    ///</summary>
    [Route("/pickingMissions/{ScopeId}/{Id}/unassignPicker", "POST")]
    [Api(Description="Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UnassignPickerFromPickingMissionRequest
        : IReturn<PickingMission>, IPost
    {
        ///<summary>
        ///the picking mission identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picking mission identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the scope identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope identifier.")]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    ///</summary>
    [Route("/pickingMissions/{ScopeId}/{Id}", "PUT")]
    [Api(Description="Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdatePickingMissionRequest
        : IReturn<PickingMission>, IPut
    {
        public UpdatePickingMissionRequest()
        {
            MissionItems = new List<MissionItem>{};
        }

        ///<summary>
        ///the picking mission identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the picking mission identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the picking mission items.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the picking mission items.")]
        public virtual List<MissionItem> MissionItems { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.RMA
{

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/RMA/{ScopeId}/{OrderNumber}/Guest", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class CreateRmaGuestRequest
        : CreateRmaRequestBase, IReturn<RmaRequestResult>, IPost
    {
        ///<summary>
        ///Gets or set the last name of the customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or set the last name of the customer")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///Gets or sets the Postal code of the customer billing address
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the Postal code of the customer billing address")]
        public virtual string PostalCode { get; set; }

        ///<summary>
        ///the email address of the customer
        ///</summary>
        [DataMember]
        [ApiMember(Description="the email address of the customer")]
        public virtual string Email { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/RMA/{ScopeId}/{OrderNumber}/{CustomerId}/Registered", "POST")]
    [Route("/orders/RMA/{ScopeId}/{OrderNumber}/Registered", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class CreateRmaRegisteredRequest
        : CreateRmaRequestBase, IReturn<RmaRequestResult>, IPost
    {
        ///<summary>
        ///the Identifier of the Customer who owns the RMA
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Identifier of the Customer who owns the RMA")]
        public virtual Guid CustomerId { get; set; }
    }

    [DataContract]
    public partial class CreateRmaRequestBase
        : ScopedRequest
    {
        public CreateRmaRequestBase()
        {
            RmaItems = new List<RmaItem>{};
        }

        ///<summary>
        ///the unique identifier of the RMA
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the RMA")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the external number for RMA
        ///</summary>
        [DataMember]
        [ApiMember(Description="the external number for RMA")]
        public virtual string RmaExternalNumber { get; set; }

        ///<summary>
        ///The Order Number related to the RMA
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Order Number related to the RMA")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///RMA item details
        ///</summary>
        [DataMember]
        [ApiMember(Description="RMA item details")]
        public virtual List<RmaItem> RmaItems { get; set; }

        ///<summary>
        ///Custom information about the request and customer, if applicable
        ///</summary>
        [DataMember]
        [ApiMember(Description="Custom information about the request and customer, if applicable")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/RMA/{ScopeId}/{OrderNumber}/{RmaNumber}", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class GetRmaRequest
        : ScopedRequest, IReturn<Rma>, IGet
    {
        ///<summary>
        ///the RMA number
        ///</summary>
        [DataMember]
        [ApiMember(Description="the RMA number")]
        public virtual string RmaNumber { get; set; }

        ///<summary>
        ///the order number
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order number")]
        public virtual string OrderNumber { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/RMA/{ScopeId}/{OrderNumber}", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class GetRmasByOrderRequest
        : ScopedRequest, IReturn<RmaListResult>, IGet
    {
        ///<summary>
        ///the order number
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order number")]
        public virtual string OrderNumber { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/RMA/{ScopeId}/{OrderNumber}/{RmaNumber}", "PUT")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [DataContract]
    public partial class UpdateRmaRequest
        : IReturn<RmaRequestResult>, IPut
    {
        public UpdateRmaRequest()
        {
            RmaItems = new List<RmaItem>{};
        }

        ///<summary>
        ///Scope Id
        ///</summary>
        [DataMember]
        [ApiMember(Description="Scope Id")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the RMA Number
        ///</summary>
        [DataMember]
        [ApiMember(Description="the RMA Number")]
        public virtual string RmaNumber { get; set; }

        ///<summary>
        ///the RMA external Number
        ///</summary>
        [DataMember]
        [ApiMember(Description="the RMA external Number")]
        public virtual string RmaExternalNumber { get; set; }

        ///<summary>
        ///the Order Number related to the RMA
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Order Number related to the RMA")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///the process status of the RMA
        ///</summary>
        [DataMember]
        [ApiMember(Description="the process status of the RMA")]
        public virtual string Status { get; set; }

        ///<summary>
        ///whether the RMA is finished.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether the RMA is finished.")]
        public virtual bool IsFinished { get; set; }

        ///<summary>
        ///Total amount of refunded items, if applicable
        ///</summary>
        [DataMember]
        [ApiMember(Description="Total amount of refunded items, if applicable")]
        public virtual decimal? TotalAmountRefunded { get; set; }

        ///<summary>
        ///RMA item details
        ///</summary>
        [DataMember]
        [ApiMember(Description="RMA item details")]
        public virtual List<RmaItem> RmaItems { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.Shopping
{

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/quotaExceptions/{SlotId}", "POST")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested time slot not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AddFulfillmentLocationTimeSlotQuotaExceptionRequest
        : ScopedRequest, IReturn<TimeSlotQuotaException>, IPost
    {
        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location identifier.", IsRequired=true)]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The unique identifier of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the time slot.", IsRequired=true)]
        public virtual Guid SlotId { get; set; }

        ///<summary>
        ///The effective date of the exception.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The effective date of the exception.", IsRequired=true)]
        public virtual DateTime ExceptionDate { get; set; }

        ///<summary>
        ///The quota override
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quota override", IsRequired=true)]
        public virtual int Quota { get; set; }

        ///<summary>
        ///The name of the exception.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the exception.")]
        public virtual string Name { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/", "POST")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AddFulfillmentLocationTimeSlotRequest
        : AddOrUpdateFulfillmentLocationTimeSlotRequestBase, IReturn<TimeSlot>, IPost
    {
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/{SlotId}", "POST")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AddFulfillmentLocationTimeSlotReservationRequest
        : AddFulfillmentLocationTimeSlotReservationRequestBase, IReturn<TimeSlotReservation>, IPost
    {
        ///<summary>
        ///The reservation date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation date.", IsRequired=true)]
        public virtual DateTime ReservationDate { get; set; }

        ///<summary>
        ///The cart scope id associated with the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The cart scope id associated with the reservation.", IsRequired=true)]
        public virtual string CartScopeId { get; set; }

        ///<summary>
        ///The cart customer id associated with the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The cart customer id associated with the reservation.", IsRequired=true)]
        public virtual Guid CartCustomerId { get; set; }

        ///<summary>
        ///The cart name associated with the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The cart name associated with the reservation.", IsRequired=true)]
        public virtual string CartName { get; set; }

        ///<summary>
        ///The maximum number of renewals for allowed for this reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of renewals for allowed for this reservation.", IsRequired=true)]
        public virtual int? MaxNumberOfRenewals { get; set; }

        ///<summary>
        ///Indicates whether pre-existing timeslots are included in the reservation calculation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether pre-existing timeslots are included in the reservation calculation.", IsRequired=true)]
        public virtual bool IncludePreExistingTimeSlotsForReservations { get; set; }
    }

    [DataContract]
    public partial class AddFulfillmentLocationTimeSlotReservationRequestBase
        : FulfillmentLocationTimeSlotReservationByIdRequestBase
    {
        ///<summary>
        ///The reservation order id associated with the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation order id associated with the reservation.")]
        public virtual Guid? OrderId { get; set; }

        ///<summary>
        ///The reservation order number associated with the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation order number associated with the reservation.")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///The reservation shipment id associated with the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation shipment id associated with the reservation.")]
        public virtual Guid? ShipmentId { get; set; }

        ///<summary>
        ///The reservation status. Options are Tentative, Confirmed, Expired and Void.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation status. Options are Tentative, Confirmed, Expired and Void.", IsRequired=true)]
        public virtual TimeslotReservationStatus ReservationStatus { get; set; }

        ///<summary>
        ///The expiry time for this reservation. Required only for Tentative status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expiry time for this reservation. Required only for Tentative status.")]
        public virtual TimeSpan? ExpiryTime { get; set; }

        ///<summary>
        ///The expiry time for this reservation. Required only for Tentative status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expiry time for this reservation. Required only for Tentative status.")]
        public virtual TimeSpan? ExpiryWarningTime { get; set; }

        ///<summary>
        ///The comment of the time slot reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The comment of the time slot reservation.")]
        public virtual string Comment { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/several", "POST")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AddFulfillmentLocationTimeSlotsRequest
        : FulfillmentLocationTimeSlotRequestBase, IReturn<List<TimeSlot>>, IPost
    {
        public AddFulfillmentLocationTimeSlotsRequest()
        {
            TimeSlots = new List<TimeSlot>{};
        }

        ///<summary>
        ///the time slots to add
        ///</summary>
        [DataMember]
        [ApiMember(Description="the time slots to add")]
        public virtual List<TimeSlot> TimeSlots { get; set; }
    }

    [DataContract]
    public partial class AddOrUpdateFulfillmentLocationTimeSlotRequestBase
        : FulfillmentLocationTimeSlotByIdRequestBase
    {
        ///<summary>
        ///The day of the time slot. Default is Sunday
        ///</summary>
        [DataMember]
        [ApiMember(Description="The day of the time slot. Default is Sunday", IsRequired=true)]
        public virtual DayOfWeek Day { get; set; }

        ///<summary>
        ///The start time of the time slot. Default is 00:00:00
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start time of the time slot. Default is 00:00:00", IsRequired=true)]
        public virtual TimeSpan SlotBeginTime { get; set; }

        ///<summary>
        ///The end time of the time slot. Default is 00:00:00.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end time of the time slot. Default is 00:00:00.", IsRequired=true)]
        public virtual TimeSpan SlotEndTime { get; set; }

        ///<summary>
        ///The comment of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The comment of the time slot.")]
        public virtual string Comment { get; set; }

        ///<summary>
        ///The quota of the time slot. Default is 0
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quota of the time slot. Default is 0")]
        public virtual int? Quota { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/calculateDelay", "POST")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CalculateFulfillmentLocationsDelayRequest
        : ScopedRequest, IReturn<FulfillmentLocationsDelayCalculationResult>, IPost
    {
        public CalculateFulfillmentLocationsDelayRequest()
        {
            FulfillmentLocationIds = new List<Guid>{};
        }

        ///<summary>
        ///the unique identifier of the Fulfillment locations to calculate.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Fulfillment locations to calculate.", IsRequired=true)]
        public virtual List<Guid> FulfillmentLocationIds { get; set; }

        ///<summary>
        ///The delay to be used in the calculation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The delay to be used in the calculation.", IsRequired=true)]
        public virtual int DelayInMinutes { get; set; }

        ///<summary>
        ///The default delay in minutes when the SLA time exceeds the max days (Default is 5).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default delay in minutes when the SLA time exceeds the max days (Default is 5).", IsRequired=true)]
        public virtual int DefaultDelayInMinutesWhenSLADateExceedsMaxDate { get; set; }

        ///<summary>
        ///The number of days the SLA can extend into the future (Default is 30).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of days the SLA can extend into the future (Default is 30).", IsRequired=true)]
        public virtual int SLACreationMaxDays { get; set; }

        ///<summary>
        ///The schedule type to use.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The schedule type to use.")]
        public virtual ScheduleType ScheduleType { get; set; }

        ///<summary>
        ///The UTC date time the expiry delay would be calculated from. If null, UTC now will be used.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UTC date time the expiry delay would be calculated from. If null, UTC now will be used.")]
        public virtual DateTime? FromDateTime { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{FulfillmentLocationId}/{FulfillmentType}", "POST")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested Fulfillment location not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CalculateScheduleAvailabilitySlotsRequest
        : ScopedRequest, IReturn<DayAvailabilityResult>, IPost
    {
        public CalculateScheduleAvailabilitySlotsRequest()
        {
            DayOfWeekFilter = new List<string>{};
        }

        ///<summary>
        ///the unique identifier of the Fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Fulfillment location.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the unique identifier of the Shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Shipment.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the unique identifier of the Order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Order.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].")]
        public virtual FulfillmentMethodType FulfillmentType { get; set; }

        ///<summary>
        ///The date of the first day to calculate for (time should not be included).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date of the first day to calculate for (time should not be included).")]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///The date of the last day to calculate for (time should not be included).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date of the last day to calculate for (time should not be included).")]
        public virtual DateTime EndDate { get; set; }

        ///<summary>
        ///The start time of the period to consider the availability.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start time of the period to consider the availability.")]
        public virtual TimeSpan? StartTime { get; set; }

        ///<summary>
        ///The end time of the period to consider the availability.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end time of the period to consider the availability.")]
        public virtual TimeSpan? EndTime { get; set; }

        ///<summary>
        ///The day of week to filter (default is all days). Valid entries are Sunday through Saturday.
        ///</summary>
        [DataMember(EmitDefaultValue=false)]
        [ApiMember(Description="The day of week to filter (default is all days). Valid entries are Sunday through Saturday.")]
        public virtual List<string> DayOfWeekFilter { get; set; }

        ///<summary>
        ///A value indicating whether the reservatiom summary will be calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the reservatiom summary will be calculated.")]
        public virtual bool CalculateReservationSummary { get; set; }

        ///<summary>
        ///A value indicating whether previously existing timeslots are to be calculated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether previously existing timeslots are to be calculated.")]
        public virtual bool CalculateWithPreExistingTimeslots { get; set; }

        ///<summary>
        ///A value indicating whether timeslots are returned if they are outside the time range.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether timeslots are returned if they are outside the time range.")]
        public virtual bool ExcludeTimeSlotsOutsideTimeRange { get; set; }

        ///<summary>
        ///the optional override lead time, if set, the lead time for the store operating status will not be used.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the optional override lead time, if set, the lead time for the store operating status will not be used.")]
        public virtual TimeSpan? OverridenLeadTime { get; set; }
    }

    [DataContract]
    public partial class CartRequestBase
        : ScopedRequest
    {
        ///<summary>
        ///The culture name in which language the data will be returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The name associated to the requested cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name associated to the requested cart", IsRequired=true)]
        public virtual string CartName { get; set; }

        ///<summary>
        ///The unique identifier of the Customer owning the cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Customer owning the cart", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }
    }

    [DataContract]
    public partial class CartTypeRequestBase
        : CartRequestBase
    {
        ///<summary>
        ///Gets or sets the expected cart type of the existing cart, if it does not match, an exception will be thrown. Set to null or to an empty string to bypass the validation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the expected cart type of the existing cart, if it does not match, an exception will be thrown. Set to null or to an empty string to bypass the validation.")]
        public virtual string CartType { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/forSlot/{FulfillmentLocationId}/{FulfillmentType}", "POST")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested Fulfillment location not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CheckAvailabilitySlotRequest
        : ScopedRequest, IReturn<string>, IPost
    {
        ///<summary>
        ///the unique identifier of the Fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Fulfillment location.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the unique identifier of the Shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Shipment.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///the unique identifier of the Order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Order.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].")]
        public virtual FulfillmentMethodType FulfillmentType { get; set; }

        ///<summary>
        ///The Date and Time of the desired slot. The calendar date on which the slot should be checked and the time at which the slot starts
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Date and Time of the desired slot. The calendar date on which the slot should be checked and the time at which the slot starts")]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///The Date and Time of the desired slot. The calendar date on which the slot should be checked and the time at which the slot ends
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Date and Time of the desired slot. The calendar date on which the slot should be checked and the time at which the slot ends")]
        public virtual DateTime EndDate { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/clear", "DELETE")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/clear", "DELETE")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ClearCartRequest
        : CartRequestBase, IReturnVoid, IDelete
    {
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/copyTo/{NewCustomerId}", "PUT")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/copyTo/{NewCustomerId}", "PUT")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CopyCartToCustomerRequest
        : ProcessedCartRequestBase, IReturn<ProcessedCart>, IPut
    {
        ///<summary>
        ///the id of the customer who receives the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the customer who receives the cart.")]
        public virtual Guid NewCustomerId { get; set; }

        ///<summary>
        ///Value indicating whether to keep old customer cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Value indicating whether to keep old customer cart.")]
        public virtual bool KeepOldCart { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/orderDraft", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/orderDraft", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [DataContract]
    public partial class CreateOrderDraftFromCartRequest
        : ProcessedCartRequestBase, IReturn<ProcessedCart>, IPost
    {
        ///<summary>
        ///The new unique orderId identifier of the created orderDraft.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The new unique orderId identifier of the created orderDraft.")]
        public virtual string OrderId { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}", "DELETE")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}", "DELETE")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteCartRequest
        : CartRequestBase, IReturnVoid, IDelete
    {
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/quotaExceptions/{SlotId}/{QuotaExceptionId}", "DELETE")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteFulfillmentLocationTimeSlotQuotaExceptionRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location identifier.", IsRequired=true)]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The unique identifier of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the time slot.", IsRequired=true)]
        public virtual Guid SlotId { get; set; }

        ///<summary>
        ///The unique identifier of the quota exception.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the quota exception.", IsRequired=true)]
        public virtual Guid QuotaExceptionId { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/{SlotId}", "DELETE")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteFulfillmentLocationTimeSlotRequest
        : FulfillmentLocationTimeSlotByIdRequestBase, IReturnVoid, IDelete
    {
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/byId/{SlotReservationId}", "DELETE")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteFulfillmentLocationTimeSlotReservationRequest
        : FulfillmentLocationTimeSlotReservationByIdRequestBase, IReturnVoid, IDelete
    {
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots", "DELETE")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteFulfillmentLocationTimeSlotsRequest
        : FulfillmentLocationTimeSlotRequestBase, IReturnVoid, IDelete
    {
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/{PaymentProviderName}/paymentMethods", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/{PaymentProviderName}/paymentMethods", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [DataContract]
    public partial class FindCartPaymentMethodsRequest
        : ScopedRequest, IReturn<List<PaymentMethod>>, IPost
    {
        ///<summary>
        ///the name of the payment provider to use
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the payment provider to use")]
        public virtual string PaymentProviderName { get; set; }

        ///<summary>
        ///custom parameters for the provider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="custom parameters for the provider.")]
        public virtual PropertyBag Parameters { get; set; }

        ///<summary>
        ///the unique identifier of the Customer owning the cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Customer owning the cart", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///the name of the cart to retrieve
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the cart to retrieve")]
        public virtual string CartName { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/find", "POST")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindFulfillmentLocationsRequest
        : QueryRequestBase, IReturn<FindFulfillmentLocationsQueryResult>, IPost
    {
        ///<summary>
        ///The phrases to search for in a text field containing all the information of the fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="The phrases to search for in a text field containing all the information of the fulfillment location")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        ///Includes the results for the child scopes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Includes the results for the child scopes.")]
        public virtual bool IncludeChildScopes { get; set; }
    }

    [DataContract]
    public partial class FulfillmentLocationTimeSlotByIdRequestBase
        : FulfillmentLocationTimeSlotRequestBase
    {
        ///<summary>
        ///the unique identifier of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the time slot.")]
        public virtual Guid SlotId { get; set; }
    }

    [DataContract]
    public partial class FulfillmentLocationTimeSlotRequestBase
        : ScopedRequest
    {
        ///<summary>
        ///the unique identifier of the Fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Fulfillment location.", IsRequired=true)]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].", IsRequired=true)]
        public virtual FulfillmentMethodType FulfillmentMethodType { get; set; }
    }

    [DataContract]
    public partial class FulfillmentLocationTimeSlotReservationByIdForUpdateRequestBase
        : ScopedRequest
    {
        ///<summary>
        ///the unique identifier of the time slot reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the time slot reservation.")]
        public virtual Guid SlotReservationId { get; set; }

        ///<summary>
        ///the unique identifier of the Fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Fulfillment location.", IsRequired=true)]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The unique identifier of the time slot. An empty guid will not update the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the time slot. An empty guid will not update the time slot.")]
        public virtual Guid? SlotId { get; set; }
    }

    [DataContract]
    public partial class FulfillmentLocationTimeSlotReservationByIdRequestBase
        : ScopedRequest
    {
        ///<summary>
        ///the unique identifier of the time slot reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the time slot reservation.")]
        public virtual Guid SlotReservationId { get; set; }

        ///<summary>
        ///the unique identifier of the Fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Fulfillment location.", IsRequired=true)]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The unique identifier of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the time slot.")]
        public virtual Guid SlotId { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/cart/{CartName}", "GET")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}", "GET")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class GetCartRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IGet
    {
        ///<summary>
        ///Whether or not to execute the specified workflow before returning the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not to execute the specified workflow before returning the cart.")]
        public virtual bool? ExecuteWorkflow { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}", "GET")]
    [Route("/carts/{ScopeId}/{CustomerId}", "GET")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCartsByCustomerIdRequest
        : ScopedRequest, IReturn<List<CartSummary>>, IGet
    {
        ///<summary>
        ///a value indicating whether to include carts found in child scopes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether to include carts found in child scopes.")]
        public virtual bool IncludeChildScopes { get; set; }

        ///<summary>
        ///The unique identifier of the Customer owning the cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Customer owning the cart", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The optional cart type. Only the carts of this specific type will be returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The optional cart type. Only the carts of this specific type will be returned.")]
        public virtual string CartType { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/states", "GET")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/states", "GET")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class GetCartStatesRequest
        : CartTypeRequestBase, IReturn<List<EntityState>>, IGet
    {
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/Summary", "GET")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/Summary", "GET")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="Requested cart not found", StatusCode=404)]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class GetCartSummaryRequest
        : ProcessedCartTypeRequestBase, IReturn<CartSummary>, IGet
    {
        ///<summary>
        ///Whether or not to execute the specified workflow before returning the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not to execute the specified workflow before returning the cart.")]
        public virtual bool ExecuteWorkflow { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/delivery", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested Fulfillment location not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetDeliveryFulfillmentLocationsByScopeRequest
        : GetFulfillmentLocationsByScopeRequestBase, IReturn<List<FulfillmentLocation>>, IGet
    {
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/availability", "POST")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentAvailabilityByScopeIdRequest
        : ScopedRequest, IReturn<FulfillmentAvailability>, IPost
    {
        ///<summary>
        ///The unique identifier of the Fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Fulfillment location.", IsRequired=true)]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The datetime to test.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The datetime to test.", IsRequired=true)]
        public virtual DateTime Datetime { get; set; }

        ///<summary>
        ///The FulfillmentMethodType to test.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The FulfillmentMethodType to test.", IsRequired=true)]
        public virtual FulfillmentMethodType FulfillmentMethodType { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/availabilty", "POST")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentAvailabilityRequest
        : ScopedRequest, IReturn<FulfillmentAvailability>, IPost
    {
        ///<summary>
        ///the unique identifier of the Fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Fulfillment location.", IsRequired=true)]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The datetime to test.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The datetime to test.", IsRequired=true)]
        public virtual DateTime Datetime { get; set; }

        ///<summary>
        ///The FulfillmentMethodType to test.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The FulfillmentMethodType to test.", IsRequired=true)]
        public virtual FulfillmentMethodType FulfillmentMethodType { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/elapsedTime", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested Fulfillment location not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentLocationByIdElapsedTimeRequest
        : ScopedRequest, IReturn<GetFulfillmentLocationByIdElapsedTimeResult>, IGet
    {
        ///<summary>
        ///The unique identifier of the fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the fulfillment location.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The start date to determine elapsed time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start date to determine elapsed time.")]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///The end date to determine elapsed time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date to determine elapsed time.")]
        public virtual DateTime EndDate { get; set; }

        ///<summary>
        ///The schedule type to use
        ///</summary>
        [DataMember]
        [ApiMember(Description="The schedule type to use")]
        public virtual ScheduleType ScheduleType { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested Fulfillment location not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentLocationByIdRequest
        : ScopedRequest, IReturn<FulfillmentLocation>, IGet
    {
        ///<summary>
        ///the unique identifier of the Fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Fulfillment location.")]
        public virtual Guid FulfillmentLocationId { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{InventoryLocationIds}", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested Fulfillment location not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentLocationsByInventoryLocationIdsRequest
        : ScopedRequest, IReturn<List<FulfillmentLocation>>, IGet
    {
        public GetFulfillmentLocationsByInventoryLocationIdsRequest()
        {
            InventoryLocationIds = new List<string>{};
        }

        ///<summary>
        ///the unique identifiers of the inventory locations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifiers of the inventory locations.")]
        public virtual List<string> InventoryLocationIds { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested Fulfillment location not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentLocationsByScopeRequest
        : GetFulfillmentLocationsByScopeRequestBase, IReturn<List<FulfillmentLocation>>, IGet
    {
    }

    [DataContract]
    public partial class GetFulfillmentLocationsByScopeRequestBase
        : ScopedRequest
    {
        ///<summary>
        ///Specifies whether or not to load schedules of the fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load schedules of the fulfillment location.")]
        public virtual bool IncludeSchedules { get; set; }

        ///<summary>
        ///Includes the results for the child scopes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Includes the results for the child scopes.")]
        public virtual bool IncludeChildScopes { get; set; }

        ///<summary>
        ///Filter the results to return only active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Filter the results to return only active.")]
        public virtual bool OnlyActive { get; set; }

        ///<summary>
        ///Filter the results to return only inventory enabled.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Filter the results to return only inventory enabled.")]
        public virtual bool OnlyInventoryEnabled { get; set; }

        ///<summary>
        ///Specifies whether or not to load addresses of the fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies whether or not to load addresses of the fulfillment location.")]
        public virtual bool IncludeAddresses { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/{SlotId}", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested time slot not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentLocationTimeSlotByIdRequest
        : FulfillmentLocationTimeSlotByIdRequestBase, IReturn<TimeSlot>, IGet
    {
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/quotaExceptions/{SlotId}", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested time slot not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentLocationTimeSlotQuotaExceptionsRequest
        : ScopedRequest, IReturn<TimeSlotQuotaExceptionResult>, IGet
    {
        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location identifier.", IsRequired=true)]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The unique identifier of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the time slot.", IsRequired=true)]
        public virtual Guid SlotId { get; set; }

        ///<summary>
        ///A value indicating whether past exceptions should be included.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether past exceptions should be included.")]
        public virtual bool IncludePastExceptions { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/byId/{SlotReservationId}", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested time slot not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentLocationTimeSlotReservationByIdRequest
        : FulfillmentLocationTimeSlotReservationByIdRequestBase, IReturn<TimeSlotReservation>, IGet
    {
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/{SlotId}", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested time slot reservation(s) not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentLocationTimeSlotReservationsRequest
        : ScopedRequest, IReturn<TimeSlotReservationResult>, IGet
    {
        ///<summary>
        ///the unique identifier of the Fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Fulfillment location.", IsRequired=true)]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The unique identifier of the time slot to be found (if not set, all timeslot ids are retrieved).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the time slot to be found (if not set, all timeslot ids are retrieved).", IsRequired=true)]
        public virtual Guid? SlotId { get; set; }

        ///<summary>
        ///The reservation date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation date.", IsRequired=true)]
        public virtual DateTime ReservationDate { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested time slot(s) not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentLocationTimeSlotsRequest
        : FulfillmentLocationTimeSlotRequestBase, IReturn<List<TimeSlot>>, IGet
    {
        ///<summary>
        ///If true, will include deleted timeslots in the results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="If true, will include deleted timeslots in the results.")]
        public virtual bool IncludeDeleted { get; set; }
    }

    ///<summary>
    ///The different types that a fulfillment can use.
    ///</summary>
    [Route("/fulfillmentMethodTypes/{ScopeId}/{FulfillmentLocationId}", "GET")]
    [Api(Description="The different types that a fulfillment can use.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentMethodTypesByFulfillmentLocationRequest
        : ScopedRequest, IReturn<List<FulfillmentMethodType>>, IGet
    {
        ///<summary>
        ///the unique identifier of the Fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Fulfillment location.")]
        public virtual Guid FulfillmentLocationId { get; set; }
    }

    ///<summary>
    ///The different types that a fulfillment can use.
    ///</summary>
    [Route("/fulfillmentMethodTypes/{ScopeId}", "GET")]
    [Api(Description="The different types that a fulfillment can use.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentMethodTypesByScopeRequest
        : ScopedRequest, IReturn<List<FulfillmentMethodType>>, IGet
    {
        ///<summary>
        ///A value indicating whether to include child scopes
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether to include child scopes")]
        public virtual bool IncludeChildScopes { get; set; }

        ///<summary>
        ///A value indicating whether to return only on active fulfillment location
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether to return only on active fulfillment location")]
        public virtual bool OnlyActive { get; set; }

        ///<summary>
        ///A a value indicating whether to return only on fulfillment locations with inventory enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="A a value indicating whether to return only on fulfillment locations with inventory enabled")]
        public virtual bool OnlyInventoryEnabled { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/pickup", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested Fulfillment location not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetPickupFulfillmentLocationsByScopeRequest
        : GetFulfillmentLocationsByScopeRequestBase, IReturn<List<FulfillmentLocation>>, IGet
    {
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/shipping", "GET")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested Fulfillment location not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetShippingFulfillmentLocationsByScopeRequest
        : GetFulfillmentLocationsByScopeRequestBase, IReturn<List<FulfillmentLocation>>, IGet
    {
    }

    [DataContract]
    public partial class ProcessedCartRequestBase
        : ScopedRequest
    {
        ///<summary>
        ///The culture name in which language the data will be returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The name associated to the requested cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name associated to the requested cart", IsRequired=true)]
        public virtual string CartName { get; set; }

        ///<summary>
        ///The unique identifier of the Customer owning the cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Customer owning the cart", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The name of the workflow that should be executed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the workflow that should be executed.")]
        public virtual string WorkflowToExecute { get; set; }
    }

    [DataContract]
    public partial class ProcessedCartTypeRequestBase
        : ProcessedCartRequestBase
    {
        ///<summary>
        ///Gets or sets the expected cart type of the existing cart, if it does not match, an exception will be thrown. Set to null or to an empty string to bypass the validation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the expected cart type of the existing cart, if it does not match, an exception will be thrown. Set to null or to an empty string to bypass the validation.")]
        public virtual string CartType { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/reserveSlot/{FulfillmentLocationId}", "POST")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested Fulfillment location not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ReserveAvailabilitySlotRequest
        : ScopedRequest, IReturn<string>, IPost
    {
        ///<summary>
        ///the unique identifier of the Fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Fulfillment location.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].")]
        public virtual FulfillmentMethodType FulfillmentType { get; set; }

        ///<summary>
        ///the Date and Time of the desired slot. The calendar date on which the slot should be checked and the time at which the slot starts
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Date and Time of the desired slot. The calendar date on which the slot should be checked and the time at which the slot starts")]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///the Date and Time of the desired slot. The calendar date on which the slot should be checked and the time at which the slot ends
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Date and Time of the desired slot. The calendar date on which the slot should be checked and the time at which the slot ends")]
        public virtual DateTime EndDate { get; set; }

        ///<summary>
        ///the unique identifier of the Order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Order.")]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///the unique identifier of the Shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Shipment.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///a property bag for any additional properties.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a property bag for any additional properties.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/shipments/{ShipmentId}/{TimeSlotId}", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/{TimeSlotId}", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class ReserveTimeSlotRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPost
    {
        ///<summary>
        ///The unique identifier of the Shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Shipment.", IsRequired=true)]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The unique identifier of the fullfilment timeslot to reserve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the fullfilment timeslot to reserve.", IsRequired=true)]
        public virtual Guid TimeSlotId { get; set; }

        ///<summary>
        ///The date of the timeslot reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date of the timeslot reservation.", IsRequired=true)]
        public virtual DateTime ReservationDate { get; set; }

        ///<summary>
        ///The expiry time for the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expiry time for the reservation.", IsRequired=true)]
        public virtual TimeSpan ExpiryTime { get; set; }

        ///<summary>
        ///The expiry warning time for the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expiry warning time for the reservation.", IsRequired=true)]
        public virtual TimeSpan ExpiryWarningTime { get; set; }

        ///<summary>
        ///The comment for the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The comment for the reservation.")]
        public virtual string Comment { get; set; }

        ///<summary>
        ///The maximum number of renewals allowed for this reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of renewals allowed for this reservation.")]
        public virtual int? MaxNumberOfRenewals { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/reset", "PUT")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ResetFulfillmentLocationTimeSlotsRequest
        : FulfillmentLocationTimeSlotRequestBase, IReturn<List<TimeSlot>>, IPut
    {
        public ResetFulfillmentLocationTimeSlotsRequest()
        {
            TimeSlots = new List<TimeSlot>{};
        }

        ///<summary>
        ///the time slots to add
        ///</summary>
        [DataMember]
        [ApiMember(Description="the time slots to add")]
        public virtual List<TimeSlot> TimeSlots { get; set; }

        ///<summary>
        ///A value indicating whether the quota exceptions should be reset
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the quota exceptions should be reset")]
        public virtual bool ResetQuotaExceptions { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/inventory", "PUT")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested Fulfillment location not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class SetFulfillmentLocationInventoryManagementRequest
        : ScopedRequest, IReturn<SetFulfillmentLocationInventoryManagementResult>, IPut
    {
        ///<summary>
        ///the unique identifier of the Fulfillment location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the Fulfillment location.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///whether the inventory is enabled.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether the inventory is enabled.")]
        public virtual bool IsInventoryEnabled { get; set; }

        ///<summary>
        ///a value indicating whether the inventory availability to promise is enabled.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether the inventory availability to promise is enabled.")]
        public virtual bool IsAtpEnabled { get; set; }

        ///<summary>
        ///the unique identifier of the inventory location.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier of the inventory location.")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///the identifier of the inventory provider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the identifier of the inventory provider.")]
        public virtual string InventoryProviderId { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}", "PUT")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}", "PUT")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class UpdateCartRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPut
    {
        public UpdateCartRequest()
        {
            Coupons = new List<Coupon>{};
            Shipments = new List<Shipment>{};
            Payments = new List<Payment>{};
        }

        ///<summary>
        ///the cart source.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cart source.")]
        public virtual string Source { get; set; }

        ///<summary>
        ///the collection of coupon codes included in the order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of coupon codes included in the order.")]
        public virtual List<Coupon> Coupons { get; set; }

        ///<summary>
        ///the collection of shipments associated to this order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of shipments associated to this order.")]
        public virtual List<Shipment> Shipments { get; set; }

        ///<summary>
        ///the currency ISO code under which the items are sold 'Currency.IsoCode'.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the currency ISO code under which the items are sold 'Currency.IsoCode'.")]
        public virtual string BillingCurrency { get; set; }

        ///<summary>
        ///the status of the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the status of the cart.")]
        public virtual string Status { get; set; }

        ///<summary>
        ///the customer information.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the customer information.")]
        public virtual CustomerSummary Customer { get; set; }

        ///<summary>
        ///the order location information.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the order location information.")]
        public virtual OrderLocationSummary OrderLocation { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The collection of payments to use for this order.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of payments to use for this order.")]
        public virtual List<Payment> Payments { get; set; }

        ///<summary>
        ///Whether or not to execute the specified workflow before returning the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not to execute the specified workflow before returning the cart.")]
        public virtual bool? ExecuteWorkflow { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/customer", "PUT")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/customer", "PUT")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class UpdateCustomerSummaryRequest
        : ProcessedCartTypeRequestBase, IReturn<CustomerSummary>, IPut
    {
        ///<summary>
        ///The first name of the customer owning this cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The first name of the customer owning this cart.")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///The last name of the customer owning this cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="The last name of the customer owning this cart")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///The middle name of the customer owning this cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="The middle name of the customer owning this cart")]
        public virtual string MiddleName { get; set; }

        ///<summary>
        ///The email address of the customer owning this cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The email address of the customer owning this cart.")]
        public virtual string Email { get; set; }

        ///<summary>
        ///The phone number of the customer owning this cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The phone number of the customer owning this cart.")]
        public virtual string Phone { get; set; }

        ///<summary>
        ///The type of the customer owning this cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the customer owning this cart.")]
        public virtual CustomerType Type { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/quotaExceptions/{SlotId}/{QuotaExceptionId}", "PUT")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="Requested time slot not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateFulfillmentLocationTimeSlotQuotaExceptionRequest
        : ScopedRequest, IReturn<TimeSlotQuotaException>, IPut
    {
        ///<summary>
        ///The fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location identifier.", IsRequired=true)]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The unique identifier of the time slot.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the time slot.", IsRequired=true)]
        public virtual Guid SlotId { get; set; }

        ///<summary>
        ///The unique identifier of the quota exception.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the quota exception.", IsRequired=true)]
        public virtual Guid QuotaExceptionId { get; set; }

        ///<summary>
        ///The quota override
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quota override", IsRequired=true)]
        public virtual int Quota { get; set; }

        ///<summary>
        ///The name of the exception.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the exception.")]
        public virtual string Name { get; set; }
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/{FulfillmentMethodType}/slots/{SlotId}", "PUT")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateFulfillmentLocationTimeSlotRequest
        : AddOrUpdateFulfillmentLocationTimeSlotRequestBase, IReturn<TimeSlot>, IPut
    {
    }

    ///<summary>
    ///Fulfillment locations are entities which handles fulfillment for a shipment.
    ///</summary>
    [Route("/fulfillmentLocations/{ScopeId}/{FulfillmentLocationId}/reservations/{SlotReservationId}", "PUT")]
    [Api(Description="Fulfillment locations are entities which handles fulfillment for a shipment.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateFulfillmentLocationTimeSlotReservationRequest
        : UpdateFulfillmentLocationTimeSlotReservationRequestBase, IReturn<TimeSlotReservation>, IPut
    {
        ///<summary>
        ///Indicates whether pre-existing timeslots are included in the reservation calculation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether pre-existing timeslots are included in the reservation calculation.", IsRequired=true)]
        public virtual bool IncludePreExistingTimeSlotsForReservations { get; set; }
    }

    [DataContract]
    public partial class UpdateFulfillmentLocationTimeSlotReservationRequestBase
        : FulfillmentLocationTimeSlotReservationByIdForUpdateRequestBase
    {
        ///<summary>
        ///The reservation order id associated with the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation order id associated with the reservation.")]
        public virtual Guid? OrderId { get; set; }

        ///<summary>
        ///The reservation order number associated with the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation order number associated with the reservation.")]
        public virtual string OrderNumber { get; set; }

        ///<summary>
        ///The reservation shipment id associated with the reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation shipment id associated with the reservation.")]
        public virtual Guid? ShipmentId { get; set; }

        ///<summary>
        ///The reservation status. Options are Tentative, Confirmed, Expired and Void.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation status. Options are Tentative, Confirmed, Expired and Void.", IsRequired=true)]
        public virtual TimeslotReservationStatus ReservationStatus { get; set; }

        ///<summary>
        ///The expiry time for this reservation. Required only for Tentative status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expiry time for this reservation. Required only for Tentative status.")]
        public virtual TimeSpan? ExpiryTime { get; set; }

        ///<summary>
        ///The expiry time for this reservation. Required only for Tentative status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The expiry time for this reservation. Required only for Tentative status.")]
        public virtual TimeSpan? ExpiryWarningTime { get; set; }

        ///<summary>
        ///The comment of the time slot reservation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The comment of the time slot reservation.")]
        public virtual string Comment { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.Shopping.Coupons
{

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/coupons/{CouponCode}", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/coupons/{CouponCode}", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class AddCouponRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPost
    {
        ///<summary>
        ///the coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.", IsRequired=true)]
        public virtual string CouponCode { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/coupons/{CouponCode}", "DELETE")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/coupons/{CouponCode}", "DELETE")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class RemoveCouponRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IDelete
    {
        ///<summary>
        ///The unique identifier of the Coupon to be removed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Coupon to be removed.", IsRequired=true)]
        public virtual string CouponCode { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.Shopping.LineItems
{

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/shipments/{ShipmentId}/lineItems", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/lineItems", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class AddLineItemInShipmentRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPost
    {
        ///<summary>
        ///The unique identifier of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product.", IsRequired=true)]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The unique identifier of the product variant if it is one.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product variant if it is one.")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///if the product is to be wrapped as a gift, a message to be written on the wrapping.
        ///</summary>
        [DataMember]
        [ApiMember(Description="if the product is to be wrapped as a gift, a message to be written on the wrapping.")]
        public virtual string GiftMessage { get; set; }

        ///<summary>
        ///whether or not the item will be wrapped in a gift presentation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether or not the item will be wrapped in a gift presentation.")]
        public virtual bool GiftWrap { get; set; }

        ///<summary>
        ///The number of times this item is bought for this LineItem.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of times this item is bought for this LineItem.", IsRequired=true)]
        public virtual double Quantity { get; set; }

        ///<summary>
        ///The price of the line item, at the moment that the item is added to the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The price of the line item, at the moment that the item is added to the cart.")]
        public virtual decimal? PlacedPrice { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this command.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this command.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The unique identifier of the Shipment to consider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Shipment to consider.")]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The unique identifier of the LineItem to create.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the LineItem to create.")]
        public virtual Guid LineItemId { get; set; }

        ///<summary>
        ///the name of the recurring order program.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the recurring order program.")]
        public virtual string RecurringOrderProgramName { get; set; }

        ///<summary>
        ///the name of the recurring order program frequency.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the recurring order program frequency.")]
        public virtual string RecurringOrderFrequencyName { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/lineItems", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class AddLineItemRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPost
    {
        ///<summary>
        ///The unique identifier of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product.", IsRequired=true)]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The unique identifier of the product variant, if there is one.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the product variant, if there is one.")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///if the product is to be gift-wrapped, a message to be written on it.
        ///</summary>
        [DataMember]
        [ApiMember(Description="if the product is to be gift-wrapped, a message to be written on it.")]
        public virtual string GiftMessage { get; set; }

        ///<summary>
        ///whether or not the item will wrapped in a gift presentation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether or not the item will wrapped in a gift presentation.")]
        public virtual bool GiftWrap { get; set; }

        ///<summary>
        ///The number of items bought for this Product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of items bought for this Product.", IsRequired=true)]
        public virtual double Quantity { get; set; }

        ///<summary>
        ///The price of the LineItem, at the moment that the Product is added to the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The price of the LineItem, at the moment that the Product is added to the cart.")]
        public virtual decimal? PlacedPrice { get; set; }

        ///<summary>
        ///The property bag containing extended/custom properties for this request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended/custom properties for this request.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The unique identifier of the LineItem to create.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the LineItem to create.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the name of the recurring order program.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the recurring order program.")]
        public virtual string RecurringOrderProgramName { get; set; }

        ///<summary>
        ///the name of the recurring order program frequency.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the recurring order program frequency.")]
        public virtual string RecurringOrderFrequencyName { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/shipments/{ShipmentId}/lineItems/batch", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/lineItems/batch", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class AddOrUpdateLineItemsInShipmentRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPost
    {
        public AddOrUpdateLineItemsInShipmentRequest()
        {
            LineItems = new List<LineItemInfo>{};
        }

        ///<summary>
        ///The unique identifier of the shipment where to create line item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the shipment where to create line item.", IsRequired=true)]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The list of line items to add or update
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of line items to add or update", IsRequired=true)]
        public virtual List<LineItemInfo> LineItems { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this command.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this command.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/lineItems/batch", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/batch", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class AddOrUpdateLineItemsRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPost
    {
        public AddOrUpdateLineItemsRequest()
        {
            LineItems = new List<LineItemInfo>{};
        }

        ///<summary>
        ///The list of line items to add or update
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of line items to add or update", IsRequired=true)]
        public virtual List<LineItemInfo> LineItems { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this command.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this command.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/lineItems/{Id}", "GET")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/{Id}", "GET")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="Requested lineItem not found", StatusCode=404)]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class GetLineItemRequest
        : CartTypeRequestBase, IReturn<LineItem>, IGet
    {
        ///<summary>
        ///The unique identifier of the LineItem to retreive
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the LineItem to retreive", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/lineItems", "GET")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems", "GET")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="Requested lineItem not found", StatusCode=404)]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class GetLineItemsInCartRequest
        : CartTypeRequestBase, IReturn<List<LineItem>>, IGet
    {
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/shipments/{ShipmentId}/lineItems", "GET")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/lineItems", "GET")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="Requested lineItem not found", StatusCode=404)]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class GetLineItemsInShipmentRequest
        : CartTypeRequestBase, IReturn<List<LineItem>>, IGet
    {
        ///<summary>
        ///The unique identifier of the Shipment to consider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Shipment to consider.")]
        public virtual Guid ShipmentId { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/removeAllLineItems", "DELETE")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/removeAllLineItems", "DELETE")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class RemoveAllLineItemsRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IDelete
    {
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/lineItems/{Id}", "DELETE")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/{Id}", "DELETE")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class RemoveLineItemRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IDelete
    {
        ///<summary>
        ///The unique identifier of the LineItem to be removed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the LineItem to be removed.", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/shipments/{ShipmentId}/lineItems", "DELETE")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/lineItems", "DELETE")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class RemoveLineItemsInShipmentRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IDelete
    {
        ///<summary>
        ///The unique identifier of the Shipment to consider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Shipment to consider.")]
        public virtual Guid ShipmentId { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/lineItems/batch", "DELETE")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/batch", "DELETE")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class RemoveLineItemsRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IDelete
    {
        public RemoveLineItemsRequest()
        {
            LineItemIds = new Guid[]{};
        }

        ///<summary>
        ///The unique identifier of the LineItems to be removed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the LineItems to be removed.", IsRequired=true)]
        public virtual Guid[] LineItemIds { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/lineItems/{Id}", "PUT")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/lineItems/{Id}", "PUT")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class UpdateLineItemRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPut
    {
        ///<summary>
        ///The unique identifier of the LineItem to update.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the LineItem to update.", IsRequired=true)]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///if the product is to be wrapped as a gift, a message to be written on that.
        ///</summary>
        [DataMember]
        [ApiMember(Description="if the product is to be wrapped as a gift, a message to be written on that.")]
        public virtual string GiftMessage { get; set; }

        ///<summary>
        ///whether or not the item will wrapped in a gift presentation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether or not the item will wrapped in a gift presentation.")]
        public virtual bool GiftWrap { get; set; }

        ///<summary>
        ///The number of times this item is bought for this LineItem.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number of times this item is bought for this LineItem.")]
        public virtual double Quantity { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this command.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this command.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///the name of the recurring order program.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the recurring order program.")]
        public virtual string RecurringOrderProgramName { get; set; }

        ///<summary>
        ///the name of the recurring order program frequency.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the recurring order program frequency.")]
        public virtual string RecurringOrderFrequencyName { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.Shopping.Payments
{

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class AddPaymentRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPost
    {
        ///<summary>
        ///The amount of the Payment to create.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount of the Payment to create.")]
        public virtual decimal? Amount { get; set; }

        ///<summary>
        ///The Payment.BillingAddress to create.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Payment.BillingAddress to create.")]
        public virtual Address BillingAddress { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this command.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this command.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The unique identifier of the Payment to create.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Payment to create.")]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments/{PaymentId}/authorize", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/authorize", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class AuthorizePaymentRequest
        : CartTypeRequestBase, IReturn<Cart>, IPost
    {
        ///<summary>
        ///The unique identifier of the payment to authorize.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the payment to authorize.", IsRequired=true)]
        public virtual Guid PaymentId { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/completeCheckout", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/completeCheckout", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CompleteCheckoutRequest
        : ProcessedCartRequestBase, IReturn<Order>, IPost
    {
        ///<summary>
        ///The property bag containing extended properties for this request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this request.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments/{PaymentId}/createCartPaymentVaultProfile", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/createCartPaymentVaultProfile", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class CreateCartPaymentVaultProfileRequest
        : CartTypeRequestBase, IReturn<Cart>, IPost
    {
        ///<summary>
        ///The unique identifier of the payment to initialize.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the payment to initialize.", IsRequired=true)]
        public virtual Guid PaymentId { get; set; }

        ///<summary>
        ///The data to set when creating the vault profile the payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The data to set when creating the vault profile the payment.")]
        public virtual PropertyBag Data { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments/{Id}", "GET")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{Id}", "GET")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="Requested payment not found", StatusCode=404)]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class GetPaymentRequest
        : CartTypeRequestBase, IReturn<Payment>, IGet
    {
        ///<summary>
        ///The unique identifier of the Payment to retreive
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Payment to retreive", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments", "GET")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments", "GET")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="Requested payment not found", StatusCode=404)]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class GetPaymentsInCartRequest
        : CartTypeRequestBase, IReturn<List<Payment>>, IGet
    {
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments/{PaymentId}/initialize", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/initialize", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class InitializePaymentRequest
        : CartTypeRequestBase, IReturn<Cart>, IPost
    {
        ///<summary>
        ///The unique identifier of the payment to initialize.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the payment to initialize.", IsRequired=true)]
        public virtual Guid PaymentId { get; set; }

        ///<summary>
        ///The additonnal data to set when initializing the payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The additonnal data to set when initializing the payment.")]
        public virtual PropertyBag AdditionalData { get; set; }

        ///<summary>
        ///The payment provider options to override when initializing the payment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider options to override when initializing the payment.")]
        public virtual PropertyBag Options { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/payments/{PaymentId}/refresh", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class RefreshPaymentOrderRequest
        : ScopedRequest, IReturn<Order>, IPost
    {
        ///<summary>
        ///The unique identifier of the payment to settle.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the payment to settle.", IsRequired=true)]
        public virtual Guid PaymentId { get; set; }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order identifier.")]
        public virtual Guid OrderId { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments/{PaymentId}/refresh", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/refresh", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class RefreshPaymentRequest
        : CartTypeRequestBase, IReturn<Cart>, IPost
    {
        ///<summary>
        ///The unique identifier of the payment to refresh.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the payment to refresh.", IsRequired=true)]
        public virtual Guid PaymentId { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/payments/{PaymentId}/refund", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class RefundPaymentRequest
        : ScopedRequest, IReturn<Order>, IPost
    {
        ///<summary>
        ///The unique identifier of the payment to refund.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the payment to refund.", IsRequired=true)]
        public virtual Guid PaymentId { get; set; }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order identifier.", IsRequired=true)]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The payment amount.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment amount.")]
        public virtual decimal? Amount { get; set; }

        ///<summary>
        ///The payment comment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment comment.")]
        public virtual string Comment { get; set; }

        ///<summary>
        ///The payment return Id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment return Id.")]
        public virtual Guid? ReturnId { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments/{Id}", "DELETE")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{Id}", "DELETE")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class RemovePaymentRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IDelete
    {
        ///<summary>
        ///The unique identifier of the Payment to be removed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Payment to be removed.", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/payments/{PaymentId}/settle", "POST")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class SettlePaymentOrderRequest
        : ScopedRequest, IReturn<Order>, IPost
    {
        ///<summary>
        ///The unique identifier of the payment to settle.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the payment to settle.", IsRequired=true)]
        public virtual Guid PaymentId { get; set; }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order identifier.")]
        public virtual Guid OrderId { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments/{PaymentId}/settle", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/settle", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class SettlePaymentRequest
        : CartTypeRequestBase, IReturn<Cart>, IPost
    {
        ///<summary>
        ///The unique identifier of the payment to settle.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the payment to settle.", IsRequired=true)]
        public virtual Guid PaymentId { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments/{PaymentId}/billingAddress", "PUT")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/billingAddress", "PUT")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class UpdateBillingAddressRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPut
    {
        ///<summary>
        ///The Id of the payment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Id of the payment")]
        public virtual Guid PaymentId { get; set; }

        ///<summary>
        ///The Payment.BillingAddress to update.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Payment.BillingAddress to update.")]
        public virtual Address BillingAddress { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments/{PaymentId}/amount", "PUT")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/amount", "PUT")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class UpdatePaymentAmountRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPut
    {
        ///<summary>
        ///The Id of the payment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Id of the payment")]
        public virtual Guid PaymentId { get; set; }

        ///<summary>
        ///The amount of the Payment to update.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount of the Payment to update.")]
        public virtual decimal? Amount { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments/{PaymentId}/method", "PUT")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/method", "PUT")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class UpdatePaymentMethodRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPut
    {
        ///<summary>
        ///The Id of the payment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Id of the payment")]
        public virtual Guid PaymentId { get; set; }

        ///<summary>
        ///The payment method identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment method identifier")]
        public virtual Guid PaymentMethodId { get; set; }

        ///<summary>
        ///The name of the payment provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the payment provider")]
        public virtual string PaymentProviderName { get; set; }

        ///<summary>
        ///Whether or not to execute the specified workflow before returning the cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not to execute the specified workflow before returning the cart.")]
        public virtual bool? ExecuteWorkflow { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments/{Id}", "PUT")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{Id}", "PUT")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdatePaymentRequest
        : ProcessedCartRequestBase, IReturn<ProcessedCart>, IPut
    {
        ///<summary>
        ///The unique identifier of the Payment to update.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Payment to update.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The amount of the Payment to update.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount of the Payment to update.")]
        public virtual decimal? Amount { get; set; }

        ///<summary>
        ///The Payment.BillingAddress to update.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Payment.BillingAddress to update.")]
        public virtual Address BillingAddress { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this command.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this command.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/payments/{PaymentId}/void", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/payments/{PaymentId}/void", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class VoidPaymentRequest
        : CartTypeRequestBase, IReturn<Cart>, IPost
    {
        ///<summary>
        ///The unique identifier of the payment to void.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the payment to void.", IsRequired=true)]
        public virtual Guid PaymentId { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Orders.Shopping.Shipments
{

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/shipments", "POST")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments", "POST")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class AddShipmentRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPost
    {
        ///<summary>
        ///The unique identifier of the Shipment to create.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Shipment to create.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The Shipment.ShippingAddress to create.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Shipment.ShippingAddress to create.")]
        public virtual Address ShippingAddress { get; set; }

        ///<summary>
        ///The unique identifier of the shipping provider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the shipping provider.")]
        public virtual Guid ShippingProviderId { get; set; }

        ///<summary>
        ///The unique identifier of the Shipment.FulfillmentMethod.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Shipment.FulfillmentMethod.")]
        public virtual string FulfillmentMethodName { get; set; }

        ///<summary>
        ///The UI-friendly name for this fulfillment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UI-friendly name for this fulfillment method.")]
        public virtual LocalizedString FulfillmentMethodDisplayName { get; set; }

        ///<summary>
        ///The UI-friendly carrier option display name for the fulfillment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UI-friendly carrier option display name for the fulfillment method.")]
        public virtual LocalizedString FulfillmentMethodCarrierOptionDisplayName { get; set; }

        ///<summary>
        ///The carrier name  for the fulfillment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier name  for the fulfillment method.")]
        public virtual string FulfillmentMethodCarrierName { get; set; }

        ///<summary>
        ///The carrier service level for this fulfillment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier service level for this fulfillment method.")]
        public virtual string FulfillmentMethodCarrierServiceLevel { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this command.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this command.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///the requested schedule begin date and time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the requested schedule begin date and time.")]
        public virtual DateTime? FulfillmentScheduledTimeBeginDate { get; set; }

        ///<summary>
        ///the requested schedule end date and time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the requested schedule end date and time.")]
        public virtual DateTime? FulfillmentScheduledTimeEndDate { get; set; }

        ///<summary>
        ///The fulfillment schedule mode.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment schedule mode.")]
        public virtual FulfillmentScheduleMode FulfillmentScheduleMode { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/shipments/{Id}", "GET")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{Id}", "GET")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="Requested shipment not found", StatusCode=404)]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class GetShipmentRequest
        : CartTypeRequestBase, IReturn<Shipment>, IGet
    {
        ///<summary>
        ///The unique identifier of the Shipment to retreive
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Shipment to retreive", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/shipments/{Id}", "DELETE")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{Id}", "DELETE")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class RemoveShipmentRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IDelete
    {
        ///<summary>
        ///The unique identifier of the Shipment to be removed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Shipment to be removed.", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Orders are entities which represent an order of a customer.
    ///</summary>
    [Route("/orders/{ScopeId}/{OrderId}/shipments/{ShipmentId}/adjustment", "PUT")]
    [Api(Description="Orders are entities which represent an order of a customer.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class SetAdjustmentOrderRequest
        : ScopedRequest, IReturn<Order>, IPut
    {
        ///<summary>
        ///The unique identifier of the shipment to adjust
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the shipment to adjust", IsRequired=true)]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The order identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The order identifier.", IsRequired=true)]
        public virtual Guid OrderId { get; set; }

        ///<summary>
        ///The amount of the adjustment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount of the adjustment")]
        public virtual decimal? Amount { get; set; }

        ///<summary>
        ///Note for adjustment
        ///</summary>
        [DataMember]
        [ApiMember(Description="Note for adjustment")]
        public virtual string Note { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/shipments/{ShipmentId}/adjustment", "PUT")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{ShipmentId}/adjustment", "PUT")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class SetAdjustmentRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPut
    {
        ///<summary>
        ///The unique identifier of the shipment to adjust
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the shipment to adjust", IsRequired=true)]
        public virtual Guid ShipmentId { get; set; }

        ///<summary>
        ///The amount of the adjustment
        ///</summary>
        [DataMember]
        [ApiMember(Description="The amount of the adjustment")]
        public virtual decimal? Amount { get; set; }

        ///<summary>
        ///Note for adjustment
        ///</summary>
        [DataMember]
        [ApiMember(Description="Note for adjustment")]
        public virtual string Note { get; set; }
    }

    ///<summary>
    ///Carts are entities used for assembling an order before submitting.
    ///</summary>
    [Route("/carts/{ScopeId}/{CartName}/shipments/{Id}", "PUT")]
    [Route("/carts/{ScopeId}/{CustomerId}/{CartName}/shipments/{Id}", "PUT")]
    [Api(Description="Carts are entities used for assembling an order before submitting.")]
    [ApiResponse(Description="The request cannot be performed as the order draft does not exist.", StatusCode=410)]
    [ApiResponse(Description="The request cannot be performed as there is a conflict on the order editing operation.", StatusCode=409)]
    [ApiResponse(Description="You must be authenticated to use this request.", StatusCode=401)]
    [DataContract]
    public partial class UpdateShipmentRequest
        : ProcessedCartTypeRequestBase, IReturn<ProcessedCart>, IPut
    {
        ///<summary>
        ///The unique identifier of the Shipment to update.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Shipment to update.", IsRequired=true)]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The Shipment.ShippingAddress to update.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Shipment.ShippingAddress to update.")]
        public virtual Address ShippingAddress { get; set; }

        ///<summary>
        ///The unique identifier of the shipping provider.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the shipping provider.")]
        public virtual Guid ShippingProviderId { get; set; }

        ///<summary>
        ///Gets or sets the pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.")]
        public virtual Guid? PickUpLocationId { get; set; }

        ///<summary>
        ///The fulfillment location id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment location id.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///The unique identifier of the Shipment.FulfillmentMethod.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the Shipment.FulfillmentMethod.")]
        public virtual string FulfillmentMethodName { get; set; }

        ///<summary>
        ///The UI-friendly name for this fulfillment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UI-friendly name for this fulfillment method.")]
        public virtual LocalizedString FulfillmentMethodDisplayName { get; set; }

        ///<summary>
        ///The UI-friendly carrier option display name for the fulfillment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UI-friendly carrier option display name for the fulfillment method.")]
        public virtual LocalizedString FulfillmentMethodCarrierOptionDisplayName { get; set; }

        ///<summary>
        ///The fulfillment method carrier name  for the fulfillment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment method carrier name  for the fulfillment method.")]
        public virtual string FulfillmentMethodCarrierName { get; set; }

        ///<summary>
        ///The fulfillment method carrier service level for this fulfillment method.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment method carrier service level for this fulfillment method.")]
        public virtual string FulfillmentMethodCarrierServiceLevel { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this shipment.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this shipment.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///the requested schedule begin date and time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the requested schedule begin date and time.")]
        public virtual DateTime? FulfillmentScheduledTimeBeginDate { get; set; }

        ///<summary>
        ///the requested schedule end date and time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the requested schedule end date and time.")]
        public virtual DateTime? FulfillmentScheduledTimeEndDate { get; set; }

        ///<summary>
        ///The fulfillment schedule mode.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment schedule mode.")]
        public virtual FulfillmentScheduleMode FulfillmentScheduleMode { get; set; }

        ///<summary>
        ///The reservation number for the scheduled fulfillment date and time.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The reservation number for the scheduled fulfillment date and time.")]
        public virtual string FulfillmentScheduleReservationNumber { get; set; }

        ///<summary>
        ///The date the fulfillment reservation was done.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date the fulfillment reservation was done.")]
        public virtual DateTime? FulfillmentScheduleReservationDate { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Products
{

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/fromGlobal", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AddFromGlobalRequest
        : ScopedRequest, IReturn<TaskInfo>, IPost
    {
        public AddFromGlobalRequest()
        {
            ParentCategoryIds = new List<string>{};
            ProductIds = new List<string>{};
            CultureNames = new List<string>{};
        }

        ///<summary>
        ///The categories id values of the categories for which to take the products from.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The categories id values of the categories for which to take the products from.")]
        public virtual List<string> ParentCategoryIds { get; set; }

        ///<summary>
        ///The id values of the products to be pushed to a sales scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id values of the products to be pushed to a sales scope.")]
        public virtual List<string> ProductIds { get; set; }

        ///<summary>
        ///The names of the cultures for which localized data should be preserved.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The names of the cultures for which localized data should be preserved.")]
        public virtual List<string> CultureNames { get; set; }

        ///<summary>
        ///Indicates whether to set IsActive property of the pushed products to 'true'.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether to set IsActive property of the pushed products to 'true'.")]
        public virtual bool? OverwriteIsActiveWith { get; set; }

        ///<summary>
        ///the task id. Use this to query the system for the state of the task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the task id. Use this to query the system for the state of the task.")]
        public virtual Guid TaskId { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/priceLists", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class AddOrUpdatePriceListRequest
        : ScopedRequest, IReturnVoid, IPost
    {
        public AddOrUpdatePriceListRequest()
        {
            PriceLists = new List<PriceList>{};
        }

        ///<summary>
        ///List of PriceList to import in a specific scope.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="List of PriceList to import in a specific scope.")]
        public virtual List<PriceList> PriceLists { get; set; }

        ///<summary>
        ///Whether or not the product prices search index will be built following the import. The default value is False.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the product prices search index will be built following the import. The default value is False.")]
        public virtual bool? RebuildSearchIndex { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/priceListEntries", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class AddPriceListEntryRequest
        : ScopedRequest, IReturn<PriceListEntry>, IPost
    {
        ///<summary>
        ///The id of the price list for which we want to add a price list entry
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The id of the price list for which we want to add a price list entry")]
        public virtual string PriceListId { get; set; }

        ///<summary>
        ///The id of the product for which we want to add a price list entry
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The id of the product for which we want to add a price list entry")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The id of the variant for which we want to add a price list entry
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the variant for which we want to add a price list entry")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///The price of this new price list entry
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The price of this new price list entry")]
        public virtual decimal Price { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether the price should be ignored, default is false. If set to true, the price entry will override the parent but will be ignored at the scope level, thus fallbacking to the next available price entry in the current scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether the price should be ignored, default is false. If set to true, the price entry will override the parent but will be ignored at the scope level, thus fallbacking to the next available price entry in the current scope")]
        public virtual bool IsIgnored { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/bulkAssignCategories", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class BulkAssignProductCategoriesRequest
        : ScopedRequest, IReturn<TaskInfo>, IPost
    {
        public BulkAssignProductCategoriesRequest()
        {
            ProductIds = new string[]{};
            ParentCategoryIds = new string[]{};
            CategoryIdsToAssign = new string[]{};
        }

        ///<summary>
        ///The id values of the products to be updated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id values of the products to be updated.")]
        public virtual string[] ProductIds { get; set; }

        ///<summary>
        ///The id-s of the categories, products of which should be updated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id-s of the categories, products of which should be updated.")]
        public virtual string[] ParentCategoryIds { get; set; }

        ///<summary>
        ///The publication status to filter the products by. The filtering isn't applied for explicitly explicitly passed Product Ids.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The publication status to filter the products by. The filtering isn't applied for explicitly explicitly passed Product Ids.")]
        public virtual string FilterByPublicationStatus { get; set; }

        ///<summary>
        ///When set to true, will indicate that all of the uncategorized products should be updated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="When set to true, will indicate that all of the uncategorized products should be updated.")]
        public virtual bool IncludeUncategorized { get; set; }

        ///<summary>
        ///When specified, the products will have those categories assigned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="When specified, the products will have those categories assigned.")]
        public virtual string[] CategoryIdsToAssign { get; set; }

        ///<summary>
        ///When set to true, the products will be disassociated form the previously assigned categories.
        ///</summary>
        [DataMember]
        [ApiMember(Description="When set to true, the products will be disassociated form the previously assigned categories.")]
        public virtual bool MoveProducts { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/bulkRevert", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class BulkRevertProductChangesRequest
        : ScopedRequest, IReturn<TaskInfo>, IPost
    {
        public BulkRevertProductChangesRequest()
        {
            ProductIds = new List<string>{};
            ParentCategoryIds = new List<string>{};
        }

        ///<summary>
        ///The id values of the products to be updated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id values of the products to be updated.")]
        public virtual List<string> ProductIds { get; set; }

        ///<summary>
        ///The id-s of the categories, products of which should be updated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id-s of the categories, products of which should be updated.")]
        public virtual List<string> ParentCategoryIds { get; set; }

        ///<summary>
        ///The publication status to filter the products by. The filtering isn't applied for explicitly explicitly passed Product Ids.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The publication status to filter the products by. The filtering isn't applied for explicitly explicitly passed Product Ids.")]
        public virtual string FilterByPublicationStatus { get; set; }

        ///<summary>
        ///When set to true, will indicate that all of the uncategorized products should be updated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="When set to true, will indicate that all of the uncategorized products should be updated.")]
        public virtual bool IncludeUncategorized { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/bulkUpdatePublicationStatus", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class BulkUpdatePublicationStatusRequest
        : ScopedRequest, IReturn<TaskInfo>, IPost
    {
        public BulkUpdatePublicationStatusRequest()
        {
            ProductIds = new List<string>{};
            ParentCategoryIds = new List<string>{};
        }

        ///<summary>
        ///The id values of the products to be updated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id values of the products to be updated.")]
        public virtual List<string> ProductIds { get; set; }

        ///<summary>
        ///The id-s of the categories, products of which should be updated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id-s of the categories, products of which should be updated.")]
        public virtual List<string> ParentCategoryIds { get; set; }

        ///<summary>
        ///The publication status to filter the products by. The filtering isn't applied for explicitly explicitly passed Product Ids.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The publication status to filter the products by. The filtering isn't applied for explicitly explicitly passed Product Ids.")]
        public virtual string FilterByPublicationStatus { get; set; }

        ///<summary>
        ///When set to true, will indicate that all of the uncategorized products should be updated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="When set to true, will indicate that all of the uncategorized products should be updated.")]
        public virtual bool IncludeUncategorized { get; set; }

        ///<summary>
        ///The publication status that should be set for the products. Supported values are: 'InProgress', 'PendingApproval', 'ReadyToCompose', 'Rejected' and 'Published'.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The publication status that should be set for the products. Supported values are: 'InProgress', 'PendingApproval', 'ReadyToCompose', 'Rejected' and 'Published'.", IsRequired=true)]
        public virtual string PublicationStatus { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/prices", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="When no price was found for the product or the product doesn't exist.", StatusCode=404)]
    [DataContract]
    public partial class CalculatePricesofProductsRequest
        : ScopedRequest, IReturn<List<ProductPrice>>, IPost
    {
        public CalculatePricesofProductsRequest()
        {
            ProductIds = new List<string>{};
        }

        ///<summary>
        ///the business id for the product to retrieve
        ///</summary>
        [DataMember]
        [ApiMember(Description="the business id for the product to retrieve")]
        public virtual List<string> ProductIds { get; set; }

        ///<summary>
        ///whether or not to include the variants (if they exist) of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether or not to include the variants (if they exist) of the product.")]
        public virtual bool IncludeVariants { get; set; }

        ///<summary>
        ///the price when the date must be computed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the price when the date must be computed.")]
        public virtual DateTime Time { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/price", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="When no price was found for the product or the product doesn't exist.", StatusCode=404)]
    [DataContract]
    public partial class CalculateProductPriceRequest
        : ScopedRequest, IReturn<ProductPrice>, IPost
    {
        ///<summary>
        ///the business id for the product to retrieve
        ///</summary>
        [DataMember]
        [ApiMember(Description="the business id for the product to retrieve")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///whether or not to include the variants (if they exist) of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether or not to include the variants (if they exist) of the product.")]
        public virtual bool IncludeVariants { get; set; }

        ///<summary>
        ///the price when the date must be computed..
        ///</summary>
        [DataMember]
        [ApiMember(Description="the price when the date must be computed..")]
        public virtual DateTime Time { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/copy/{NewProductId}", "PUT")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class CopyProductRequest
        : ScopedRequest, IReturn<Product>, IPut
    {
        ///<summary>
        ///The id of the product to be copied
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The id of the product to be copied")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The id of the product to be created
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The id of the product to be created")]
        public virtual string NewProductId { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}", "POST")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class CreateCategoryRequest
        : ScopedRequest, IReturn<Category>, IPost
    {
        ///<summary>
        ///The category's id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category's id.")]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///The primary parent category id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The primary parent category id")]
        public virtual string ParentCategoryId { get; set; }

        ///<summary>
        ///A friendly, UI compatible name for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the name
        ///</summary>
        [DataMember]
        [ApiMember(Description="A friendly, UI compatible name for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the name")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///A friendly, UI compatible description for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the description
        ///</summary>
        [DataMember]
        [ApiMember(Description="A friendly, UI compatible description for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the description")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///The name of the definition of the Category
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the definition of the Category")]
        public virtual string DefinitionName { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/media/{ScopeId}/{ProductId}", "PUT")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class CreateMediaRequest
        : ScopedRequest, IReturn<CreateMediaResult>, IPut
    {
        ///<summary>
        /// the id of the product for which we want to upload media.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description=" the id of the product for which we want to upload media.")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///the id of the variant for which we want to upload media
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the variant for which we want to upload media")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///the attribute values for which we want to upload media
        ///</summary>
        [DataMember]
        [ApiMember(Description="the attribute values for which we want to upload media")]
        public virtual PropertyBag AttributesToMatch { get; set; }

        ///<summary>
        ///the Url instead upload image
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Url instead upload image")]
        public virtual string Url { get; set; }

        ///<summary>
        ///the MediaType of the media
        ///</summary>
        [DataMember]
        [ApiMember(Description="the MediaType of the media")]
        public virtual string MediaType { get; set; }

        ///<summary>
        ///the title of the Media
        ///</summary>
        [DataMember]
        [ApiMember(Description="the title of the Media")]
        public virtual LocalizedString Title { get; set; }

        ///<summary>
        ///a general description of the Media
        ///</summary>
        [DataMember]
        [ApiMember(Description="a general description of the Media")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///a tag of the Media
        ///</summary>
        [DataMember]
        [ApiMember(Description="a tag of the Media")]
        public virtual string Tag { get; set; }

        ///<summary>
        ///a value indicating whether the current media file is the cover media (shown first on the product page
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether the current media file is the cover media (shown first on the product page")]
        public virtual bool? IsCover { get; set; }

        ///<summary>
        ///indicating whether the media file should be deleted form the blob storage
        ///</summary>
        [DataMember]
        [ApiMember(Description="indicating whether the media file should be deleted form the blob storage")]
        public virtual bool? CleanUpOnDelete { get; set; }

        ///<summary>
        ///a position of the Media
        ///</summary>
        [DataMember]
        [ApiMember(Description="a position of the Media")]
        public virtual int? Position { get; set; }
    }

    [DataContract]
    public partial class CreateMediaResult
    {
        ///<summary>
        ///The type of the PriceList.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the PriceList.")]
        public virtual int MediaId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/priceLists/{PriceListId}", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class CreatePriceListRequest
        : ScopedRequest, IReturn<PriceList>, IPost
    {
        ///<summary>
        ///The identifier of the PriceList.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the PriceList.")]
        public virtual string PriceListId { get; set; }

        ///<summary>
        ///The identifier of the price list with the next higher priority. If null, the price list will have the highest priority.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the price list with the next higher priority. If null, the price list will have the highest priority.")]
        public virtual string NextHigherPriorityPriceListId { get; set; }

        ///<summary>
        ///The type of the PriceList.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the PriceList.")]
        public virtual string Type { get; set; }

        ///<summary>
        ///The category of the PriceList.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The category of the PriceList.")]
        public virtual string Category { get; set; }

        ///<summary>
        ///A friendly, UI compatible name for the PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="A friendly, UI compatible name for the PriceList")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The start date of the PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start date of the PriceList")]
        public virtual DateTime? StartDate { get; set; }

        ///<summary>
        ///The end date of the PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date of the PriceList")]
        public virtual DateTime? EndDate { get; set; }

        ///<summary>
        ///Whether or not the product prices search index will be built rollowing the import. The default value is False.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the product prices search index will be built rollowing the import. The default value is False.")]
        public virtual bool? RebuildSearchIndex { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class CreateProductRequest
        : ScopedRequest, IReturn<Product>, IPost
    {
        ///<summary>
        ///The ID (business key) to use for the product to create.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ID (business key) to use for the product to create.")]
        [Required]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The stock keeping unit code (SKU) of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The stock keeping unit code (SKU) of the product.")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///A value indicating whether the Product is active or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the Product is active or not.")]
        public virtual bool Active { get; set; }

        ///<summary>
        ///The name (business key) of the definition to use for the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name (business key) of the definition to use for the product.")]
        [Required]
        public virtual string DefinitionName { get; set; }

        ///<summary>
        /// A UI friendly name for the product. Can be multilingual.
        ///</summary>
        [DataMember]
        [ApiMember(Description=" A UI friendly name for the product. Can be multilingual.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The general description of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The general description of the product.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///The default price for the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default price for the product.")]
        public virtual decimal? ListPrice { get; set; }

        ///<summary>
        ///The category to use as parent for the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category to use as parent for the product.")]
        public virtual string ParentCategory { get; set; }

        ///<summary>
        ///the product information that will be saved.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the product information that will be saved.")]
        public virtual PropertyBag PropertyBag { get; set; }

        ///<summary>
        ///The publication status of the added product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The publication status of the added product.")]
        [Required]
        public virtual string PublicationStatus { get; set; }

        ///<summary>
        ///Indicates whether or not the product should be included in the front-end search result.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not the product should be included in the front-end search result.")]
        public virtual bool? IncludeInSearch { get; set; }

        ///<summary>
        ///The date until which the product is flagged as a new product introduction.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date until which the product is flagged as a new product introduction.")]
        public virtual DateTime? NewProductDate { get; set; }

        ///<summary>
        ///The tax category of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax category of the product.")]
        public virtual string TaxCategory { get; set; }

        ///<summary>
        ///The unit of measure of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unit of measure of the product.")]
        public virtual string UnitOfMeasure { get; set; }

        ///<summary>
        ///The item format of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The item format of the product.")]
        public virtual decimal? ItemFormat { get; set; }

        ///<summary>
        ///The selling method of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The selling method of the product.")]
        public virtual string SellingMethod { get; set; }

        ///<summary>
        ///The brand of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The brand of the product.")]
        public virtual string Brand { get; set; }

        ///<summary>
        ///The unit of measure of the weight of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unit of measure of the weight of the product.")]
        public virtual string WeightUOM { get; set; }

        ///<summary>
        ///The weight of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The weight of the product.")]
        public virtual decimal? Weight { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}/{CategoryId}", "DELETE")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class DeleteCategoryRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The category's id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category's id.")]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///Determines whether the products should be deleted or have the category association removed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determines whether the products should be deleted or have the category association removed.")]
        public virtual bool DeleteProducts { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/v2/{ScopeId}/{CategoryId}", "DELETE")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class DeleteCategoryV2Request
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The category's id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category's id.")]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///Determines whether the products should be deleted or have the category association removed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determines whether the products should be deleted or have the category association removed.")]
        public virtual bool DeleteProducts { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/priceListEntries/{PriceListId}", "DELETE")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class DeletePriceListEntryRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The id of the product for which we want to delete a price list entry
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the product for which we want to delete a price list entry")]
        [Required]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The id of the variant for which we want to delete a price list entry
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the variant for which we want to delete a price list entry")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///The id of the price list for which we want to delete a price list entry
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the price list for which we want to delete a price list entry")]
        [Required]
        public virtual string PriceListId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/priceLists/{PriceListId}", "DELETE")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class DeletePriceListRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The identifier of the price list.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the price list.")]
        public virtual string PriceListId { get; set; }

        ///<summary>
        ///The value indicating whether the related price list entries should be deleted as well.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The value indicating whether the related price list entries should be deleted as well.")]
        public virtual bool DeletePriceListEntries { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/product/{ProductId}", "DELETE")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class DeleteProductByIdRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The product's id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The product's id.")]
        public virtual string ProductId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/v2/{ScopeId}/{ProductId}", "DELETE")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class DeleteProductByIdV2Request
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The product's id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The product's id.")]
        public virtual string ProductId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/settings/{Entry}", "DELETE")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteProductSettingsEntryRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///the product settings entry to delete
        ///</summary>
        [DataMember]
        [ApiMember(Description="the product settings entry to delete")]
        public virtual string Entry { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/bulkDelete", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteProductsRequest
        : ScopedRequest, IReturn<TaskInfo>, IPost
    {
        public DeleteProductsRequest()
        {
            ParentCategoryIds = new List<string>{};
            ProductIds = new List<string>{};
        }

        ///<summary>
        ///The categories id values of the categories from which products will be deleted.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The categories id values of the categories from which products will be deleted.")]
        public virtual List<string> ParentCategoryIds { get; set; }

        ///<summary>
        ///When set to true, will indicate that all of the uncategorized products should be deleted.
        ///</summary>
        [DataMember]
        [ApiMember(Description="When set to true, will indicate that all of the uncategorized products should be deleted.")]
        public virtual bool IncludeUncategorized { get; set; }

        ///<summary>
        ///The publication status to filter the products by. The filtering isn't applied for explicitly passed Product Ids.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The publication status to filter the products by. The filtering isn't applied for explicitly passed Product Ids.")]
        public virtual string FilterByPublicationStatus { get; set; }

        ///<summary>
        ///The id values of the products to be deleted.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id values of the products to be deleted.")]
        public virtual List<string> ProductIds { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    [DataContract]
    public partial class DependentScopeInformation
    {
        ///<summary>
        ///The ID of the dependent scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ID of the dependent scope.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///Indicates whether the product or variant is active in the dependent scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the product or variant is active in the dependent scope.")]
        public virtual bool? IsActive { get; set; }

        ///<summary>
        ///Overridden value for the start date for the scheduled activation of a product/variant for the dependent scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Overridden value for the start date for the scheduled activation of a product/variant for the dependent scope.")]
        public virtual DateTime? ScheduledActivation { get; set; }

        ///<summary>
        ///Overridden value for the end date for the scheduled activation of a product/variant for the dependent scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Overridden value for the end date for the scheduled activation of a product/variant for the dependent scope.")]
        public virtual DateTime? ScheduledDeactivation { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/integration/products/{ScopeId}/prices/export", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [DataContract]
    public partial class ExportProductPricesRequest
        : ScopedRequest, IReturn<List<ProductPriceExportInfo>>, IPost
    {
        public ExportProductPricesRequest()
        {
            PriceLists = new List<string>{};
        }

        ///<summary>
        ///The names of the price lists to include in the request. (Default price list is always exported)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The names of the price lists to include in the request. (Default price list is always exported)")]
        public virtual List<string> PriceLists { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/integration/products/{ScopeId}/export", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ExportProductsRequest
        : IReturn<TaskInfo>, IPost
    {
        public ExportProductsRequest()
        {
            Cultures = new string[]{};
        }

        ///<summary>
        ///The scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The task id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The task id.")]
        public virtual string TaskId { get; set; }

        ///<summary>
        ///The file format of the export, JSON or XML.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The file format of the export, JSON or XML.")]
        public virtual string FileFormat { get; set; }

        ///<summary>
        ///The languages to include in the export.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The languages to include in the export.")]
        public virtual string[] Cultures { get; set; }

        ///<summary>
        ///The File path in the blob storage.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The File path in the blob storage.")]
        public virtual string FilePath { get; set; }

        ///<summary>
        ///Indicates to include or not the schema.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates to include or not the schema.")]
        public virtual bool IncludeSchema { get; set; }

        ///<summary>
        ///Indicates to include or not the products.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates to include or not the products.")]
        public virtual bool IncludeProducts { get; set; }

        ///<summary>
        ///Indicates to include or not the categories.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates to include or not the categories.")]
        public virtual bool IncludeCategories { get; set; }

        ///<summary>
        ///Indicates to include or not the prices.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates to include or not the prices.")]
        public virtual bool IncludePrices { get; set; }

        ///<summary>
        ///Indicates to include or not the media.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates to include or not the media.")]
        public virtual bool IncludeMedia { get; set; }

        ///<summary>
        ///Indicates to break or not inheritance for Products.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates to break or not inheritance for Products.")]
        public virtual bool BreakInheritance { get; set; }

        ///<summary>
        ///The category of products to be exported.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category of products to be exported.")]
        public virtual string Category { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/extractForIndexing", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class ExtractProductInformationForIndexingRequest
        : ScopedRequest, IReturn<ExtractProductInformationForIndexingResponse>, IPost
    {
        public ExtractProductInformationForIndexingRequest()
        {
            ProductIds = new string[]{};
        }

        ///<summary>
        ///[Optional] The list of product IDs to retrieve. When not specified, no filtering by ID will be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="[Optional] The list of product IDs to retrieve. When not specified, no filtering by ID will be applied.")]
        public virtual string[] ProductIds { get; set; }

        ///<summary>
        ///[Optional] The ID of the category for filtering products. When not specified or if ProductIds are specified, filtering will not be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="[Optional] The ID of the category for filtering products. When not specified or if ProductIds are specified, filtering will not be applied.")]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///[Optional] The minimum "Last modification date" for filtering products. When not specified or if ProductIds are specified, filtering will not be applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="[Optional] The minimum \"Last modification date\" for filtering products. When not specified or if ProductIds are specified, filtering will not be applied.")]
        public virtual DateTime? LastModifiedSince { get; set; }

        ///<summary>
        ///The continuation token. To be used for pagination.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The continuation token. To be used for pagination.")]
        public virtual string ContinuationToken { get; set; }

        ///<summary>
        ///The maximum number of products to return. To be used for pagination.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of products to return. To be used for pagination.")]
        public virtual int? MaximumItems { get; set; }

        ///<summary>
        ///Indicates whether or not to include the product prices.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not to include the product prices.")]
        public virtual bool IncludePrices { get; set; }

        ///<summary>
        ///Indicates whether or not to include the cover images for products and product variants.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not to include the cover images for products and product variants.")]
        public virtual bool IncludeCoverImages { get; set; }

        ///<summary>
        ///Indicates whether or not to include the product inventory information.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not to include the product inventory information.")]
        public virtual bool IncludeInventory { get; set; }

        ///<summary>
        ///Indicates whether or not to include the properties overridden in the underlying dependent scopes. Applicable for the 'Sale' scopes only.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not to include the properties overridden in the underlying dependent scopes. Applicable for the 'Sale' scopes only.")]
        public virtual bool IncludeDependentScopes { get; set; }
    }

    ///<summary>
    ///Product information list
    ///</summary>
    [Api(Description="Product information list")]
    [DataContract]
    public partial class ExtractProductInformationForIndexingResponse
    {
        public ExtractProductInformationForIndexingResponse()
        {
            Products = new List<ProductInformation>{};
        }

        ///<summary>
        ///The list of product information.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of product information.")]
        public virtual List<ProductInformation> Products { get; set; }

        ///<summary>
        ///The continuation token that can be used to get the next result page.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The continuation token that can be used to get the next result page.")]
        public virtual string ContinuationToken { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}/treeNodes/{SearchTerms}", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class FindCategoryTreeNodesRequest
        : IReturn<List<CategoryTreeNode>>, IGet
    {
        ///<summary>
        ///The search terms for the query.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The search terms for the query.")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        ///The Scope of the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Scope of the request.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///A hint that the service will use to determine the maximum number of nodes to return
        ///</summary>
        [DataMember]
        [ApiMember(Description="A hint that the service will use to determine the maximum number of nodes to return")]
        public virtual int MaximumResultSize { get; set; }

        ///<summary>
        ///The name of the culture (language) to use to process the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the culture (language) to use to process the request.", IsRequired=true)]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/priceLists/find", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class FindPriceListsRequest
        : ScopedRequest, IReturn<List<PriceList>>, IGet
    {
        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether expired entries should be returned. Default is false.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether expired entries should be returned. Default is false.")]
        public virtual bool IncludeExpiredEntries { get; set; }

        ///<summary>
        ///Gets or sets the lower bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active after this date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the lower bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active after this date.")]
        public virtual DateTime? StartDate { get; set; }

        ///<summary>
        ///Gets or sets the upper bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active before this date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the upper bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active before this date.")]
        public virtual DateTime? EndDate { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/productPrices", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class FindProductPricesRequest
        : IReturn<List<ProductPrice>>, IPost
    {
        public FindProductPricesRequest()
        {
            ProductIds = new List<string>{};
        }

        ///<summary>
        ///The ids of the product use to retrieve ProductPrice
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ids of the product use to retrieve ProductPrice")]
        public virtual List<string> ProductIds { get; set; }

        ///<summary>
        ///The Scope of the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Scope of the request.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The UserId for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The UserId for the request.")]
        public virtual string UserId { get; set; }

        ///<summary>
        ///Whether or not to include the variants product price of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not to include the variants product price of the product")]
        public virtual bool IncludeVariants { get; set; }

        ///<summary>
        ///The date which the price is effective.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date which the price is effective.")]
        public virtual DateTime EffectiveDate { get; set; }
    }

    ///<summary>
    ///Catalogs are entities which represents markets and buyable Products organized in Categories.
    ///</summary>
    [Route("/catalogs/{CatalogId}/children", "GET")]
    [Api(Description="Catalogs are entities which represents markets and buyable Products organized in Categories.")]
    [ApiResponse(Description="Requested catalog id not found", StatusCode=404)]
    [DataContract]
    public partial class GetCatalogChildrenIdsRequest
        : IReturn<List<Catalog>>, IGet
    {
        ///<summary>
        ///The name of the culture (language) to use to process the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the culture (language) to use to process the request.", IsRequired=true)]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The Id of the parent Catalog.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Id of the parent Catalog.", IsRequired=true)]
        public virtual string CatalogId { get; set; }
    }

    ///<summary>
    ///Catalogs are entities which represents markets and buyable Products organized in Categories.
    ///</summary>
    [Route("/catalogs/{CatalogId}", "GET")]
    [Api(Description="Catalogs are entities which represents markets and buyable Products organized in Categories.")]
    [ApiResponse(Description="Requested catalog id not found", StatusCode=404)]
    [DataContract]
    public partial class GetCatalogRequest
        : IReturn<Catalog>, IGet
    {
        ///<summary>
        ///The name of the culture (language) to use to process the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the culture (language) to use to process the request.", IsRequired=true)]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The CatalogId of the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The CatalogId of the request.", IsRequired=true)]
        public virtual string CatalogId { get; set; }

        ///<summary>
        ///Indicates if the children must be included in the response.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if the children must be included in the response.")]
        public virtual bool IncludeChildren { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}/containingProducts", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class GetCategoriesContainingProductsByStatusRequest
        : ScopedRequest, IReturn<GetCategoriesContainingProductsByStatusResult>, IGet
    {
        ///<summary>
        ///The publication status to filter the products
        ///</summary>
        [DataMember]
        [ApiMember(Description="The publication status to filter the products")]
        public virtual string PublicationStatus { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class GetCategoriesRequest
        : IReturn<List<Category>>, IGet
    {
        ///<summary>
        ///The scope id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope id", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/v2/{ScopeId}", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class GetCategoriesV2Request
        : IReturn<CategoryList>, IGet
    {
        ///<summary>
        ///The scope id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope id", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}/{CategoryId}/children", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [ApiResponse(Description="Happened when the category is not found.", StatusCode=404)]
    [DataContract]
    public partial class GetCategoryChildrenRequest
        : GetCategoryRequestBase, IReturn<List<Category>>, IGet
    {
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/v2/{ScopeId}/{CategoryId}/children", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [ApiResponse(Description="Happened when the category is not found.", StatusCode=404)]
    [DataContract]
    public partial class GetCategoryChildrenV2Request
        : GetCategoryRequestBase, IReturn<CategoryList>, IGet
    {
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}/{CategoryId}/relationships", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class GetCategoryRelationshipsRequest
        : GetCategoryRequestBase, IReturn<List<Relationship>>, IGet
    {
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/v2/{ScopeId}/{CategoryId}/relationships", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class GetCategoryRelationshipsV2Request
        : GetCategoryRequestBase, IReturn<List<Relationship>>, IGet
    {
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}/{CategoryId}", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [ApiResponse(Description="Requested category id not found", StatusCode=404)]
    [DataContract]
    public partial class GetCategoryRequest
        : GetCategoryRequestBase, IReturn<Category>, IGet
    {
        ///<summary>
        ///Indicates if the relationships must be included in the response.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if the relationships must be included in the response.")]
        public virtual bool IncludeRelationships { get; set; }
    }

    [DataContract]
    public partial class GetCategoryRequestBase
        : ScopedRequest
    {
        ///<summary>
        ///The category id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category id", IsRequired=true)]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}/existing", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class GetCategoryTreeExistingItemByStateRequest
        : ScopedRequest, IReturn<GetCategoryTreeExistingItemByStateResult>, IGet
    {
        ///<summary>
        ///The culture in which the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture in which the data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The draft state used to filter the products
        ///</summary>
        [DataMember]
        [ApiMember(Description="The draft state used to filter the products")]
        public virtual DraftState? DraftState { get; set; }

        ///<summary>
        ///The flag to get only new or not new products
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The flag to get only new or not new products")]
        public virtual bool? IsNew { get; set; }

        ///<summary>
        ///The flag to get only or not products with change notification
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The flag to get only or not products with change notification")]
        public virtual bool? HasNotification { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}/treeNodes/{StartId}/{EndId}", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class GetCategoryTreeNodesForPathRequest
        : IReturn<CategoryTreeNode>, IGet
    {
        ///<summary>
        ///The unique identifier of the first node of the path (a category id).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the first node of the path (a category id).")]
        public virtual string StartId { get; set; }

        ///<summary>
        ///The unique identifier of the last node of the path (a category id).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the last node of the path (a category id).")]
        public virtual string EndId { get; set; }

        ///<summary>
        ///The ScopeId of the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ScopeId of the request.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The name of the culture to use to process the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the culture to use to process the request.", IsRequired=true)]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}/{CategoryId}/treeNodes", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [ApiResponse(Description="Category not found", StatusCode=404)]
    [DataContract]
    public partial class GetCategoryTreeNodesRequest
        : IReturn<CategoryTreeNode>, IGet
    {
        ///<summary>
        ///The root node category unique identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The root node category unique identifier")]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///The Scope of the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Scope of the request.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///A hint that the service will use to determine the maximum number of nodes to return
        ///</summary>
        [DataMember]
        [ApiMember(Description="A hint that the service will use to determine the maximum number of nodes to return")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///The name of the culture (language) to use to process the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the culture (language) to use to process the request.", IsRequired=true)]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/v2/{ScopeId}/{CategoryId}/treeNodes", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [ApiResponse(Description="Category not found", StatusCode=404)]
    [DataContract]
    public partial class GetCategoryTreeNodesV2Request
        : IReturn<CategoryTreeNode>, IGet
    {
        ///<summary>
        ///The root node category unique identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The root node category unique identifier")]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///The Scope of the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Scope of the request.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///A hint that the service will use to determine the maximum number of nodes to return
        ///</summary>
        [DataMember]
        [ApiMember(Description="A hint that the service will use to determine the maximum number of nodes to return")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///The name of the culture (language) to use to process the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the culture (language) to use to process the request.", IsRequired=true)]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/v2/{ScopeId}/{CategoryId}", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [ApiResponse(Description="Requested category id not found", StatusCode=404)]
    [DataContract]
    public partial class GetCategoryV2Request
        : GetCategoryRequestBase, IReturn<Category>, IGet
    {
        ///<summary>
        ///Indicates if the relationships must be included in the response.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if the relationships must be included in the response.")]
        public virtual bool IncludeChildren { get; set; }

        ///<summary>
        ///Indicates if the relationships must be included in the response.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if the relationships must be included in the response.")]
        public virtual bool IncludeRelationships { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/effectivePriceEntryInfo", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetEffectivePriceEntryInfoRequest
        : ScopedRequest, IReturn<EffectivePriceEntryInfo>, IGet
    {
        ///<summary>
        ///The id of the product for which we want to retrieve the effective price
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The id of the product for which we want to retrieve the effective price")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The id of the variant for which we want to retrieve the effective price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the variant for which we want to retrieve the effective price")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///The Reference Date, null = Now
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Reference Date, null = Now")]
        public virtual DateTime? ReferenceDate { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/bySku/{Sku}/media", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="When the media was not found.", StatusCode=404)]
    [DataContract]
    public partial class GetMediaBySkuRequest
        : ScopedRequest, IReturn<MediaList>, IPost
    {
        ///<summary>
        ///the stock keeping unit code (SKU) for the products to retrieve
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the stock keeping unit code (SKU) for the products to retrieve")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///a tag of the Media
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="a tag of the Media")]
        public virtual string Tag { get; set; }

        ///<summary>
        ///the MediaType of the media
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the MediaType of the media")]
        public virtual string MediaType { get; set; }

        ///<summary>
        ///The culture name in which language tha data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/media/{ScopeId}/covers", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetMediaCoverListRequest
        : ScopedRequest, IReturn<ProductMediaCoverList>, IPost
    {
        public GetMediaCoverListRequest()
        {
            ProductParameters = new List<ProductMediaParameters>{};
        }

        ///<summary>
        ///Gets or sets the list of product items
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of product items")]
        public virtual List<ProductMediaParameters> ProductParameters { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/media/{MediaId}", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="When the media was not found.", StatusCode=404)]
    [DataContract]
    public partial class GetMediaRequest
        : ScopedRequest, IReturn<ProductMedia>, IGet
    {
        ///<summary>
        ///the business id for the product to retrieve
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the business id for the product to retrieve")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///a media id
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="a media id")]
        public virtual int MediaId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/media/settings", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="Requested settings not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetMediaSettingsRequest
        : IReturn<MediaSettings>, IGet
    {
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/priceListEntries", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetPriceListEntriesRequest
        : ScopedRequest, IReturn<IEnumerable<PriceListEntry>>, IGet
    {
        ///<summary>
        ///The id of the product for which we want to retrieve price list entries
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The id of the product for which we want to retrieve price list entries")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The id of the variant for which we want to retrieve price list entries
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the variant for which we want to retrieve price list entries")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///Returns values from the parent scope of the one provided in the request or not, default is false
        ///</summary>
        [DataMember]
        [ApiMember(Description="Returns values from the parent scope of the one provided in the request or not, default is false")]
        public virtual bool UseParentScope { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether expired entries should be returned. Default is false.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether expired entries should be returned. Default is false.")]
        public virtual bool IncludeExpiredEntries { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/priceLists", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetPriceListsRequest
        : ScopedRequest, IReturn<List<PriceList>>, IGet
    {
        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/attributes/", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetProductAttributesRequest
        : IReturn<ProductAttributes>, IGet
    {
    }

    [DataContract]
    public partial class GetProductBaseRequest
        : ScopedRequest
    {
        ///<summary>
        ///whether or not to include the variants (if they exists) of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether or not to include the variants (if they exists) of the product.")]
        public virtual bool IncludeVariants { get; set; }

        ///<summary>
        ///whether or not to include the price lists of the product.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="whether or not to include the price lists of the product.")]
        public virtual bool IncludePriceLists { get; set; }

        ///<summary>
        /// Gets or sets a value indicating whether or not to include the relationships of the product.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description=" Gets or sets a value indicating whether or not to include the relationships of the product.")]
        public virtual bool IncludeRelationships { get; set; }

        ///<summary>
        /// Gets or sets a value indicating whether or not to include the media of the product.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description=" Gets or sets a value indicating whether or not to include the media of the product.")]
        public virtual bool IncludeMedia { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/definitions/{Name}", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="Requested product definition not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetProductDefinitionRequest
        : IReturn<ProductDefinition>, IGet
    {
        ///<summary>
        ///The id to retrieve the related entity definition
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id to retrieve the related entity definition", IsRequired=true)]
        public virtual string Name { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/definitions", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="Requested product definitions not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetProductDefinitionsRequest
        : IReturn<List<ProductDefinition>>, IGet
    {
        ///<summary>
        ///The type of definition, either Product or Category are the possible values
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of definition, either Product or Category are the possible values", IsRequired=true)]
        public virtual ProductDefinitionType ProductType { get; set; }

        ///<summary>
        ///The culture name in which language tha data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/productPriceEntries", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetProductPriceEntriesRequest
        : ScopedRequest, IReturn<GetProductPriceEntriesResult>, IPost
    {
        ///<summary>
        ///the business id for the product to retrieve
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the business id for the product to retrieve")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///Whether or not to include the variant prices of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not to include the variant prices of the product")]
        public virtual bool IncludeVariant { get; set; }

        ///<summary>
        ///Whether or not to include the ignored prices
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not to include the ignored prices")]
        public virtual bool IncludeIgnoredPrices { get; set; }

        ///<summary>
        ///The date which the price is effective.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date which the price is effective.")]
        public virtual DateTime EffectiveDate { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/relationships", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetProductRelationshipsRequest
        : ScopedRequest, IReturn<List<Relationship>>, IGet
    {
        ///<summary>
        ///The product id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The product id")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="When the product was not found.", StatusCode=404)]
    [DataContract]
    public partial class GetProductRequest
        : GetProductBaseRequest, IReturn<Product>, IGet
    {
        ///<summary>
        ///the business id for the product to retrieve
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the business id for the product to retrieve")]
        public virtual string ProductId { get; set; }

        ///<summary>
        /// Gets or sets a value indicating whether or not to include the image url.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description=" Gets or sets a value indicating whether or not to include the image url.")]
        public virtual bool IncludeImageUrl { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}/{CategoryId}/products", "GET")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class GetProductsByCategoryRequest
        : ScopedRequest, IReturn<List<Product>>, IGet
    {
        ///<summary>
        ///The category id at which point in the category hierarchy should the 'get products' be started.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The category id at which point in the category hierarchy should the 'get products' be started.", IsRequired=true)]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///The culture name in which language tha data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///the starting index in the results to start getting the products (used for paging purpose)
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the starting index in the results to start getting the products (used for paging purpose)")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The maximum number of results to return. Default value : 10
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The maximum number of results to return. Default value : 10")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///Whether or not to include the variants (if they exists) of the products.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not to include the variants (if they exists) of the products.")]
        public virtual bool IncludeVariants { get; set; }

        ///<summary>
        ///Whether or not to include the price lists of the products.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="Whether or not to include the price lists of the products.")]
        public virtual bool IncludePriceLists { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/v2/{ScopeId}/{CategoryId}/products", "POST")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class GetProductsByCategoryV2Request
        : GetProductBaseRequest, IReturn<ProductListPage>, IPost
    {
        ///<summary>
        ///The category id at which point in the category hierarchy should the 'get products' be started.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The category id at which point in the category hierarchy should the 'get products' be started.", IsRequired=true)]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///The continuation token used for pagination
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The continuation token used for pagination")]
        public virtual string ContinuationToken { get; set; }

        ///<summary>
        ///The maximum number of products to return. Default value : 10
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The maximum number of products to return. Default value : 10")]
        public virtual int PageSize { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/byIds", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="When the product was not found.", StatusCode=404)]
    [DataContract]
    public partial class GetProductsByIdsRequest
        : GetProductBaseRequest, IReturn<ProductList>, IPost
    {
        public GetProductsByIdsRequest()
        {
            ProductIds = new string[]{};
        }

        ///<summary>
        ///the business ids for the products to retrieve
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the business ids for the products to retrieve")]
        public virtual string[] ProductIds { get; set; }

        ///<summary>
        /// Gets or sets a value indicating whether or not to include the image url.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description=" Gets or sets a value indicating whether or not to include the image url.")]
        public virtual bool IncludeImageUrl { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/v2/{ScopeId}/byIds", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="When the product was not found.", StatusCode=404)]
    [DataContract]
    public partial class GetProductsByIdsV2Request
        : GetProductBaseRequest, IReturn<ProductList>, IPost
    {
        public GetProductsByIdsV2Request()
        {
            ProductIds = new string[]{};
        }

        ///<summary>
        ///the business ids for the products to retrieve
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the business ids for the products to retrieve")]
        public virtual string[] ProductIds { get; set; }

        ///<summary>
        /// Gets or sets a value indicating whether or not to include the image url.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description=" Gets or sets a value indicating whether or not to include the image url.")]
        public virtual bool IncludeImageUrl { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/byPublicationStatus", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetProductsByPublicationStatusRequest
        : ScopedRequest, IReturn<GetProductsByPublicationStatusResult>, IPost
    {
        public GetProductsByPublicationStatusRequest()
        {
            PropertyNames = new List<string>{};
            Categories = new List<string>{};
        }

        ///<summary>
        ///The culture in which the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture in which the data will be returned", IsRequired=true)]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///the list of properties to return
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of properties to return")]
        public virtual List<string> PropertyNames { get; set; }

        ///<summary>
        ///The maximum number of results to return. Default value : 10
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of results to return. Default value : 10")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///The name of the property to be sorted
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the property to be sorted")]
        public virtual string SortBy { get; set; }

        ///<summary>
        ///The sorting direction
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sorting direction")]
        public virtual SortDirection SortDirection { get; set; }

        ///<summary>
        ///The publication status to filter the products by
        ///</summary>
        [DataMember]
        [ApiMember(Description="The publication status to filter the products by")]
        public virtual string PublicationStatus { get; set; }

        ///<summary>
        ///The list of category ids
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The list of category ids")]
        public virtual List<string> Categories { get; set; }

        ///<summary>
        ///The flag to filter results to un-categorized products
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The flag to filter results to un-categorized products")]
        public virtual bool Uncategorized { get; set; }

        ///<summary>
        ///The flag to include product count
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The flag to include product count")]
        public virtual bool IncludeCount { get; set; }

        ///<summary>
        ///The flag to include product's default price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The flag to include product's default price")]
        public virtual bool IncludePrice { get; set; }

        ///<summary>
        ///The continuation token used for pagination
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The continuation token used for pagination")]
        public virtual string ContinuationToken { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/bySku/{Sku}", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="When the product was not found.", StatusCode=404)]
    [DataContract]
    public partial class GetProductsBySkuRequest
        : ScopedRequest, IReturn<List<Product>>, IGet
    {
        ///<summary>
        ///the stock keeping unit code (SKU) for the products to retrieve
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the stock keeping unit code (SKU) for the products to retrieve")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///whether or not to include the price lists of the products.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="whether or not to include the price lists of the products.")]
        public virtual bool IncludePriceLists { get; set; }

        ///<summary>
        /// Gets or sets a value indicating whether or not to include the relationships of the products.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description=" Gets or sets a value indicating whether or not to include the relationships of the products.")]
        public virtual bool IncludeRelationships { get; set; }

        ///<summary>
        ///The culture name in which language tha data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/v2/{ScopeId}/bySkus", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="When the product was not found.", StatusCode=404)]
    [DataContract]
    public partial class GetProductsBySkusV2Request
        : GetProductBaseRequest, IReturn<ProductList>, IPost
    {
        public GetProductsBySkusV2Request()
        {
            Skus = new string[]{};
        }

        ///<summary>
        ///the SKU-s for the products to retrieve
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the SKU-s for the products to retrieve")]
        public virtual string[] Skus { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether or not to search for variant SKU-s, in addition to searching in product SKU-s.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="Gets or sets a value indicating whether or not to search for variant SKU-s, in addition to searching in product SKU-s.")]
        public virtual bool SearchVariantSkus { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether or not to include the image URL.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="Gets or sets a value indicating whether or not to include the image URL.")]
        public virtual bool IncludeImageUrl { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/v2/{ScopeId}/bySku/{Sku}", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="When the product was not found.", StatusCode=404)]
    [DataContract]
    public partial class GetProductsBySkuV2Request
        : ScopedRequest, IReturn<ProductList>, IGet
    {
        ///<summary>
        ///the stock keeping unit code (SKU) for the products to retrieve
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the stock keeping unit code (SKU) for the products to retrieve")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether or not to search for variant SKU-s, in addition to searching in product SKU-s.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="Gets or sets a value indicating whether or not to search for variant SKU-s, in addition to searching in product SKU-s.")]
        public virtual bool SearchVariantSkus { get; set; }

        ///<summary>
        ///whether or not to include the price lists of the products.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="whether or not to include the price lists of the products.")]
        public virtual bool IncludePriceLists { get; set; }

        ///<summary>
        /// Gets or sets a value indicating whether or not to include the relationships of the products.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description=" Gets or sets a value indicating whether or not to include the relationships of the products.")]
        public virtual bool IncludeRelationships { get; set; }

        ///<summary>
        ///The culture name in which language tha data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        /// Gets or sets a value indicating whether or not to include the media of the product.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description=" Gets or sets a value indicating whether or not to include the media of the product.")]
        public virtual bool IncludeMedia { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether or not to include the image URL.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="Gets or sets a value indicating whether or not to include the image URL.")]
        public virtual bool IncludeImageUrl { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{CategoryId}/count", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetProductsCountByCategoryRequest
        : ScopedRequest, IReturn<GetProductsCountByCategoryResponse>, IGet
    {
        ///<summary>
        ///The category id at which point in the category hierarchy the 'get products' should  be started. If nothing is specified the root is used as starting point
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category id at which point in the category hierarchy the 'get products' should  be started. If nothing is specified the root is used as starting point", IsRequired=true)]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///Whether or not the descendant categories content should be recursively included below the specified starting categoryId
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the descendant categories content should be recursively included below the specified starting categoryId")]
        public virtual bool IncludeDescendantsCategories { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/settings", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="Requested settings not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetProductSettingsRequest
        : ScopedRequest, IReturn<ProductSettings>, IGet
    {
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/productPriceEntries", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetProductsPriceEntriesRequest
        : ScopedRequest, IReturn<List<GetProductPriceEntriesResult>>, IPost
    {
        public GetProductsPriceEntriesRequest()
        {
            ProductIds = new List<string>{};
        }

        ///<summary>
        ///the business ids for the products to retrieve
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the business ids for the products to retrieve")]
        public virtual List<string> ProductIds { get; set; }

        ///<summary>
        ///Whether or not to include the variant prices of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not to include the variant prices of the product")]
        public virtual bool IncludeVariant { get; set; }

        ///<summary>
        ///The date which the price is effective.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date which the price is effective.")]
        public virtual DateTime EffectiveDate { get; set; }
    }

    [DataContract]
    public partial class GetProductsPropertiesBaseRequest
        : ScopedRequest
    {
        public GetProductsPropertiesBaseRequest()
        {
            PropertiesNames = new List<string>{};
        }

        ///<summary>
        ///The culture in which the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture in which the data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///the list of properties to return
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of properties to return")]
        public virtual List<string> PropertiesNames { get; set; }

        ///<summary>
        ///the starting index in the results to start getting the products (used for paging purpose)
        ///</summary>
        [DataMember]
        [ApiMember(Description="the starting index in the results to start getting the products (used for paging purpose)")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The maximum number of results to return. Default value : 10
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of results to return. Default value : 10")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///The name of the property to be sorted
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the property to be sorted")]
        public virtual GetProductsPropertiesBaseRequest.SortByProperty SortBy { get; set; }

        ///<summary>
        ///The sorting direction
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sorting direction")]
        public virtual SortDirection SortDirection { get; set; }

        public enum SortByProperty
        {
            DisplayName,
            ProductId,
            Price,
        }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/byCategoryId/{CategoryId}", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetProductsPropertiesByCategoryRequest
        : GetProductsPropertiesBaseRequest, IReturn<GetProductsPropertiesResult>, IGet
    {
        ///<summary>
        ///The category id at which point in the category hierarchy should the 'get products' be started.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The category id at which point in the category hierarchy should the 'get products' be started.", IsRequired=true)]
        public virtual string CategoryId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/byDraftStateAndCategories", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetProductsPropertiesByDraftStateAndCategoriesRequest
        : ScopedRequest, IReturn<GetProductByCategoryAndStateResults>, IPost
    {
        public GetProductsPropertiesByDraftStateAndCategoriesRequest()
        {
            PropertiesNames = new List<string>{};
            Categories = new List<string>{};
        }

        ///<summary>
        ///The culture in which the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture in which the data will be returned", IsRequired=true)]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///the list of properties to return
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of properties to return")]
        public virtual List<string> PropertiesNames { get; set; }

        ///<summary>
        ///the starting index in the results to start getting the products (used for paging purpose)
        ///</summary>
        [DataMember]
        [ApiMember(Description="the starting index in the results to start getting the products (used for paging purpose)")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The maximum number of results to return. Default value : 10
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of results to return. Default value : 10")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///The name of the property to be sorted
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the property to be sorted")]
        public virtual GetProductsPropertiesBaseRequest.SortByProperty SortBy { get; set; }

        ///<summary>
        ///The sorting direction
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sorting direction")]
        public virtual SortDirection SortDirection { get; set; }

        ///<summary>
        ///The draft state used to filter the products
        ///</summary>
        [DataMember]
        [ApiMember(Description="The draft state used to filter the products")]
        public virtual DraftState? DraftState { get; set; }

        ///<summary>
        ///The list of category ids
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The list of category ids")]
        public virtual List<string> Categories { get; set; }

        ///<summary>
        ///The flag to filter results to new products only
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The flag to filter results to new products only")]
        public virtual bool? IsNew { get; set; }

        ///<summary>
        ///The flag to filter results to products with change notifications
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The flag to filter results to products with change notifications")]
        public virtual bool? HasNotification { get; set; }

        ///<summary>
        ///The flag to filter results to uncategorized products
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The flag to filter results to uncategorized products")]
        public virtual bool? Uncategorized { get; set; }

        ///<summary>
        ///The flag to include product count
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The flag to include product count")]
        public virtual bool IncludeCount { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/byDraftState/{DraftState}", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetProductsPropertiesByDraftStateRequest
        : GetProductsPropertiesBaseRequest, IReturn<GetProductsPropertiesResult>, IGet
    {
        ///<summary>
        ///The draft state used to filter the products
        ///</summary>
        [DataMember]
        [ApiMember(Description="The draft state used to filter the products", IsRequired=true)]
        public virtual DraftState DraftState { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/flagAsNew", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetProductsPropertiesFlagAsNewRequest
        : GetProductsPropertiesBaseRequest, IReturn<GetProductsPropertiesResult>, IGet
    {
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/withNotification", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetProductsPropertiesWithNotificationRequest
        : GetProductsPropertiesBaseRequest, IReturn<GetProductsPropertiesResult>, IGet
    {
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/statistics", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="Requested catalog id not found", StatusCode=404)]
    [DataContract]
    public partial class GetProductsStatisticsRequest
        : ScopedRequest, IReturn<GetProductsStatisticsResult>, IGet
    {
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/v2/{ScopeId}/{ProductId}", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="When the product was not found.", StatusCode=404)]
    [DataContract]
    public partial class GetProductV2Request
        : GetProductBaseRequest, IReturn<Product>, IGet
    {
        ///<summary>
        ///The business id for the product to retrieve
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The business id for the product to retrieve")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///A value indicating whether or not to include the image url.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="A value indicating whether or not to include the image url.")]
        public virtual bool IncludeImageUrl { get; set; }

        ///<summary>
        ///A value indicating whether the published version of the product should be returned.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="A value indicating whether the published version of the product should be returned.")]
        public virtual bool PublishedVersion { get; set; }

        ///<summary>
        ///A value indicating whether to include the list of overridden properties and variants. Applicable for sales scopes.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="A value indicating whether to include the list of overridden properties and variants. Applicable for sales scopes.")]
        public virtual bool IncludeInheritanceInformation { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/quicklinks", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetQuickLinksCountDetailsRequest
        : IReturn<List<QuickLinkCountDetails>>, IGet
    {
        ///<summary>
        ///The catalog name to be used for quick links count
        ///</summary>
        [DataMember]
        [ApiMember(Description="The catalog name to be used for quick links count", IsRequired=true)]
        public virtual string CatalogName { get; set; }

        ///<summary>
        ///The culture name that should be used to retrieve data
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name that should be used to retrieve data", IsRequired=true)]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Catalogs are entities which represents markets and buyable Products organized in Categories.
    ///</summary>
    [Route("/catalogs/usedCultures", "GET")]
    [Api(Description="Catalogs are entities which represents markets and buyable Products organized in Categories.")]
    [ApiResponse(Description="Requested settings not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetUsedLanguagesRequest
        : IReturn<CultureIsoList>, IGet
    {
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/variants", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class GetVariantsByProductRequest
        : IReturn<List<Variant>>, IGet
    {
        ///<summary>
        ///the business id for the product to retrieve
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the business id for the product to retrieve", IsRequired=true)]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The scope associated to the requested product
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope associated to the requested product", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///whether or not to include the price lists of the product.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="whether or not to include the price lists of the product.")]
        public virtual bool IncludePriceLists { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/integration/products/{ScopeId}/prices/import", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ImportProductsPricesRequest
        : IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///The scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The path of the file(s) to import.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The path of the file(s) to import.")]
        public virtual string Path { get; set; }

        ///<summary>
        ///The maximum number of validation errors that can be encountered.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of validation errors that can be encountered.")]
        public virtual int MaximumErrors { get; set; }

        ///<summary>
        ///the task id. Use this to query the system for the state of the task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the task id. Use this to query the system for the state of the task.")]
        public virtual Guid TaskId { get; set; }

        ///<summary>
        ///Whether or not the import process has to delete the previously existing prices, except for the 'DEFAULT' price list,  for the products and product variants for which the prices are imported.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the import process has to delete the previously existing prices, except for the 'DEFAULT' price list,  for the products and product variants for which the prices are imported.")]
        public virtual bool AllowPricesDeleting { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }

        ///<summary>
        ///Indicates whether or not the search indexes are rebuilt after the import. The default value is True (when not set)
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not the search indexes are rebuilt after the import. The default value is True (when not set)")]
        public virtual bool? RebuildSearchIndex { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/integration/products/{ScopeId}/import", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ImportProductsRequest
        : IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///The scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The path of the file(s) to import.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The path of the file(s) to import.")]
        public virtual string Path { get; set; }

        ///<summary>
        ///The maximum number of validation errors that can be encountered. 0 means infinite number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of validation errors that can be encountered. 0 means infinite number.")]
        public virtual int MaximumErrors { get; set; }

        ///<summary>
        ///the task id. Use this to query the system for the state of the task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the task id. Use this to query the system for the state of the task.")]
        public virtual Guid TaskId { get; set; }

        ///<summary>
        ///Whether or not the import process has to delete the previously existing prices, except for the 'DEFAULT' price list,  for the products and product variants for which the prices are imported.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the import process has to delete the previously existing prices, except for the 'DEFAULT' price list,  for the products and product variants for which the prices are imported.")]
        public virtual bool AllowPricesDeleting { get; set; }

        ///<summary>
        ///Whether or not the import have to delete media which are not specified in the import file.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the import have to delete media which are not specified in the import file.")]
        public virtual bool AllowMediaDeleting { get; set; }

        ///<summary>
        ///Whether or not the indexes are built after the import. The default value is True (when not set).
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the indexes are built after the import. The default value is True (when not set).")]
        public virtual bool? ReIndex { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }

        ///<summary>
        ///Indicates whether or not the search indexes are rebuilt after the import. The default value is True (when not set)
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not the search indexes are rebuilt after the import. The default value is True (when not set)")]
        public virtual bool? RebuildSearchIndex { get; set; }
    }

    [DataContract]
    public partial class ProductDependentScopeInformation
        : DependentScopeInformation
    {
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/exists/{ScopeId}/{ProductId}", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class ProductExistsRequest
        : ScopedRequest, IReturn<ProductExistsResponse>, IGet
    {
        ///<summary>
        ///The id of the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the product.")]
        public virtual string ProductId { get; set; }
    }

    [DataContract]
    public partial class ProductInformation
    {
        public ProductInformation()
        {
            DependentScopeData = new List<ProductDependentScopeInformation>{};
            VariantDependentScopeData = new Dictionary<string, List<VariantDependentScopeInformation>>{};
            InventoryInformation = new List<ProductInventoryInformation>{};
            DependentScopePrices = new List<ProductPriceDependentScopeInformation>{};
        }

        ///<summary>
        ///The product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The product.")]
        public virtual Product Product { get; set; }

        ///<summary>
        ///The dependent scope data for the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The dependent scope data for the product.")]
        public virtual List<ProductDependentScopeInformation> DependentScopeData { get; set; }

        ///<summary>
        ///The dependent scope data, related to the product variants. Mapped by variant ID.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The dependent scope data, related to the product variants. Mapped by variant ID.")]
        public virtual Dictionary<string, List<VariantDependentScopeInformation>> VariantDependentScopeData { get; set; }

        ///<summary>
        ///The inventory information for the product.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory information for the product.")]
        public virtual List<ProductInventoryInformation> InventoryInformation { get; set; }

        ///<summary>
        ///The price information for the current product in dependent scopes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The price information for the current product in dependent scopes.")]
        public virtual List<ProductPriceDependentScopeInformation> DependentScopePrices { get; set; }
    }

    [DataContract]
    public partial class ProductInventoryInformation
    {
        ///<summary>
        ///The SKU.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The SKU.")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The inventory location ID.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location ID.")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The current inventory status.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The current inventory status.")]
        public virtual InventoryStatus CurrentStatus { get; set; }

        ///<summary>
        ///The start date for the current inventory schedule.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start date for the current inventory schedule.")]
        public virtual DateTime? FromDate { get; set; }

        ///<summary>
        ///The end date for the current inventory schedule.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date for the current inventory schedule.")]
        public virtual DateTime? ToDate { get; set; }

        ///<summary>
        ///The quantity available to promise for this item.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantity available to promise for this item.")]
        public virtual double? AvailableToPromiseQuantity { get; set; }
    }

    [DataContract]
    public partial class ProductMediaCover
    {
        ///<summary>
        ///the id of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the product")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///the id of the variant
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the variant")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///the cover of the product or the variant
        ///</summary>
        [DataMember]
        [ApiMember(Description="the cover of the product or the variant")]
        public virtual string ImageUrl { get; set; }
    }

    [DataContract]
    public partial class ProductMediaCoverList
    {
        public ProductMediaCoverList()
        {
            CoverList = new List<ProductMediaCover>{};
        }

        ///<summary>
        ///Gets or sets the list of product media covers
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of product media covers")]
        public virtual List<ProductMediaCover> CoverList { get; set; }
    }

    [DataContract]
    public partial class ProductMediaParameters
    {
        ///<summary>
        ///the id of the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the product")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///the id of the variant
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the variant")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///attributes for variant
        ///</summary>
        [DataMember]
        [ApiMember(Description="attributes for variant")]
        public virtual PropertyBag VariantAttributes { get; set; }
    }

    [DataContract]
    public partial class ProductPriceDependentScopeInformation
    {
        public ProductPriceDependentScopeInformation()
        {
            ProductPriceEntries = new List<ProductPriceEntry>{};
            VariantPriceEntries = new List<VariantPriceEntry>{};
        }

        ///<summary>
        ///The ID of the dependent scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ID of the dependent scope.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The collection of ProductPriceEntry where each item represents the price of the Product in a PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of ProductPriceEntry where each item represents the price of the Product in a PriceList")]
        public virtual List<ProductPriceEntry> ProductPriceEntries { get; set; }

        ///<summary>
        ///The collection of VariantPriceEntry where each item represents the price of the Variant in a PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of VariantPriceEntry where each item represents the price of the Variant in a PriceList")]
        public virtual List<VariantPriceEntry> VariantPriceEntries { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/repairInheritance", "PUT")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class RepairProductInheritanceRequest
        : ScopedRequest, IReturnVoid, IPut
    {
        ///<summary>
        ///Gets or sets the id of the product for which we want to repair the inheritence
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Gets or sets the id of the product for which we want to repair the inheritence", IsRequired=true)]
        public virtual string ProductId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/revert", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class RevertProductChangesRequest
        : ScopedRequest, IReturnVoid, IPost
    {
        public RevertProductChangesRequest()
        {
            ProductIds = new List<string>{};
        }

        ///<summary>
        ///Ids of the products that should be updated.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Ids of the products that should be updated.", IsRequired=true)]
        public virtual List<string> ProductIds { get; set; }
    }

    ///<summary>
    ///Catalogs are entities which represents markets and buyable Products organized in Categories.
    ///</summary>
    [Route("/catalogs/{CatalogId}", "PUT")]
    [Api(Description="Catalogs are entities which represents markets and buyable Products organized in Categories.")]
    [ApiResponse(Description="Requested catalog id not found", StatusCode=404)]
    [DataContract]
    public partial class UpdateCatalogRequest
        : IReturn<Catalog>, IPut
    {
        public UpdateCatalogRequest()
        {
            Languages = new List<string>{};
        }

        ///<summary>
        ///The unique identifier of the catalog to update.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the catalog to update.", IsRequired=true)]
        public virtual string CatalogId { get; set; }

        ///<summary>
        ///The catalog description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The catalog description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///Whether the catalog is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the catalog is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The catalog default language.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The catalog default language.", IsRequired=true)]
        public virtual string DefaultLanguage { get; set; }

        ///<summary>
        ///The catalog display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The catalog display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The collection of languages (cultures) supported by this catalog.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of languages (cultures) supported by this catalog.")]
        public virtual List<string> Languages { get; set; }

        ///<summary>
        ///The catalog starting date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The catalog starting date.")]
        public virtual DateTime? StartDate { get; set; }

        ///<summary>
        ///The catalog ending date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The catalog ending date.")]
        public virtual DateTime? EndDate { get; set; }

        ///<summary>
        ///A value indicating whether the products has overridden values in the current Sales scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the products has overridden values in the current Sales scope.")]
        public virtual bool OverrideParent { get; set; }

        ///<summary>
        ///A value indicating whether product modifications will remain intact when OverrideParent is set to false.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether product modifications will remain intact when OverrideParent is set to false.")]
        public virtual bool KeepModifications { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}/{CategoryId}", "POST")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class UpdateCategoryRequest
        : ScopedRequest, IReturn<Category>, IPost
    {
        ///<summary>
        ///The category's id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category's id.")]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///The parent category's id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The parent category's id.")]
        public virtual string ParentCategoryId { get; set; }

        ///<summary>
        ///A friendly, UI compatible name for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the name
        ///</summary>
        [DataMember]
        [ApiMember(Description="A friendly, UI compatible name for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the name")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///A friendly, UI compatible description for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the description
        ///</summary>
        [DataMember]
        [ApiMember(Description="A friendly, UI compatible description for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the description")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/{ScopeId}/{CategoryId}/children/sequence", "POST")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class UpdateCategorySequenceRequest
        : ScopedRequest, IReturn<UpdateCategorySequenceResponse>, IPost
    {
        public UpdateCategorySequenceRequest()
        {
            OrderedCategoryNames = new List<string>{};
        }

        ///<summary>
        ///The category to which the child categories are associated.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category to which the child categories are associated.", IsRequired=true)]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///The ORDERED list of child category. Any unlisted category will be placed at the end.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ORDERED list of child category. Any unlisted category will be placed at the end.")]
        public virtual List<string> OrderedCategoryNames { get; set; }
    }

    [DataContract]
    public partial class UpdateCategorySequenceResponse
    {
        public UpdateCategorySequenceResponse()
        {
            CategoryIds = new List<string>{};
        }

        ///<summary>
        ///The list of category ids
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of category ids")]
        public virtual List<string> CategoryIds { get; set; }
    }

    ///<summary>
    ///Categories are entities which represents a classification of products.
    ///</summary>
    [Route("/categories/v2/{ScopeId}/{CategoryId}", "PUT")]
    [Api(Description="Categories are entities which represents a classification of products.")]
    [DataContract]
    public partial class UpdateCategoryV2Request
        : ScopedRequest, IReturn<Category>, IPut
    {
        ///<summary>
        ///The category's id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The category's id.")]
        public virtual string CategoryId { get; set; }

        ///<summary>
        ///A friendly, UI compatible name for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the name
        ///</summary>
        [DataMember]
        [ApiMember(Description="A friendly, UI compatible name for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the name")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///A friendly, UI compatible description for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the description
        ///</summary>
        [DataMember]
        [ApiMember(Description="A friendly, UI compatible description for the Category. It is kept as a multilingual representation, allowing the display of a language friendly version of the description")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///The flag that defines whether the category should appear in frond-end search results
        ///</summary>
        [DataMember]
        [ApiMember(Description="The flag that defines whether the category should appear in frond-end search results")]
        public virtual bool? IncludeInSearch { get; set; }

        ///<summary>
        ///The value that defines in what order will the category be returned relative to its parent category
        ///</summary>
        [DataMember]
        [ApiMember(Description="The value that defines in what order will the category be returned relative to its parent category")]
        public virtual int? SequenceNumber { get; set; }

        ///<summary>
        ///The value that defines the id of the parent category
        ///</summary>
        [DataMember]
        [ApiMember(Description="The value that defines the id of the parent category")]
        public virtual string ParentItemName { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/media/{MediaId}/resized", "PUT")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="No product or media found.", StatusCode=404)]
    [DataContract]
    public partial class UpdateMediaResizedInstancesRequest
        : ScopedRequest, IReturn<ProductMedia>, IPut
    {
        public UpdateMediaResizedInstancesRequest()
        {
            ResizedInstances = new ResizedMediaLink[]{};
        }

        ///<summary>
        ///the business id for the product to retrieve
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the business id for the product to retrieve")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///a media id
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="a media id")]
        public virtual int MediaId { get; set; }

        ///<summary>
        ///resized instances
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="resized instances")]
        public virtual ResizedMediaLink[] ResizedInstances { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/media/settings", "PUT")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="Requested settings not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateMediaSettingsRequest
        : IReturn<MediaSettings>, IPut
    {
        public UpdateMediaSettingsRequest()
        {
            MediaSizes = new Dictionary<string, string>{};
        }

        ///<summary>
        ///accepted file types
        ///</summary>
        [DataMember]
        [ApiMember(Description="accepted file types")]
        public virtual string MediaAcceptedFileTypes { get; set; }

        ///<summary>
        ///a product filename convention
        ///</summary>
        [DataMember]
        [ApiMember(Description="a product filename convention")]
        public virtual string MediaProductFileNameConvention { get; set; }

        ///<summary>
        /// a product variant file name convention
        ///</summary>
        [DataMember]
        [ApiMember(Description=" a product variant file name convention")]
        public virtual string MediaProductVariantFileNameConvention { get; set; }

        ///<summary>
        ///a product variant file name convention
        ///</summary>
        [DataMember]
        [ApiMember(Description="a product variant file name convention")]
        public virtual string MediaProductKeyVariantFileNameConvention { get; set; }

        ///<summary>
        ///a fallback image name
        ///</summary>
        [DataMember]
        [ApiMember(Description="a fallback image name")]
        public virtual string MediaFallbackImageName { get; set; }

        ///<summary>
        ///a value indicating whether resize uploaded images server-side
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether resize uploaded images server-side")]
        public virtual bool? MediaResizeUploadedImagesServerSide { get; set; }

        ///<summary>
        ///dimensions for different image sizes (f.e. S|M|L|XL)
        ///</summary>
        [DataMember]
        [ApiMember(Description="dimensions for different image sizes (f.e. S|M|L|XL)")]
        public virtual Dictionary<string, string> MediaSizes { get; set; }

        ///<summary>
        ///media server url
        ///</summary>
        [DataMember]
        [ApiMember(Description="media server url")]
        public virtual string MediaServerUrl { get; set; }

        ///<summary>
        ///this value is used for choosing the size of the of the image when returning ImageUrl for a product cover image
        ///</summary>
        [DataMember]
        [ApiMember(Description="this value is used for choosing the size of the of the image when returning ImageUrl for a product cover image")]
        public virtual string MediaCoverImageSize { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/priceListEntries", "PUT")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class UpdatePriceListEntryRequest
        : ScopedRequest, IReturn<PriceListEntry>, IPut
    {
        ///<summary>
        ///The id of the price list for which we want to update a price list entry
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The id of the price list for which we want to update a price list entry")]
        public virtual string PriceListId { get; set; }

        ///<summary>
        ///The id of the product for which we want to update a price list entry
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The id of the product for which we want to update a price list entry")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The id of the variant for which we want to update a price list entry
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the variant for which we want to update a price list entry")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///The price of the updated price list entry
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The price of the updated price list entry")]
        public virtual decimal Price { get; set; }

        ///<summary>
        ///Gets or sets a value indicating whether the price should be ignored, default is false. If set to true, the price entry will override the parent but will be ignored at the scope level, thus fallbacking to the next available price entry in the current scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating whether the price should be ignored, default is false. If set to true, the price entry will override the parent but will be ignored at the scope level, thus fallbacking to the next available price entry in the current scope")]
        public virtual bool IsIgnored { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/priceLists/{PriceListId}", "PUT")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class UpdatePriceListRequest
        : ScopedRequest, IReturn<PriceList>, IPut
    {
        ///<summary>
        ///The identifier of the PriceList.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the PriceList.")]
        public virtual string PriceListId { get; set; }

        ///<summary>
        ///The identifier of the price list with the next higher priority. If null, the price list will have the highest priority.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The identifier of the price list with the next higher priority. If null, the price list will have the highest priority.")]
        public virtual string NextHigherPriorityPriceListId { get; set; }

        ///<summary>
        ///The type of the PriceList.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the PriceList.")]
        public virtual string Type { get; set; }

        ///<summary>
        ///The category of the PriceList.
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="The category of the PriceList.")]
        public virtual string Category { get; set; }

        ///<summary>
        ///A friendly, UI compatible name for the PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="A friendly, UI compatible name for the PriceList")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The start date of the PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="The start date of the PriceList")]
        public virtual DateTime? StartDate { get; set; }

        ///<summary>
        ///The end date of the PriceList
        ///</summary>
        [DataMember]
        [ApiMember(Description="The end date of the PriceList")]
        public virtual DateTime? EndDate { get; set; }

        ///<summary>
        ///Whether or not the product prices search index will be built rollowing the import. The default value is False.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not the product prices search index will be built rollowing the import. The default value is False.")]
        public virtual bool? RebuildSearchIndex { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/publicationStatus", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class UpdateProductPublicationStatusRequest
        : ScopedRequest, IReturnVoid, IPost
    {
        public UpdateProductPublicationStatusRequest()
        {
            ProductIds = new List<string>{};
        }

        ///<summary>
        ///Ids of the products that are going to be processed
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Ids of the products that are going to be processed", IsRequired=true)]
        public virtual List<string> ProductIds { get; set; }

        ///<summary>
        ///The publication status that should be set for the products. Supported values are: 'InProgress', 'PendingApproval', 'ReadyToCompose', 'Rejected' and 'Published'.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The publication status that should be set for the products. Supported values are: 'InProgress', 'PendingApproval', 'ReadyToCompose', 'Rejected' and 'Published'.", IsRequired=true)]
        public virtual string PublicationStatus { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}", "PUT")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class UpdateProductRequest
        : ScopedRequest, IReturn<Product>, IPut
    {
        public UpdateProductRequest()
        {
            ProductPropertyModifications = new List<ProductPropertyModification>{};
            AddVariantModifications = new List<AddVariantModification>{};
            VariantPropertyModifications = new List<VariantPropertyModification>{};
            DeleteVariantModifications = new List<DeleteVariantModification>{};
            AddMediaModifications = new List<AddMediaModification>{};
            MediaPropertyModifications = new List<MediaPropertyModification>{};
            DeleteMediaModifications = new List<DeleteMediaModification>{};
        }

        ///<summary>
        ///Gets or sets the id of the product for which we want to update
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Gets or sets the id of the product for which we want to update")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///Gets or sets the list of modifications that the draft should apply to the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of modifications that the draft should apply to the product")]
        public virtual List<ProductPropertyModification> ProductPropertyModifications { get; set; }

        ///<summary>
        ///Gets or sets an object representing the category to be associated to the product in draft
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets an object representing the category to be associated to the product in draft")]
        public virtual ParentCategoriesModification ParentCategoriesModification { get; set; }

        ///<summary>
        ///Gets or sets an object representing the category to be set as primary for the product in draft
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets an object representing the category to be set as primary for the product in draft")]
        public virtual PrimaryParentCategoryModification PrimaryParentCategoryModification { get; set; }

        ///<summary>
        ///Gets or sets the list of variants that should be added to the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of variants that should be added to the product")]
        public virtual List<AddVariantModification> AddVariantModifications { get; set; }

        ///<summary>
        ///Gets or sets the list of modifications that the draft should apply to the variants
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of modifications that the draft should apply to the variants")]
        public virtual List<VariantPropertyModification> VariantPropertyModifications { get; set; }

        ///<summary>
        ///Gets or sets the list of modifications that the draft should apply to the variants
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of modifications that the draft should apply to the variants")]
        public virtual List<DeleteVariantModification> DeleteVariantModifications { get; set; }

        ///<summary>
        ///Gets or sets the list of media that should be added to the media
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of media that should be added to the media")]
        public virtual List<AddMediaModification> AddMediaModifications { get; set; }

        ///<summary>
        ///Gets or sets the list of modifications that the draft should apply to the media
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of modifications that the draft should apply to the media")]
        public virtual List<MediaPropertyModification> MediaPropertyModifications { get; set; }

        ///<summary>
        ///Gets or sets the list of delete modifications that the draft should apply to the media.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of delete modifications that the draft should apply to the media.")]
        public virtual List<DeleteMediaModification> DeleteMediaModifications { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/settings", "PUT")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="Requested settings not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateProductSettingsRequest
        : IReturn<ProductSettings>, IPut
    {
        public UpdateProductSettingsRequest()
        {
            PropertyBag = new Dictionary<string, string>{};
        }

        ///<summary>
        ///the changes made to an price will be audited
        ///</summary>
        [DataMember]
        [ApiMember(Description="the changes made to an price will be audited")]
        public virtual bool IsPricingAuditEnabled { get; set; }

        ///<summary>
        ///the number of days the product stays in the New count.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number of days the product stays in the New count.")]
        public virtual int? NewProductDays { get; set; }

        ///<summary>
        ///a value indicating whether the product workflow is simple (false) or with composer (true).
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether the product workflow is simple (false) or with composer (true).")]
        public virtual bool? EnableExtendedProductWorkflow { get; set; }

        ///<summary>
        ///System setting to allow overriding the default behavior of not allowing any product with regular prices to be saved at 0 pricing.
        ///</summary>
        [DataMember]
        [ApiMember(Description="System setting to allow overriding the default behavior of not allowing any product with regular prices to be saved at 0 pricing.")]
        public virtual bool? OverrideGreaterThanZeroPricingConstraint { get; set; }

        ///<summary>
        ///whether or not the changes to multilingual attributes in a sales scope should be copied over to the Global scope.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether or not the changes to multilingual attributes in a sales scope should be copied over to the Global scope.")]
        public virtual bool? AllowTranslationFromSalesToGlobal { get; set; }

        ///<summary>
        ///Specify what will be the Active value for the products imported.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specify what will be the Active value for the products imported.")]
        public virtual ImportProductStatusOption? DefaultProductImportStatus { get; set; }

        ///<summary>
        ///Whether or not to create notifications (for changes in system culture)  to all other languages of the same scope as the changes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not to create notifications (for changes in system culture)  to all other languages of the same scope as the changes.")]
        public virtual bool? NotifySameScopeOtherLanguages { get; set; }

        ///<summary>
        ///Specifies the product and variant sku uniqueness level.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Specifies the product and variant sku uniqueness level.")]
        public virtual SkuUniquenessLevel? SkuUniquenessLevel { get; set; }

        ///<summary>
        ///Determine if the inventory is enabled
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determine if the inventory is enabled")]
        public virtual bool? IsInventoryEnabled { get; set; }

        ///<summary>
        ///the list of inventory statuses available to search.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of inventory statuses available to search.")]
        public virtual string AvailableInventoryStatuses { get; set; }

        ///<summary>
        ///the maximum number of variant attributes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of variant attributes.")]
        public virtual int? MaxNumberOfVariantAttributes { get; set; }

        ///<summary>
        ///the maximum number of product attributes
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of product attributes")]
        public virtual int? MaxNumberOfProductAttributes { get; set; }

        ///<summary>
        ///the maximum number of media items
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of media items")]
        public virtual int? MaxNumberOfMediaItems { get; set; }

        ///<summary>
        ///the maximum number of variants
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of variants")]
        public virtual int? MaxNumberOfVariants { get; set; }

        ///<summary>
        ///the maximum number of relations
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of relations")]
        public virtual int? MaxNumberOfRelationships { get; set; }

        ///<summary>
        ///the maximum number of product in a file for the product export.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of product in a file for the product export.")]
        public virtual int? ProductExportMaxNumberOfItemPerFile { get; set; }

        ///<summary>
        ///the custom settings
        ///</summary>
        [DataMember]
        [ApiMember(Description="the custom settings")]
        public virtual Dictionary<string, string> PropertyBag { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/{ProductId}/variantsPrices/{PriceListId}", "PUT")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class UpdateVariantsPriceListEntryRequest
        : ScopedRequest, IReturnVoid, IPut
    {
        public UpdateVariantsPriceListEntryRequest()
        {
            PriceListEntries = new List<PriceListEntry>{};
        }

        ///<summary>
        ///The id of the the price list for which we want to update the price list entries
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The id of the the price list for which we want to update the price list entries")]
        public virtual string PriceListId { get; set; }

        ///<summary>
        ///The id of the product for which we want to update the price list entries
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The id of the product for which we want to update the price list entries")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The list of prices
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The list of prices")]
        public virtual List<PriceListEntry> PriceListEntries { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/media/{ScopeId}/{ProductId}/upload", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class UploadMediaRequest
        : ScopedRequest, IReturn<Product>, IPost
    {
        ///<summary>
        /// the id of the product for which we want to upload media.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description=" the id of the product for which we want to upload media.")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///the id of the variant for which we want to upload media
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the variant for which we want to upload media")]
        public virtual string VariantId { get; set; }

        ///<summary>
        ///the attribute values for which we want to upload media
        ///</summary>
        [DataMember]
        [ApiMember(Description="the attribute values for which we want to upload media")]
        public virtual PropertyBag AttributesToMatch { get; set; }

        ///<summary>
        ///the Url instead upload image
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Url instead upload image")]
        public virtual string Url { get; set; }

        ///<summary>
        ///the MediaType of the media
        ///</summary>
        [DataMember]
        [ApiMember(Description="the MediaType of the media")]
        public virtual string MediaType { get; set; }

        ///<summary>
        ///the title of the Media
        ///</summary>
        [DataMember]
        [ApiMember(Description="the title of the Media")]
        public virtual LocalizedString Title { get; set; }

        ///<summary>
        ///a general description of the Media
        ///</summary>
        [DataMember]
        [ApiMember(Description="a general description of the Media")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///a tag of the Media
        ///</summary>
        [DataMember]
        [ApiMember(Description="a tag of the Media")]
        public virtual string Tag { get; set; }
    }

    [DataContract]
    public partial class VariantDependentScopeInformation
        : DependentScopeInformation
    {
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Products.Drafts
{

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/draft/{ProductId}", "DELETE")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class DeleteProductDraftRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///Gets or sets the id of the product for which we want to delete the draft
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Gets or sets the id of the product for which we want to delete the draft", IsRequired=true)]
        public virtual string ProductId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/draft/{ProductId}", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="When the product draft was not found.", StatusCode=404)]
    [DataContract]
    public partial class GetProductDraftRequest
        : ScopedRequest, IReturn<ProductDraft>, IGet
    {
        ///<summary>
        ///the business id for the product to retrieve
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the business id for the product to retrieve")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/draftStates/{ProductId}", "GET")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [ApiResponse(Description="When the product was not found.", StatusCode=404)]
    [DataContract]
    public partial class GetProductDraftStatesRequest
        : ScopedRequest, IReturn<LocalizedDraftState>, IGet
    {
        ///<summary>
        ///the business id for the product to retrieve
        ///</summary>
        [DataMember(Order=0)]
        [ApiMember(Description="the business id for the product to retrieve")]
        public virtual string ProductId { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/sync/{ScopeId}/{ProductId}", "PUT")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class SyncProductRequest
        : ScopedRequest, IReturnVoid, IPut
    {
        public SyncProductRequest()
        {
            ProductPropertyModifications = new Dictionary<string, List<ProductPropertyModification>>{};
            VariantPropertyModifications = new Dictionary<string, List<VariantPropertyModification>>{};
            DeleteVariantModifications = new List<DeleteVariantModification>{};
        }

        ///<summary>
        ///Gets or sets the id of the product for which we want to update
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Gets or sets the id of the product for which we want to update")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///Gets or sets the definition name for the product to be synchronized. 
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Gets or sets the definition name for the product to be synchronized. ")]
        public virtual string DefinitionName { get; set; }

        ///<summary>
        ///Gets or sets the list of modifications that the draft should apply to the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of modifications that the draft should apply to the product", IsRequired=true)]
        public virtual Dictionary<string, List<ProductPropertyModification>> ProductPropertyModifications { get; set; }

        ///<summary>
        ///Gets or sets the list of modifications that the draft should apply to the variants
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of modifications that the draft should apply to the variants", IsRequired=true)]
        public virtual Dictionary<string, List<VariantPropertyModification>> VariantPropertyModifications { get; set; }

        ///<summary>
        ///Gets or sets an object representing the category to be associated to the product in draft
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets an object representing the category to be associated to the product in draft", IsRequired=true)]
        public virtual ParentCategoriesModification ParentCategoriesModification { get; set; }

        ///<summary>
        ///Gets or sets an object representing the category to be set as primary for the product in draft
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets an object representing the category to be set as primary for the product in draft", IsRequired=true)]
        public virtual PrimaryParentCategoryModification PrimaryParentCategoryModification { get; set; }

        ///<summary>
        ///Gets or sets the list of modifications that the draft should apply to the variants
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of modifications that the draft should apply to the variants", IsRequired=true)]
        public virtual List<DeleteVariantModification> DeleteVariantModifications { get; set; }
    }

    ///<summary>
    ///Products are entities which represents a buyable item managed in a catalog.
    ///</summary>
    [Route("/products/{ScopeId}/draft/{ProductId}", "POST")]
    [Api(Description="Products are entities which represents a buyable item managed in a catalog.")]
    [DataContract]
    public partial class UpdateProductDraftRequest
        : ScopedRequest, IReturn<ProductDraft>, IPost
    {
        public UpdateProductDraftRequest()
        {
            ProductPropertyModifications = new List<ProductPropertyModification>{};
            VariantPropertyModifications = new List<VariantPropertyModification>{};
            DeleteVariantModifications = new List<DeleteVariantModification>{};
        }

        ///<summary>
        ///Gets or sets the id of the product for which we want to update the draft
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="Gets or sets the id of the product for which we want to update the draft", IsRequired=true)]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///Gets or sets the culture (language) name in which the product draft is processed
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the culture (language) name in which the product draft is processed", IsRequired=true)]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///Gets or sets a value indicating wheter to clear the existing motifications and save only the list given in this request or add the given motifications to the existing list. The default value is 'true'
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets a value indicating wheter to clear the existing motifications and save only the list given in this request or add the given motifications to the existing list. The default value is 'true'")]
        public virtual bool OverwriteModifications { get; set; }

        ///<summary>
        ///Gets or sets the list of modifications that the draft should apply to the product
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of modifications that the draft should apply to the product", IsRequired=true)]
        public virtual List<ProductPropertyModification> ProductPropertyModifications { get; set; }

        ///<summary>
        ///Gets or sets the list of modifications that the draft should apply to the variants
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of modifications that the draft should apply to the variants", IsRequired=true)]
        public virtual List<VariantPropertyModification> VariantPropertyModifications { get; set; }

        ///<summary>
        ///Gets or sets an object representing the category to be associated to the product in draft
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets an object representing the category to be associated to the product in draft", IsRequired=true)]
        public virtual ParentCategoriesModification ParentCategoriesModification { get; set; }

        ///<summary>
        ///Gets or sets an object representing the category to be set as primary for the product in draft
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets an object representing the category to be set as primary for the product in draft", IsRequired=true)]
        public virtual PrimaryParentCategoryModification PrimaryParentCategoryModification { get; set; }

        ///<summary>
        ///Gets or sets the list of modifications that the draft should apply to the variants
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets or sets the list of modifications that the draft should apply to the variants", IsRequired=true)]
        public virtual List<DeleteVariantModification> DeleteVariantModifications { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Products.Inventory
{

    ///<summary>
    ///Inventory locations are places which manage inventory.
    ///</summary>
    [Route("/inventoryLocations/{InventoryLocationId}/schedules", "POST")]
    [Api(Description="Inventory locations are places which manage inventory.")]
    [ApiResponse(Description="The inventory schedule was not found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AddInventoryScheduleRequest
        : ScopedRequest, IReturn<InventorySchedule>, IPost
    {
        ///<summary>
        ///The inventory schedule identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory schedule identifier")]
        public virtual Guid ScheduleId { get; set; }

        ///<summary>
        ///The inventory location identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The associated product sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="The associated product sku")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The date range of the schedule
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date range of the schedule")]
        public virtual DateRange DateRange { get; set; }

        ///<summary>
        ///The status of product inventory
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status of product inventory")]
        public virtual InventoryStatus InventoryStatus { get; set; }
    }

    ///<summary>
    ///Inventory locations are places which manage inventory.
    ///</summary>
    [Route("/inventoryLocations/{ScopeId}", "POST")]
    [Api(Description="Inventory locations are places which manage inventory.")]
    [ApiResponse(Description="The associated inventory location was not found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateInventoryLocationRequest
        : ScopedRequest, IReturn<InventoryLocation>, IPost
    {
        ///<summary>
        ///the business id for the inventory location to retrieve
        ///</summary>
        [DataMember]
        [ApiMember(Description="the business id for the inventory location to retrieve")]
        public virtual string AssociatedLocationId { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/{ScopeId}/{InventoryLocationId}/{Sku}", "PUT")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="The inventory item was not found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateOrUpdateInventoryItemRequest
        : ScopedRequest, IReturn<InventoryItem>, IPut
    {
        public CreateOrUpdateInventoryItemRequest()
        {
            Schedules = new List<InventorySchedule>{};
        }

        ///<summary>
        ///The inventory location identifier used to identify the right inventory to update
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier used to identify the right inventory to update")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The associated product sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="The associated product sku")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The quantified information of this item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantified information of this item")]
        public virtual InventoryQuantity Quantity { get; set; }

        ///<summary>
        ///The list of schedules
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of schedules")]
        public virtual List<InventorySchedule> Schedules { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/{ScopeId}/bySku/{Sku}/byLocation/{InventoryLocationId}/decrease/{Quantity}", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="The inventory quantity was not found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DecreaseInventoryQuantityRequest
        : ScopedRequest, IReturn<InventoryQuantity>, IPost
    {
        ///<summary>
        ///The inventory location identifier used to identify the right inventory to update
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier used to identify the right inventory to update")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The associated product sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="The associated product sku")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The quantity to remove from the inventory
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantity to remove from the inventory")]
        public virtual double Quantity { get; set; }
    }

    ///<summary>
    ///Inventory locations are places which manage inventory.
    ///</summary>
    [Route("/inventoryLocations/{InventoryLocationId}/schedules/{ScheduleId}", "DELETE")]
    [Api(Description="Inventory locations are places which manage inventory.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteInventoryScheduleRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The inventory schedule identifier used to find the right schedule to update
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory schedule identifier used to find the right schedule to update")]
        public virtual Guid ScheduleId { get; set; }

        ///<summary>
        ///The inventory location identifier used to identify the right schedule to update
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier used to identify the right schedule to update")]
        public virtual string InventoryLocationId { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/{ScopeId}/find", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindInventoryItemsRequest
        : ScopedRequest, IReturn<List<InventoryItem>>, IPost
    {
        public FindInventoryItemsRequest()
        {
            InventoryItemIdentifiers = new List<InventoryItemIdentifier>{};
        }

        ///<summary>
        ///the associations between business id for the inventory location and Sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="the associations between business id for the inventory location and Sku")]
        public virtual List<InventoryItemIdentifier> InventoryItemIdentifiers { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/{ScopeId}/bySku/{Sku}/status", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="No inventory items status was found for this sku", StatusCode=404)]
    [DataContract]
    public partial class FindInventoryItemsStatusByScopeAndSkuRequest
        : ScopedRequest, IReturn<List<InventoryItemAvailability>>, IPost
    {
        ///<summary>
        ///Sku which will be associated to the InventoryLocationId to retrieve InventoryItem
        ///</summary>
        [DataMember]
        [ApiMember(Description="Sku which will be associated to the InventoryLocationId to retrieve InventoryItem")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The date to retrieve InventoryItemStatus
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date to retrieve InventoryItemStatus", IsRequired=true)]
        public virtual DateTime Date { get; set; }

        ///<summary>
        ///Includes the availabilities for the child scopes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Includes the availabilities for the child scopes.")]
        public virtual bool IncludeChildScopes { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/{ScopeId}/bySkus/status", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindInventoryItemsStatusByScopeAndSkusRequest
        : ScopedRequest, IReturn<List<InventoryItemAvailability>>, IPost
    {
        public FindInventoryItemsStatusByScopeAndSkusRequest()
        {
            Skus = new List<string>{};
        }

        ///<summary>
        ///Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus
        ///</summary>
        [DataMember]
        [ApiMember(Description="Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus")]
        public virtual List<string> Skus { get; set; }

        ///<summary>
        ///The date for which to retrieve InventoryItemStatus
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date for which to retrieve InventoryItemStatus", IsRequired=true)]
        public virtual DateTime Date { get; set; }

        ///<summary>
        ///Includes the availabilities for the child scopes.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Includes the availabilities for the child scopes.")]
        public virtual bool IncludeChildScopes { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/{ScopeId}/byLocation/{InventoryLocationId}/bySkus/status", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindInventoryItemStatusByLocationAndSkusRequest
        : ScopedRequest, IReturn<List<InventoryItemAvailability>>, IPost
    {
        public FindInventoryItemStatusByLocationAndSkusRequest()
        {
            Skus = new List<string>{};
        }

        ///<summary>
        ///business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus
        ///</summary>
        [DataMember]
        [ApiMember(Description="business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus
        ///</summary>
        [DataMember]
        [ApiMember(Description="Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus")]
        public virtual List<string> Skus { get; set; }

        ///<summary>
        ///The date for which to retrieve InventoryItemStatus
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date for which to retrieve InventoryItemStatus", IsRequired=true)]
        public virtual DateTime Date { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/{ScopeId}/bySku/{Sku}/byLocation/{InventoryLocationId}/status", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="No inventory schedules was found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindInventoryItemStatusBySkuAndLocationRequest
        : ScopedRequest, IReturn<InventoryItemAvailability>, IPost
    {
        ///<summary>
        ///business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus
        ///</summary>
        [DataMember]
        [ApiMember(Description="business id for the inventory location which will be associated to the Sku to retrieve InventoryItemStatus")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus
        ///</summary>
        [DataMember]
        [ApiMember(Description="Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The date to retrieve InventoryItemStatus
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date to retrieve InventoryItemStatus", IsRequired=true)]
        public virtual DateTime Date { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/{ScopeId}/bySku/{Sku}/byLocation/{InventoryLocationId}", "GET")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="No inventory schedules was found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetInventoryItemBySkuAndLocationRequest
        : ScopedRequest, IReturn<InventoryItemStatusDetails>, IGet
    {
        ///<summary>
        ///business id for the inventory location which will be associated to the Sku to retrieve InventoryItem
        ///</summary>
        [DataMember]
        [ApiMember(Description="business id for the inventory location which will be associated to the Sku to retrieve InventoryItem")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///Sku which will be associated to the InventoryLocationId to retrieve InventoryItem
        ///</summary>
        [DataMember]
        [ApiMember(Description="Sku which will be associated to the InventoryLocationId to retrieve InventoryItem")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The date for which the status will be computed. If is default, DateTime.Now will be used.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date for which the status will be computed. If is default, DateTime.Now will be used.")]
        public virtual DateTime Date { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/{ScopeId}/byLocation/{InventoryLocationId}", "GET")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetInventoryItemsByLocationRequest
        : ScopedRequest, IReturn<List<InventoryItem>>, IGet
    {
        ///<summary>
        ///business id for the inventory location which will be associated to the Sku to retrieve InventoryItem
        ///</summary>
        [DataMember]
        [ApiMember(Description="business id for the inventory location which will be associated to the Sku to retrieve InventoryItem")]
        public virtual string InventoryLocationId { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/{ScopeId}/bySku/{Sku}", "GET")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="No inventory items was found for this sku", StatusCode=404)]
    [DataContract]
    public partial class GetInventoryItemsByScopeAndSkuRequest
        : ScopedRequest, IReturn<InventoryItemStatusDetailsQueryResult>, IGet
    {
        ///<summary>
        ///Sku which will be associated to the InventoryLocationId to retrieve InventoryItem
        ///</summary>
        [DataMember]
        [ApiMember(Description="Sku which will be associated to the InventoryLocationId to retrieve InventoryItem")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///Whether inventory locations from child scopes should also be included in the results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether inventory locations from child scopes should also be included in the results.")]
        public virtual bool IncludeChildScopes { get; set; }

        ///<summary>
        ///The starting index
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting index")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The maximum items returned by the search query, default to 50
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum items returned by the search query, default to 50")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///the sort order field.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sort order field.")]
        public virtual SortInventoryItems SortOrderField { get; set; }

        ///<summary>
        ///The sort direction. (Ascending or descending)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sort direction. (Ascending or descending)")]
        public virtual SortDirection SortDirection { get; set; }

        ///<summary>
        ///The date which will be used to compute the status. If is not set, DateTime.Now will be used.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date which will be used to compute the status. If is not set, DateTime.Now will be used.")]
        public virtual DateTime Date { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/{ScopeId}/bySkus", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="No inventory items was found for given SKUs", StatusCode=404)]
    [DataContract]
    public partial class GetInventoryItemsByScopeAndSkusRequest
        : ScopedRequest, IReturn<InventoryItemStatusDetailsQueryResult>, IPost
    {
        public GetInventoryItemsByScopeAndSkusRequest()
        {
            Skus = new List<string>{};
        }

        ///<summary>
        ///SKUs which will be associated to the InventoryLocationId to retrieve inventory items
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="SKUs which will be associated to the InventoryLocationId to retrieve inventory items")]
        public virtual List<string> Skus { get; set; }

        ///<summary>
        ///Whether inventory locations from child scopes should also be included in the results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether inventory locations from child scopes should also be included in the results.")]
        public virtual bool IncludeChildScopes { get; set; }

        ///<summary>
        ///The starting index
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting index")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The maximum items returned by the search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum items returned by the search query")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///the sort order field.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sort order field.")]
        public virtual SortInventoryItems SortOrderField { get; set; }

        ///<summary>
        ///The sort direction. (Ascending or descending)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The sort direction. (Ascending or descending)")]
        public virtual SortDirection SortDirection { get; set; }

        ///<summary>
        ///The date which will be used to compute the status. If is not set, DateTime.Now will be used.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date which will be used to compute the status. If is not set, DateTime.Now will be used.")]
        public virtual DateTime Date { get; set; }
    }

    ///<summary>
    ///Inventory locations are places which manage inventory.
    ///</summary>
    [Route("/inventoryLocations/{ScopeId}/{AssociatedLocationId}", "GET")]
    [Api(Description="Inventory locations are places which manage inventory.")]
    [ApiResponse(Description="The inventory location was not found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetInventoryLocationRequest
        : ScopedRequest, IReturn<InventoryLocation>, IGet
    {
        ///<summary>
        ///the business id for the inventory location to retrieve
        ///</summary>
        [DataMember]
        [ApiMember(Description="the business id for the inventory location to retrieve")]
        public virtual string AssociatedLocationId { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/{ScopeId}/findProviders", "GET")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="No inventory providers was found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetInventoryProvidersRequest
        : ScopedRequest, IReturn<List<InventoryProviderDetails>>, IGet
    {
        ///<summary>
        ///The culture name in which language that data will be returned
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The culture name in which language that data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Inventory locations are places which manage inventory.
    ///</summary>
    [Route("/inventoryLocations/{InventoryLocationId}/schedules/byId/{ScheduleId}", "GET")]
    [Api(Description="Inventory locations are places which manage inventory.")]
    [ApiResponse(Description="No inventory schedule associated to the inventory location was found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetInventoryScheduleByIdRequest
        : ScopedRequest, IReturn<InventorySchedule>, IGet
    {
        ///<summary>
        ///the business id for the inventory location which schedules to retrieve
        ///</summary>
        [DataMember]
        [ApiMember(Description="the business id for the inventory location which schedules to retrieve")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///the id of the schedule to retrieve
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the schedule to retrieve")]
        public virtual Guid ScheduleId { get; set; }
    }

    ///<summary>
    ///Inventory locations are places which manage inventory.
    ///</summary>
    [Route("/inventoryLocations/{InventoryLocationId}/schedules/bySku/{Sku}", "GET")]
    [Api(Description="Inventory locations are places which manage inventory.")]
    [ApiResponse(Description="No inventory schedule associated to the inventory location was found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetInventorySchedulesBySkuRequest
        : ScopedRequest, IReturn<List<InventorySchedule>>, IGet
    {
        ///<summary>
        ///the business id for the inventory location which schedules to retrieve
        ///</summary>
        [DataMember]
        [ApiMember(Description="the business id for the inventory location which schedules to retrieve")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///the sku for the product which schedules to retrieve
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sku for the product which schedules to retrieve")]
        public virtual string Sku { get; set; }
    }

    ///<summary>
    ///Inventory locations are places which manage inventory.
    ///</summary>
    [Route("/inventoryLocations/{InventoryLocationId}/schedules", "GET")]
    [Api(Description="Inventory locations are places which manage inventory.")]
    [ApiResponse(Description="No inventory schedule associated to the inventory location was found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetInventorySchedulesRequest
        : ScopedRequest, IReturn<List<InventorySchedule>>, IGet
    {
        ///<summary>
        ///the business id for the inventory location which schedules to retrieve
        ///</summary>
        [DataMember]
        [ApiMember(Description="the business id for the inventory location which schedules to retrieve")]
        public virtual string InventoryLocationId { get; set; }
    }

    ///<summary>
    ///Integration resources dedicated to data exchanges across system boundaries or other systems.
    ///</summary>
    [Route("/integration/inventoryItems/import", "POST")]
    [Api(Description="Integration resources dedicated to data exchanges across system boundaries or other systems.")]
    [ApiResponse(Description="The task could not be launched.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ImportInventoryItemsRequest
        : IReturn<TaskInfo>, IPost
    {
        ///<summary>
        ///the task id. Use this to query the system for the state of the task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the task id. Use this to query the system for the state of the task.")]
        public virtual Guid TaskId { get; set; }

        ///<summary>
        ///the path of the file(s) to import
        ///</summary>
        [DataMember]
        [ApiMember(Description="the path of the file(s) to import")]
        public virtual string Path { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }

        ///<summary>
        ///Indicates to ignore or not the reserved Items.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates to ignore or not the reserved Items.")]
        public virtual bool IgnoreReservedItems { get; set; }

        ///<summary>
        ///Indicates whether or not to ignore the value of the SafetyStock attribute of each inventory item in the imported file.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether or not to ignore the value of the SafetyStock attribute of each inventory item in the imported file.")]
        public virtual bool IgnoreSafetyStock { get; set; }
    }

    ///<summary>
    ///Inventory items are a combination of InventoryQuantity and InventorySchedules.
    ///</summary>
    [Route("/inventoryItems/{ScopeId}/bySku/{Sku}/byLocation/{InventoryLocationId}/increase/{Quantity}", "POST")]
    [Api(Description="Inventory items are a combination of InventoryQuantity and InventorySchedules.")]
    [ApiResponse(Description="The inventory quantity was not found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class IncreaseInventoryQuantityRequest
        : ScopedRequest, IReturn<InventoryQuantity>, IPost
    {
        ///<summary>
        ///The inventory location identifier used to identify the right inventory to update
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier used to identify the right inventory to update")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The associated product sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="The associated product sku")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The quantity to add in the inventory
        ///</summary>
        [DataMember]
        [ApiMember(Description="The quantity to add in the inventory")]
        public virtual double Quantity { get; set; }
    }

    ///<summary>
    ///Inventory locations are places which manage inventory.
    ///</summary>
    [Route("/inventoryLocations/{InventoryLocationId}/schedules", "PUT")]
    [Api(Description="Inventory locations are places which manage inventory.")]
    [ApiResponse(Description="The inventory schedule was not found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateInventoryScheduleRequest
        : ScopedRequest, IReturn<InventorySchedule>, IPut
    {
        ///<summary>
        ///The inventory schedule identifier used to find the right schedule to update
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory schedule identifier used to find the right schedule to update")]
        public virtual Guid ScheduleId { get; set; }

        ///<summary>
        ///The inventory location identifier used to identify the right schedule to update
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory location identifier used to identify the right schedule to update")]
        public virtual string InventoryLocationId { get; set; }

        ///<summary>
        ///The associated product sku
        ///</summary>
        [DataMember]
        [ApiMember(Description="The associated product sku")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///The date range of the schedule
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date range of the schedule")]
        public virtual DateRange DateRange { get; set; }

        ///<summary>
        ///The status of product inventory
        ///</summary>
        [DataMember]
        [ApiMember(Description="The status of product inventory")]
        public virtual InventoryStatus InventoryStatus { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Providers
{

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/carrier", "POST")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateCarrierProviderRequest
        : ScopedRequest, IReturn<FulfillmentCarrierProvider>, IPost
    {
        ///<summary>
        ///The payment carrier unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment carrier unique identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The carrier provider name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier provider name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The carrier provider display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier provider display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The carrier provider description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier provider description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///A value indicating whether this carrier provider is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this carrier provider is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The carrier provider implementation type name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier provider implementation type name.")]
        public virtual string ImplementationTypeName { get; set; }

        ///<summary>
        ///The carrier provider custom configurations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier provider custom configurations.")]
        public virtual PropertyBag Values { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/fulfillment", "POST")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateFulfillmentProviderRequest
        : ScopedRequest, IReturn<FulfillmentProvider>, IPost
    {
        ///<summary>
        ///The payment fulfillment unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment fulfillment unique identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The fulfillment provider name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment provider name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The fulfillment provider display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment provider display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The fulfillment provider description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment provider description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///A value indicating whether this fulfillment provider is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this fulfillment provider is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The fulfillment provider implementation type name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment provider implementation type name.")]
        public virtual string ImplementationTypeName { get; set; }

        ///<summary>
        ///The fulfillment provider custom configurations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment provider custom configurations.")]
        public virtual PropertyBag Values { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/payment/{ProviderId}/storesSettings/{StoreId}", "PUT")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateOrUpdatePaymentProviderStoreSettingsRequest
        : ScopedRequest, IReturn<ProviderStoreSettings>, IPut
    {
        ///<summary>
        ///The payment provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider unique identifier.", IsRequired=true)]
        public virtual Guid ProviderId { get; set; }

        ///<summary>
        ///The store unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store unique identifier.", IsRequired=true)]
        public virtual Guid StoreId { get; set; }

        ///<summary>
        ///The custom settings for the store.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The custom settings for the store.")]
        public virtual PropertyBag Values { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/payment", "POST")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreatePaymentProviderRequest
        : ScopedRequest, IReturn<PaymentProvider>, IPost
    {
        ///<summary>
        ///The payment provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider unique identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The payment provider name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The payment provider display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The payment provider description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///A value indicating whether this payment provider is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this payment provider is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The payment provider implementation type name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider implementation type name.")]
        public virtual string ImplementationTypeName { get; set; }

        ///<summary>
        ///The payment provider custom configurations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider custom configurations.")]
        public virtual PropertyBag Values { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/routing", "POST")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateRoutingProviderRequest
        : ScopedRequest, IReturn<FulfillmentRoutingProvider>, IPost
    {
        ///<summary>
        ///The payment routing unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment routing unique identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The routing provider name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The routing provider name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The routing provider display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The routing provider display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The routing provider description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The routing provider description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///A value indicating whether this routing provider is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this routing provider is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The routing provider implementation type name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The routing provider implementation type name.")]
        public virtual string ImplementationTypeName { get; set; }

        ///<summary>
        ///The routing provider custom configurations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The routing provider custom configurations.")]
        public virtual PropertyBag Values { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/tax", "POST")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateTaxProviderRequest
        : ScopedRequest, IReturn<TaxProvider>, IPost
    {
        ///<summary>
        ///The payment tax unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment tax unique identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The tax provider name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax provider name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The tax provider display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax provider display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The tax provider description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax provider description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///A value indicating whether this tax provider is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this tax provider is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The tax provider implementation type name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax provider implementation type name.")]
        public virtual string ImplementationTypeName { get; set; }

        ///<summary>
        ///The tax provider custom configurations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax provider custom configurations.")]
        public virtual PropertyBag Values { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/carrier/{Id}", "DELETE")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteCarrierProviderRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///the unique identifier for the carrier provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier for the carrier provider", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/fulfillment/{Id}", "DELETE")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteFulfillmentProviderRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///the unique identifier for the fulfillment provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier for the fulfillment provider", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/payment/{Id}", "DELETE")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeletePaymentProviderRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///the unique identifier for the payment provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier for the payment provider", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/routing/{Id}", "DELETE")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteRoutingProviderRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///the unique identifier for the routing provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier for the routing provider", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/tax/{Id}", "DELETE")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteTaxProviderRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///the unique identifier for the tax provider
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique identifier for the tax provider", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    [DataContract]
    public partial class FindPaymentProviderStoresSettingsQueryResult
        : QueryResult<ProviderStoreSettings>
    {
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/payment/{Id}/storesSettings/find", "POST")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindPaymentProviderStoresSettingsRequest
        : QueryRequestBase, IReturn<FindPaymentProviderStoresSettingsQueryResult>, IPost
    {
        ///<summary>
        ///The payment provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider unique identifier.", IsRequired=true)]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The phrase to which to search in a text field containing all the information of the store. Uses a startsWith operation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The phrase to which to search in a text field containing all the information of the store. Uses a startsWith operation.")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        ///Determines whether only the overridden stores are returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determines whether only the overridden stores are returned.")]
        public virtual bool OnlyOverridden { get; set; }

        ///<summary>
        ///A value indicating whether inactive stores should be included.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether inactive stores should be included.")]
        public virtual bool IncludeInactive { get; set; }

        ///<summary>
        ///A value indicating whether the stores' settings are included.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the stores' settings are included.")]
        public virtual bool IncludeStoresSettings { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/carrier/{Id}", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="Requested provider not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCarrierProviderByIdRequest
        : ScopedRequest, IReturn<FulfillmentCarrierProvider>, IGet
    {
        ///<summary>
        ///The carrier provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier provider unique identifier.", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/carrier/metadata", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCarrierProvidersMetadataRequest
        : IReturn<ProvidersMetadata>, IGet
    {
        ///<summary>
        ///The metadata culture name. (defaults to server's culture)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The metadata culture name. (defaults to server's culture)")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/carrier", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetCarrierProvidersRequest
        : ScopedRequest, IReturn<GetCarrierProvidersResponse>, IGet
    {
        ///<summary>
        ///Determines whether parent scopes are included.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determines whether parent scopes are included.")]
        public virtual bool IncludeParentScopes { get; set; }

        ///<summary>
        ///A value indicating whether inactive carrier providers should be included.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether inactive carrier providers should be included.")]
        public virtual bool IncludeInactive { get; set; }
    }

    [DataContract]
    public partial class GetCarrierProvidersResponse
    {
        public GetCarrierProvidersResponse()
        {
            FulfillmentCarrierProviders = new List<FulfillmentCarrierProvider>{};
        }

        ///<summary>
        ///The list of fulfillment carrier providers.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of fulfillment carrier providers.")]
        public virtual List<FulfillmentCarrierProvider> FulfillmentCarrierProviders { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/fulfillment/{Id}", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="Requested provider not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentProviderByIdRequest
        : ScopedRequest, IReturn<FulfillmentProvider>, IGet
    {
        ///<summary>
        ///The fulfillment provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment provider unique identifier.", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/fulfillment/metadata", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentProvidersMetadataRequest
        : IReturn<ProvidersMetadata>, IGet
    {
        ///<summary>
        ///The metadata culture name. (defaults to server's culture)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The metadata culture name. (defaults to server's culture)")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/fulfillment", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentProvidersRequest
        : ScopedRequest, IReturn<GetFulfillmentProvidersResponse>, IGet
    {
        ///<summary>
        ///A value indicating whether to consider parent scopes when retrieving fulfillment provider infos.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether to consider parent scopes when retrieving fulfillment provider infos.")]
        public virtual bool IncludeParentScopes { get; set; }

        ///<summary>
        ///A value indicating whether inactive fulfillment providers should be included.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether inactive fulfillment providers should be included.")]
        public virtual bool IncludeInactive { get; set; }
    }

    [DataContract]
    public partial class GetFulfillmentProvidersResponse
    {
        public GetFulfillmentProvidersResponse()
        {
            FulfillmentProviders = new List<FulfillmentProvider>{};
        }

        ///<summary>
        ///The list of fulfillment providers.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of fulfillment providers.")]
        public virtual List<FulfillmentProvider> FulfillmentProviders { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/payment/{Id}", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="Requested provider not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetPaymentProviderByIdRequest
        : ScopedRequest, IReturn<PaymentProvider>, IGet
    {
        ///<summary>
        ///The payment provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider unique identifier.", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/payment/metadata", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetPaymentProvidersMetadataRequest
        : IReturn<ProvidersMetadata>, IGet
    {
        ///<summary>
        ///The metadata culture name. (defaults to server's culture)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The metadata culture name. (defaults to server's culture)")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/payment", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetPaymentProvidersRequest
        : ScopedRequest, IReturn<GetPaymentProvidersResponse>, IGet
    {
        ///<summary>
        ///A value indicating providers in parent scopes should be included.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating providers in parent scopes should be included.")]
        public virtual bool IncludeParentScopes { get; set; }

        ///<summary>
        ///A value indicating whether inactive payment providers should be included.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether inactive payment providers should be included.")]
        public virtual bool IncludeInactive { get; set; }
    }

    [DataContract]
    public partial class GetPaymentProvidersResponse
    {
        public GetPaymentProvidersResponse()
        {
            PaymentProviders = new List<PaymentProvider>{};
        }

        ///<summary>
        ///The list of payment providers.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of payment providers.")]
        public virtual List<PaymentProvider> PaymentProviders { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/payment/{ProviderId}/storesSettings/{StoreId}", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetPaymentProviderStoreSettingsRequest
        : ScopedRequest, IReturn<ProviderStoreSettings>, IGet
    {
        ///<summary>
        ///The payment provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider unique identifier.", IsRequired=true)]
        public virtual Guid ProviderId { get; set; }

        ///<summary>
        ///The store unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store unique identifier.", IsRequired=true)]
        public virtual Guid StoreId { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/types", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [DataContract]
    public partial class GetProvidersRequest
        : ScopedRequest, IReturn<GetProvidersResponse>, IGet
    {
        ///<summary>
        ///Type of this provider: ['Undefined' or 'StoreLocator' or 'Geolocation' or 'PrintOrder' or 'PrintShipment' or 'OrderProcessing' or 'Shipping' or 'Payment' or 'Tax' or 'Rounding' or 'TargetingContext' or 'OrderNumberGenerator' or 'RmaNumberGenerator' or 'DigitalAssetManagement' or 'DirectoryProvider' or 'MembershipProvider' or 'Inventory' or 'Audit' or 'SlotInstance' or 'PriceCalculator' or 'SearchPriceCalculator' or 'Search' or 'BlobStorage' or 'ShipmentProcessingDate' or 'ProductImportParser' or 'DataExchange' or 'ProductDataExchangeImport' or 'ProductDataExchangeExport' or 'ProductPriceDataExchangeImport' or 'ProductPriceDataExchangeExport' or 'MailProvider' or 'NotificationProvider' or 'OrderImportParser' or 'PromotionLineItemValidator' or 'PickingMissionNumberGenerator' or 'FulfillmentCarrier' or 'FulfillmentRouting']  // Note: 'Undefined' retrieves all providers.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Type of this provider: ['Undefined' or 'StoreLocator' or 'Geolocation' or 'PrintOrder' or 'PrintShipment' or 'OrderProcessing' or 'Shipping' or 'Payment' or 'Tax' or 'Rounding' or 'TargetingContext' or 'OrderNumberGenerator' or 'RmaNumberGenerator' or 'DigitalAssetManagement' or 'DirectoryProvider' or 'MembershipProvider' or 'Inventory' or 'Audit' or 'SlotInstance' or 'PriceCalculator' or 'SearchPriceCalculator' or 'Search' or 'BlobStorage' or 'ShipmentProcessingDate' or 'ProductImportParser' or 'DataExchange' or 'ProductDataExchangeImport' or 'ProductDataExchangeExport' or 'ProductPriceDataExchangeImport' or 'ProductPriceDataExchangeExport' or 'MailProvider' or 'NotificationProvider' or 'OrderImportParser' or 'PromotionLineItemValidator' or 'PickingMissionNumberGenerator' or 'FulfillmentCarrier' or 'FulfillmentRouting']  // Note: 'Undefined' retrieves all providers.")]
        public virtual ProviderType ProviderType { get; set; }

        ///<summary>
        ///Determine if parent scopes are considered when retrieving providers.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determine if parent scopes are considered when retrieving providers.")]
        public virtual bool IncludeParentScopes { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/routing/{Id}", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="Requested provider not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetRoutingProviderByIdRequest
        : ScopedRequest, IReturn<FulfillmentRoutingProvider>, IGet
    {
        ///<summary>
        ///The routing provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The routing provider unique identifier.", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/routing/metadata", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetRoutingProvidersMetadataRequest
        : IReturn<ProvidersMetadata>, IGet
    {
        ///<summary>
        ///The metadata culture name. (defaults to server's culture)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The metadata culture name. (defaults to server's culture)")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/routing", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetRoutingProvidersRequest
        : ScopedRequest, IReturn<GetRoutingProvidersResponse>, IGet
    {
        ///<summary>
        ///A value indicating providers in parent scopes should be included.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating providers in parent scopes should be included.")]
        public virtual bool IncludeParentScopes { get; set; }

        ///<summary>
        ///A value indicating whether inactive routing providers should be included.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether inactive routing providers should be included.")]
        public virtual bool IncludeInactive { get; set; }
    }

    [DataContract]
    public partial class GetRoutingProvidersResponse
    {
        public GetRoutingProvidersResponse()
        {
            FulfillmentRoutingProviders = new List<FulfillmentRoutingProvider>{};
        }

        ///<summary>
        ///The list of fulfillment routing providers.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of fulfillment routing providers.")]
        public virtual List<FulfillmentRoutingProvider> FulfillmentRoutingProviders { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/tax/{Id}", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="Requested provider not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetTaxProviderByIdRequest
        : ScopedRequest, IReturn<TaxProvider>, IGet
    {
        ///<summary>
        ///The tax provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax provider unique identifier.", IsRequired=true)]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/tax/metadata", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetTaxProvidersMetadataRequest
        : IReturn<ProvidersMetadata>, IGet
    {
        ///<summary>
        ///The metadata culture name. (defaults to server's culture)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The metadata culture name. (defaults to server's culture)")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/tax", "GET")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetTaxProvidersRequest
        : ScopedRequest, IReturn<GetTaxProvidersResponse>, IGet
    {
        ///<summary>
        ///A value indicating providers in parent scopes should be included.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating providers in parent scopes should be included.")]
        public virtual bool IncludeParentScopes { get; set; }

        ///<summary>
        ///A value indicating whether inactive tax providers should be included.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether inactive tax providers should be included.")]
        public virtual bool IncludeInactive { get; set; }
    }

    [DataContract]
    public partial class GetTaxProvidersResponse
    {
        public GetTaxProvidersResponse()
        {
            TaxProviders = new List<TaxProvider>{};
        }

        ///<summary>
        ///The list of tax providers.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of tax providers.")]
        public virtual List<TaxProvider> TaxProviders { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/payment/{ProviderId}/storesSettings/{StoreId}", "DELETE")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ResetPaymentProviderStoreSettingsRequest
        : ScopedRequest, IReturn<ProviderStoreSettings>, IDelete
    {
        ///<summary>
        ///The payment provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider unique identifier.", IsRequired=true)]
        public virtual Guid ProviderId { get; set; }

        ///<summary>
        ///The store unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The store unique identifier.", IsRequired=true)]
        public virtual Guid StoreId { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/carrier/{Id}", "PUT")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateCarrierProviderRequest
        : ScopedRequest, IReturn<FulfillmentCarrierProvider>, IPut
    {
        ///<summary>
        ///The carrier provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier provider unique identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The carrier provider name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier provider name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The carrier provider display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier provider display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The carrier provider description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier provider description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///A value indicating whether this carrier provider is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this carrier provider is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The carrier provider custom configurations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The carrier provider custom configurations.")]
        public virtual PropertyBag Values { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/fulfillment/{Id}", "PUT")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateFulfillmentProviderRequest
        : ScopedRequest, IReturn<FulfillmentProvider>, IPut
    {
        ///<summary>
        ///The fulfillment provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment provider unique identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The fulfillment provider name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment provider name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The fulfillment provider display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment provider display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The fulfillment provider description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment provider description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///A value indicating whether this fulfillment provider is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this fulfillment provider is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The fulfillment provider custom configurations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The fulfillment provider custom configurations.")]
        public virtual PropertyBag Values { get; set; }

        ///<summary>
        ///The tax category to use for calculating taxes on fulfillment costs.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax category to use for calculating taxes on fulfillment costs.")]
        public virtual Guid TaxCategoryId { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/payment/{Id}", "PUT")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdatePaymentProviderRequest
        : ScopedRequest, IReturn<PaymentProvider>, IPut
    {
        ///<summary>
        ///The payment provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider unique identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The payment provider name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The payment provider display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The payment provider description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///A value indicating whether this payment provider is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this payment provider is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The payment provider custom configurations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The payment provider custom configurations.")]
        public virtual PropertyBag Values { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/routing/{Id}", "PUT")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateRoutingProviderRequest
        : ScopedRequest, IReturn<FulfillmentRoutingProvider>, IPut
    {
        ///<summary>
        ///The routing provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The routing provider unique identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The routing provider name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The routing provider name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The routing provider display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The routing provider display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The routing provider description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The routing provider description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///A value indicating whether this routing provider is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this routing provider is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The routing provider custom configurations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The routing provider custom configurations.")]
        public virtual PropertyBag Values { get; set; }
    }

    ///<summary>
    ///Providers are generic entities containing configuration settings for various need.
    ///</summary>
    [Route("/providers/{ScopeId}/tax/{Id}", "PUT")]
    [Api(Description="Providers are generic entities containing configuration settings for various need.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateTaxProviderRequest
        : ScopedRequest, IReturn<TaxProvider>, IPut
    {
        ///<summary>
        ///The tax provider unique identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax provider unique identifier.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The tax provider name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax provider name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The tax provider display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax provider display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The tax provider description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax provider description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///A value indicating whether this tax provider is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this tax provider is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///The tax provider custom configurations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax provider custom configurations.")]
        public virtual PropertyBag Values { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.RecurringOrders
{

    ///<summary>
    ///Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.
    ///</summary>
    [Route("/recurringOrders/{ScopeId}/lineItems/forCustomer", "PUT")]
    [Route("/recurringOrders/{ScopeId}/lineItems/forCustomer/{CustomerId}", "PUT")]
    [Api(Description="Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.")]
    [DataContract]
    public partial class AddOrUpdateRecurringOrderLineItemsRequest
        : IReturn<ListOfRecurringOrderLineItems>, IPut
    {
        public AddOrUpdateRecurringOrderLineItemsRequest()
        {
            LineItems = new List<RecurringOrderLineItem>{};
        }

        ///<summary>
        ///The scope of the recurring order line item
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope of the recurring order line item", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The customer id of the recurring order line items
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer id of the recurring order line items", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The list of line items to update
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of line items to update", IsRequired=true)]
        public virtual List<RecurringOrderLineItem> LineItems { get; set; }

        ///<summary>
        ///A value indicating whether the values from the RecurringOrderLineItem will be applied to the recurring carts as well.  New values will always be added to a recurring cart.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether the values from the RecurringOrderLineItem will be applied to the recurring carts as well.  New values will always be added to a recurring cart.", IsRequired=true)]
        public virtual bool MustApplyUpdatesToRecurringCart { get; set; }
    }

    ///<summary>
    ///Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.
    ///</summary>
    [Route("/recurringOrders/programs", "POST")]
    [Api(Description="Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.")]
    [DataContract]
    public partial class CreateRecurringOrderProgramRequest
        : RecurringOrderProgramBaseRequest, IReturn<RecurringOrderProgram>, IPost
    {
    }

    ///<summary>
    ///Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.
    ///</summary>
    [Route("/recurringOrders/{ScopeId}/carts/lineItems", "DELETE")]
    [Route("/recurringOrders/{ScopeId}/carts/{CustomerId}/lineItems", "DELETE")]
    [Api(Description="Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.")]
    [DataContract]
    public partial class DeleteRecurringCartLineItemsRequest
        : IReturnVoid, IDelete
    {
        public DeleteRecurringCartLineItemsRequest()
        {
            LineItemIds = new List<Guid>{};
        }

        ///<summary>
        ///The list of line item ids to delete
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of line item ids to delete", IsRequired=true)]
        public virtual List<Guid> LineItemIds { get; set; }

        ///<summary>
        ///The customer id of the recurring order line items
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer id of the recurring order line items", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The scope of the RecurringOrderLineItems to delete
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope of the RecurringOrderLineItems to delete", IsRequired=true)]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.
    ///</summary>
    [Route("/recurringOrders/{ScopeId}/lineItems", "DELETE")]
    [Route("/recurringOrders/{ScopeId}/{CustomerId}/lineItems", "DELETE")]
    [Api(Description="Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.")]
    [DataContract]
    public partial class DeleteRecurringOrderLineItemsRequest
        : IReturnVoid, IDelete
    {
        public DeleteRecurringOrderLineItemsRequest()
        {
            RecurringOrderLineItemIds = new List<Guid>{};
        }

        ///<summary>
        ///The list of recurring order line item ids to delete
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of recurring order line item ids to delete", IsRequired=true)]
        public virtual List<Guid> RecurringOrderLineItemIds { get; set; }

        ///<summary>
        ///The customer id of the recurring order line items to delete
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer id of the recurring order line items to delete", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The scope of the RecurringOrderLineItems to delete
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope of the RecurringOrderLineItems to delete", IsRequired=true)]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.
    ///</summary>
    [Route("/recurringOrders/programs/{RecurringOrderProgramName}", "DELETE")]
    [Api(Description="Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.")]
    [DataContract]
    public partial class DeleteRecurringOrderProgramRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The unique identifier of the recurring order program to delete
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the recurring order program to delete", IsRequired=true)]
        public virtual string RecurringOrderProgramName { get; set; }
    }

    ///<summary>
    ///Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.
    ///</summary>
    [Route("/recurringOrders/{ScopeId}/lineItems/{RecurringOrderLineItemId}", "GET")]
    [Api(Description="Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.")]
    [DataContract]
    public partial class GetRecurringOrderLineItemRequest
        : IReturn<RecurringOrderLineItem>, IGet
    {
        ///<summary>
        ///The recurring order line item id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The recurring order line item id", IsRequired=true)]
        public virtual Guid RecurringOrderLineItemId { get; set; }

        ///<summary>
        ///The scope of the RecurringOrderLineItem to get
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope of the RecurringOrderLineItem to get", IsRequired=true)]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.
    ///</summary>
    [Route("/recurringOrders/{ScopeId}/lineItems/byCustomer", "GET")]
    [Route("/recurringOrders/{ScopeId}/lineItems/byCustomer/{CustomerId}", "GET")]
    [Api(Description="Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.")]
    [DataContract]
    public partial class GetRecurringOrderLineItemsForCustomerRequest
        : IReturn<ListOfRecurringOrderLineItems>, IGet
    {
        ///<summary>
        ///The customer id of the RecurringOrderLineItems to get
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer id of the RecurringOrderLineItems to get", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The scope of the RecurringOrderLineItems to get
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope of the RecurringOrderLineItems to get", IsRequired=true)]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.
    ///</summary>
    [Route("/recurringOrders/programs/{RecurringOrderProgramName}", "GET")]
    [Api(Description="Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.")]
    [DataContract]
    public partial class GetRecurringOrderProgramRequest
        : IReturn<RecurringOrderProgram>, IGet
    {
        ///<summary>
        ///The unique identifier of the recurring order program to get
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the recurring order program to get", IsRequired=true)]
        public virtual string RecurringOrderProgramName { get; set; }
    }

    ///<summary>
    ///Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.
    ///</summary>
    [Route("/recurringOrders/programs/byScope/{ScopeId}", "GET")]
    [Api(Description="Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.")]
    [DataContract]
    public partial class GetRecurringOrderProgramsByScopeIdRequest
        : IReturn<ListOfRecurringOrderPrograms>, IGet
    {
        ///<summary>
        ///The scope of the recurring order programs to get
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope of the recurring order programs to get", IsRequired=true)]
        public virtual string ScopeId { get; set; }
    }

    public partial class ListOfRecurringOrderLineItems
    {
        public ListOfRecurringOrderLineItems()
        {
            RecurringOrderLineItems = new List<RecurringOrderLineItem>{};
        }

        public virtual List<RecurringOrderLineItem> RecurringOrderLineItems { get; set; }
    }

    public partial class ListOfRecurringOrderPrograms
    {
        public ListOfRecurringOrderPrograms()
        {
            RecurringOrderPrograms = new List<RecurringOrderProgram>{};
        }

        public virtual List<RecurringOrderProgram> RecurringOrderPrograms { get; set; }
    }

    [DataContract]
    public partial class RecurringOrderProgramBaseRequest
    {
        public RecurringOrderProgramBaseRequest()
        {
            Localizations = new List<RecurringOrderProgramLocalize>{};
            ScopeIds = new List<string>{};
            Frequencies = new List<RecurringOrderFrequency>{};
        }

        ///<summary>
        ///The name and unique identifier of the recurring order program
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name and unique identifier of the recurring order program", IsRequired=true)]
        public virtual string RecurringOrderProgramName { get; set; }

        ///<summary>
        ///The localized name of the recurring order program
        ///</summary>
        [DataMember]
        [ApiMember(Description="The localized name of the recurring order program")]
        public virtual List<RecurringOrderProgramLocalize> Localizations { get; set; }

        ///<summary>
        ///The scope ids which are associated to the recurring order program
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope ids which are associated to the recurring order program")]
        public virtual List<string> ScopeIds { get; set; }

        ///<summary>
        ///The frequencies of the recurring order program
        ///</summary>
        [DataMember]
        [ApiMember(Description="The frequencies of the recurring order program")]
        public virtual List<RecurringOrderFrequency> Frequencies { get; set; }
    }

    ///<summary>
    ///Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.
    ///</summary>
    [Route("/recurringOrders/{ScopeId}/cart/{CartName}/reschedule", "PUT")]
    [Api(Description="Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.")]
    [DataContract]
    public partial class RescheduleRecurringCartRequest
        : IReturn<ListOfRecurringOrderLineItems>, IPut
    {
        ///<summary>
        ///The scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The customer id of the recurring order line items
        ///</summary>
        [DataMember]
        [ApiMember(Description="The customer id of the recurring order line items", IsRequired=true)]
        public virtual Guid CustomerId { get; set; }

        ///<summary>
        ///The name of the cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the cart", IsRequired=true)]
        public virtual string CartName { get; set; }

        ///<summary>
        ///The date when the order will be created
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date when the order will be created", IsRequired=true)]
        public virtual DateTime NextOccurence { get; set; }
    }

    ///<summary>
    ///Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.
    ///</summary>
    [Route("/recurringOrders/programs/{RecurringOrderProgramName}", "PUT")]
    [Api(Description="Recurring orders are orders that are created automatically by the system based on a schedule defined by the customer.")]
    [DataContract]
    public partial class UpdateRecurringOrderProgramRequest
        : RecurringOrderProgramBaseRequest, IReturn<RecurringOrderProgram>, IPut
    {
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Relationships
{

    ///<summary>
    ///The API used to handle Relationships between entities.
    ///</summary>
    [Route("/relationships/{ScopeId}/{EntityType}/{EntityId}", "DELETE")]
    [Api(Description="The API used to handle Relationships between entities.")]
    [DataContract]
    public partial class ClearRelationshipsRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///the entity identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="the entity identifier")]
        public virtual string EntityId { get; set; }

        ///<summary>
        ///the parent identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="the parent identifier")]
        public virtual string ParentId { get; set; }

        ///<summary>
        ///the type of the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of the entity")]
        public virtual RelationshipEntityType EntityType { get; set; }
    }

    ///<summary>
    ///The API used to handle Relationships between entities.
    ///</summary>
    [Route("/relationships/v2/{ScopeId}/{EntityType}/{EntityId}", "DELETE")]
    [Api(Description="The API used to handle Relationships between entities.")]
    [DataContract]
    public partial class ClearRelationshipsV2Request
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///the entity identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="the entity identifier")]
        public virtual string EntityId { get; set; }

        ///<summary>
        ///This parameter should be specified when deleting a product variant. In this case this field will contain product's Id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="This parameter should be specified when deleting a product variant. In this case this field will contain product's Id.")]
        public virtual string ParentId { get; set; }

        ///<summary>
        ///The type of the entity whose relationship should be deleted. For deleting relationships of a product variant, 'Product' should be specified and ParentId should be set to Product Id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the entity whose relationship should be deleted. For deleting relationships of a product variant, 'Product' should be specified and ParentId should be set to Product Id.")]
        public virtual RelationshipEntityType EntityType { get; set; }
    }

    ///<summary>
    ///The API used to handle Relationships between entities.
    ///</summary>
    [Route("/relationships/{ScopeId}", "POST")]
    [Api(Description="The API used to handle Relationships between entities.")]
    [DataContract]
    public partial class CreateRelationshipsRequest
        : ScopedRequest, IReturn<CreateRelationshipsResult>, IPost
    {
        public CreateRelationshipsRequest()
        {
            Entities = new List<RelationshipEntity>{};
            RelatedEntities = new List<RelationshipEntity>{};
        }

        ///<summary>
        ///The MerchandiseType of the relationships. The type is based on the MerchandiseType Lookup. Contains the value of the lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The MerchandiseType of the relationships. The type is based on the MerchandiseType Lookup. Contains the value of the lookup")]
        public virtual string MerchandiseType { get; set; }

        ///<summary>
        ///Indicates whether the relationships to create should be mutual between the entities and the related entities
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the relationships to create should be mutual between the entities and the related entities")]
        public virtual bool Mutual { get; set; }

        ///<summary>
        ///Indicates the type of the entities
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the type of the entities")]
        public virtual RelationshipEntityType EntitiesType { get; set; }

        ///<summary>
        ///Indicates the entities to which the related entities are to be applied
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the entities to which the related entities are to be applied")]
        public virtual List<RelationshipEntity> Entities { get; set; }

        ///<summary>
        ///Indicates the type of the related entities
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the type of the related entities")]
        public virtual RelationshipEntityType RelatedEntitiesType { get; set; }

        ///<summary>
        ///Indicates the related entities which are to be applied to the entities
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the related entities which are to be applied to the entities")]
        public virtual List<RelationshipEntity> RelatedEntities { get; set; }
    }

    ///<summary>
    ///The API used to handle Relationships between entities.
    ///</summary>
    [Route("/relationships/v2/{ScopeId}", "POST")]
    [Api(Description="The API used to handle Relationships between entities.")]
    [DataContract]
    public partial class CreateRelationshipsV2Request
        : ScopedRequest, IReturn<CreateRelationshipsResult>, IPost
    {
        public CreateRelationshipsV2Request()
        {
            Entities = new List<RelationshipEntity>{};
            RelatedEntities = new List<RelationshipEntity>{};
        }

        ///<summary>
        ///The MerchandiseType of the relationships. The type is based on the MerchandiseType Lookup. Contains the value of the lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The MerchandiseType of the relationships. The type is based on the MerchandiseType Lookup. Contains the value of the lookup")]
        public virtual string MerchandiseType { get; set; }

        ///<summary>
        ///Indicates whether the relationships to create should be mutual between the entities and the related entities
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the relationships to create should be mutual between the entities and the related entities")]
        public virtual bool Mutual { get; set; }

        ///<summary>
        ///Indicates the type of the entities
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the type of the entities")]
        public virtual RelationshipEntityType EntitiesType { get; set; }

        ///<summary>
        ///Indicates the entities to which the related entities are to be applied
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the entities to which the related entities are to be applied")]
        public virtual List<RelationshipEntity> Entities { get; set; }

        ///<summary>
        ///Indicates the type of the related entities
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the type of the related entities")]
        public virtual RelationshipEntityType RelatedEntitiesType { get; set; }

        ///<summary>
        ///Indicates the related entities which are to be applied to the entities
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the related entities which are to be applied to the entities")]
        public virtual List<RelationshipEntity> RelatedEntities { get; set; }

        ///<summary>
        ///A qualifier for the Relationship. Flexible property that allows the consumer to enter custom information about the relationship
        ///</summary>
        [DataMember]
        [ApiMember(Description="A qualifier for the Relationship. Flexible property that allows the consumer to enter custom information about the relationship")]
        public virtual string Qualifier { get; set; }

        ///<summary>
        ///A quantity for the Relationship. For example, X has 7 items of the relation Y.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A quantity for the Relationship. For example, X has 7 items of the relation Y.")]
        public virtual int Count { get; set; }

        ///<summary>
        ///A general description of the Relationship. It is kept as a multilingual representation, allowing the display of a language friendly version of the description
        ///</summary>
        [DataMember]
        [ApiMember(Description="A general description of the Relationship. It is kept as a multilingual representation, allowing the display of a language friendly version of the description")]
        public virtual LocalizedString Description { get; set; }
    }

    ///<summary>
    ///The API used to handle Relationships between entities.
    ///</summary>
    [Route("/relationships/{ScopeId}/self", "POST")]
    [Api(Description="The API used to handle Relationships between entities.")]
    [DataContract]
    public partial class CreateSelfReferencingRelationshipsRequest
        : ScopedRequest, IReturn<CreateRelationshipsResult>, IPost
    {
        public CreateSelfReferencingRelationshipsRequest()
        {
            Entities = new List<RelationshipEntity>{};
        }

        ///<summary>
        ///The MerchandiseType of the relationships. The type is based on the MerchandiseType Lookup. Contains the value of the lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The MerchandiseType of the relationships. The type is based on the MerchandiseType Lookup. Contains the value of the lookup")]
        public virtual string MerchandiseType { get; set; }

        ///<summary>
        ///Indicates the type of the entities
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the type of the entities")]
        public virtual RelationshipEntityType EntitiesType { get; set; }

        ///<summary>
        ///Indicates the entities to which the relationships are to be applied
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the entities to which the relationships are to be applied")]
        public virtual List<RelationshipEntity> Entities { get; set; }
    }

    ///<summary>
    ///The API used to handle Relationships between entities.
    ///</summary>
    [Route("/relationships/v2/{ScopeId}/self", "POST")]
    [Api(Description="The API used to handle Relationships between entities.")]
    [DataContract]
    public partial class CreateSelfReferencingRelationshipsV2Request
        : ScopedRequest, IReturn<CreateRelationshipsResult>, IPost
    {
        public CreateSelfReferencingRelationshipsV2Request()
        {
            Entities = new List<RelationshipEntity>{};
        }

        ///<summary>
        ///The MerchandiseType of the relationships. The type is based on the MerchandiseType Lookup. Contains the value of the lookup
        ///</summary>
        [DataMember]
        [ApiMember(Description="The MerchandiseType of the relationships. The type is based on the MerchandiseType Lookup. Contains the value of the lookup")]
        public virtual string MerchandiseType { get; set; }

        ///<summary>
        ///Indicates the type of the entities
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the type of the entities")]
        public virtual RelationshipEntityType EntitiesType { get; set; }

        ///<summary>
        ///Indicates the entities to which the relationships are to be applied
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates the entities to which the relationships are to be applied")]
        public virtual List<RelationshipEntity> Entities { get; set; }

        ///<summary>
        ///A qualifier for the Relationship. Flexible property that allows the consumer to enter custom information about the relationship
        ///</summary>
        [DataMember]
        [ApiMember(Description="A qualifier for the Relationship. Flexible property that allows the consumer to enter custom information about the relationship")]
        public virtual string Qualifier { get; set; }

        ///<summary>
        ///A quantity for the Relationship. For example, X has 7 items of the relation Y.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A quantity for the Relationship. For example, X has 7 items of the relation Y.")]
        public virtual int Count { get; set; }

        ///<summary>
        ///A general description of the Relationship. It is kept as a multilingual representation, allowing the display of a language friendly version of the description
        ///</summary>
        [DataMember]
        [ApiMember(Description="A general description of the Relationship. It is kept as a multilingual representation, allowing the display of a language friendly version of the description")]
        public virtual LocalizedString Description { get; set; }
    }

    ///<summary>
    ///The API used to handle Relationships between entities.
    ///</summary>
    [Route("/relationships/{ScopeId}", "DELETE")]
    [Api(Description="The API used to handle Relationships between entities.")]
    [DataContract]
    public partial class DeleteRelationshipsRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        public DeleteRelationshipsRequest()
        {
            Ids = new List<int>{};
        }

        ///<summary>
        ///Ids of the relationships to delete
        ///</summary>
        [DataMember]
        [ApiMember(Description="Ids of the relationships to delete")]
        public virtual List<int> Ids { get; set; }
    }

    ///<summary>
    ///The API used to handle Relationships between entities.
    ///</summary>
    [Route("/relationships/v2/{ScopeId}", "DELETE")]
    [Api(Description="The API used to handle Relationships between entities.")]
    [DataContract]
    public partial class DeleteRelationshipsV2Request
        : ScopedRequest, IReturnVoid, IDelete
    {
        public DeleteRelationshipsV2Request()
        {
            Ids = new List<string>{};
        }

        ///<summary>
        ///Ids of the relationships to delete
        ///</summary>
        [DataMember]
        [ApiMember(Description="Ids of the relationships to delete")]
        public virtual List<string> Ids { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Reporting
{

    ///<summary>
    ///Reporting API.
    ///</summary>
    [Route("/reporting/ssrs/reports/{ReportId}/previews", "POST")]
    [Api(Description="Reporting API.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class CreateSsrsReportPreviewRequest
        : IReturn<ReportPreview>, IPost
    {
        public CreateSsrsReportPreviewRequest()
        {
            ReportParameters = new ReportParameterValue[]{};
        }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The report to be used for retrieving the preview image.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The report to be used for retrieving the preview image.")]
        public virtual string ReportId { get; set; }

        ///<summary>
        ///The selected values for the parameters.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The selected values for the parameters.")]
        public virtual ReportParameterValue[] ReportParameters { get; set; }
    }

    ///<summary>
    ///Reporting API.
    ///</summary>
    [Route("/reporting/ssrs/reports/{ReportId}/export", "POST")]
    [Api(Description="Reporting API.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class ExportSsrsReportRequest
        : IReturn<TaskInfo>, IPost
    {
        public ExportSsrsReportRequest()
        {
            ReportParameters = new ReportParameterValue[]{};
        }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The report to be used for retrieving the preview image.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The report to be used for retrieving the preview image.")]
        public virtual string ReportId { get; set; }

        ///<summary>
        ///The name of the report to be used as name for the background task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the report to be used as name for the background task.")]
        public virtual string ReportName { get; set; }

        ///<summary>
        ///The selected values for the parameters.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The selected values for the parameters.")]
        public virtual ReportParameterValue[] ReportParameters { get; set; }

        ///<summary>
        ///The export type (format) to be used.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The export type (format) to be used.")]
        public virtual ReportExportType ExportType { get; set; }

        ///<summary>
        ///The correlation id for the durable task.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The correlation id for the durable task.")]
        public virtual Guid CorrelationId { get; set; }
    }

    ///<summary>
    ///Reporting API.
    ///</summary>
    [Route("/reporting/ssrs/reports/renderingformats", "GET")]
    [Api(Description="Reporting API.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetSsrsRenderingFormatsRequest
        : IReturn<IEnumerable<ReportExportType>>, IGet
    {
        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Reporting API.
    ///</summary>
    [Route("/reporting/ssrs/reports/{ReportId}/parameters", "POST")]
    [Api(Description="Reporting API.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetSsrsReportParametersRequest
        : IReturn<IEnumerable<ReportParameter>>, IPost
    {
        public GetSsrsReportParametersRequest()
        {
            ReportParameters = new ReportParameterValue[]{};
        }

        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The report to be used for retrieving report parameters.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="The report to be used for retrieving report parameters.")]
        public virtual string ReportId { get; set; }

        ///<summary>
        ///The selected values for the parameters.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The selected values for the parameters.")]
        public virtual ReportParameterValue[] ReportParameters { get; set; }
    }

    ///<summary>
    ///Reporting API.
    ///</summary>
    [Route("/reporting/ssrs/reports", "GET")]
    [Api(Description="Reporting API.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetSsrsReportsRequest
        : ScopedRequest, IReturn<IEnumerable<Report>>, IGet
    {
        ///<summary>
        ///The culture name in which language the data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language the data will be returned")]
        public virtual string CultureName { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Search
{

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/{ScopeId}/configurations/variant", "PUT")]
    [Api(Description="The API used to query the search engine.")]
    [ApiResponse(Description="Requested configurations not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AddOrUpdateVariantSearchConfigurationRequest
        : ScopedRequest, IReturn<string>, IPut
    {
        ///<summary>
        ///the product definition name of the configuration to be updated.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the product definition name of the configuration to be updated.")]
        public virtual string ProductDefinitionName { get; set; }

        ///<summary>
        ///the search option to set for the specified product definition.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the search option to set for the specified product definition.")]
        public virtual VariantSearchOption SearchOption { get; set; }

        ///<summary>
        ///the grouping attribute to be used for this configuration.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the grouping attribute to be used for this configuration.")]
        public virtual string GroupingVariantAttribute { get; set; }
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/{ScopeId}/{CultureName}/advanced/{IndexName}", "POST")]
    [Api(Description="The API used to query the search engine.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class AdvancedSearchRequest
        : QueryRequestBase, IReturn<SearchResult>, IPost
    {
        public AdvancedSearchRequest()
        {
            Properties = new List<string>{};
            FacetPredicates = new List<FacetPredicate>{};
            BoostQueryParams = new List<string>{};
            Facets = new List<string>{};
            ElevatedIds = new string[]{};
        }

        ///<summary>
        ///The required name of the index to query: [Products, Customers, Stores, Inventories, ...]. See orckestra.overture.solr section in web.config for the complete list.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The required name of the index to query: [Products, Customers, Stores, Inventories, ...]. See orckestra.overture.solr section in web.config for the complete list.", IsRequired=true)]
        public virtual string IndexName { get; set; }

        ///<summary>
        ///The collection of properties, represented as string. According to the search engine, a list of properties may be required to retrieve the documents properties
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of properties, represented as string. According to the search engine, a list of properties may be required to retrieve the documents properties")]
        public virtual List<string> Properties { get; set; }

        ///<summary>
        ///Whether facets are returned as part of the search results
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether facets are returned as part of the search results")]
        public virtual bool IncludeFacets { get; set; }

        ///<summary>
        ///List of FacetPredicate to apply on the search
        ///</summary>
        [DataMember]
        [ApiMember(Description="List of FacetPredicate to apply on the search")]
        public virtual List<FacetPredicate> FacetPredicates { get; set; }

        ///<summary>
        ///The ID of the facet hierarchy to use. This will impact the facets results, only the facets defined in this hierarchy will be returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ID of the facet hierarchy to use. This will impact the facets results, only the facets defined in this hierarchy will be returned.")]
        public virtual string FacetHierarchyId { get; set; }

        ///<summary>
        ///The search terms for this search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The search terms for this search query")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        ///The boost query parameters for this search. This will append a 'bq' parameter to the call to Solr for each param.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The boost query parameters for this search. This will append a 'bq' parameter to the call to Solr for each param.")]
        public virtual List<string> BoostQueryParams { get; set; }

        ///<summary>
        ///Whether to return the Facet with no values in it
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether to return the Facet with no values in it")]
        public virtual bool IncludeEmptyFacets { get; set; }

        ///<summary>
        ///Whether or not to automatically do the correction when there is no result and at least one suggestion
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not to automatically do the correction when there is no result and at least one suggestion")]
        public virtual bool AutoCorrect { get; set; }

        ///<summary>
        ///The operator (OR, AND), default to AND
        ///</summary>
        [DataMember]
        [ApiMember(Description="The operator (OR, AND), default to AND")]
        public virtual string Operator { get; set; }

        ///<summary>
        ///The facets, a list of string, that will be included in the results
        ///</summary>
        [DataMember]
        [ApiMember(Description="The facets, a list of string, that will be included in the results")]
        public virtual List<string> Facets { get; set; }

        ///<summary>
        ///The field used to group results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The field used to group results.")]
        public virtual string GroupByField { get; set; }

        ///<summary>
        ///The ids of the documents that will be elevated
        ///</summary>
        [DataMember]
        [ApiMember(Description="The ids of the documents that will be elevated")]
        public virtual string[] ElevatedIds { get; set; }
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/{ScopeId}/configurations/variant", "GET")]
    [Api(Description="The API used to query the search engine.")]
    [ApiResponse(Description="Requested configurations not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetVariantSearchConfigurationsRequest
        : ScopedRequest, IReturn<List<VariantSearchConfiguration>>, IGet
    {
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/indexes/customers", "PUT")]
    [Api(Description="The API used to query the search engine.")]
    [DataContract]
    public partial class IndexCustomersRequest
        : IndexingBaseRequest, IReturn<IEnumerable<TaskInfo>>, IPut
    {
    }

    [DataContract]
    public partial class IndexingBaseRequest
    {
        ///<summary>
        ///The name that will be given to task executing the indexing.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name that will be given to task executing the indexing.")]
        public virtual string TaskName { get; set; }

        ///<summary>
        ///The possible indexing types are 'partial', 'full' or 'clean'. The 'clean' indexing will clean the index and re-index all documents (default: 'partial').
        ///</summary>
        [DataMember]
        [ApiMember(Description="The possible indexing types are 'partial', 'full' or 'clean'. The 'clean' indexing will clean the index and re-index all documents (default: 'partial').")]
        public virtual IndexingType IndexingType { get; set; }

        ///<summary>
        ///Value indicating whether the task sequence quota should be ingored. Default value is TRUE
        ///</summary>
        [DataMember]
        [ApiMember(Description="Value indicating whether the task sequence quota should be ingored. Default value is TRUE")]
        public virtual bool? IgnoreSequenceQuota { get; set; }
    }

    [DataContract]
    public enum IndexingType
    {
        Partial,
        Full,
        Clean,
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/indexes/inventories", "PUT")]
    [Api(Description="The API used to query the search engine.")]
    [DataContract]
    public partial class IndexInventoriesRequest
        : IndexingBaseRequest, IReturn<IEnumerable<TaskInfo>>, IPut
    {
        public IndexInventoriesRequest()
        {
            InventoryLocationIds = new List<string>{};
        }

        ///<summary>
        ///Optional. The list of inventory locations to index. If not specified, all inventory locations will be indexed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Optional. The list of inventory locations to index. If not specified, all inventory locations will be indexed.")]
        public virtual List<string> InventoryLocationIds { get; set; }
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/indexes/products", "PUT")]
    [Api(Description="The API used to query the search engine.")]
    [DataContract]
    public partial class IndexProductsRequest
        : IndexingBaseRequest, IReturn<IEnumerable<TaskInfo>>, IPut
    {
        public IndexProductsRequest()
        {
            CultureNames = new List<string>{};
            CatalogIds = new List<string>{};
        }

        ///<summary>
        ///Optional. The list of cultures to index. If not specified, all cultures will be indexed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Optional. The list of cultures to index. If not specified, all cultures will be indexed.")]
        public virtual List<string> CultureNames { get; set; }

        ///<summary>
        ///Optional. The list of catalogs to index. If not specified, all catalogs will be indexed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Optional. The list of catalogs to index. If not specified, all catalogs will be indexed.")]
        public virtual List<string> CatalogIds { get; set; }

        ///<summary>
        ///Optional. The indexes targetted by the rebuild. All by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Optional. The indexes targetted by the rebuild. All by default.")]
        public virtual ProductSearchIndexType TargetIndex { get; set; }
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/indexes/stores", "PUT")]
    [Api(Description="The API used to query the search engine.")]
    [DataContract]
    public partial class IndexStoresRequest
        : IndexingBaseRequest, IReturn<IEnumerable<TaskInfo>>, IPut
    {
    }

    [DataContract]
    public partial class QueryRequestBase
        : SearchRequestBase
    {
        ///<summary>
        ///The query that will be executed by the handler
        ///</summary>
        [DataMember]
        [ApiMember(Description="The query that will be executed by the handler")]
        public virtual Query Query { get; set; }
    }

    [DataContract]
    public partial class SearchAvailableProductsBaseRequest
        : QueryRequestBase
    {
        public SearchAvailableProductsBaseRequest()
        {
            InventoryLocationIds = new List<string>{};
            Properties = new List<string>{};
            FacetPredicates = new List<FacetPredicate>{};
            BoostQueryParams = new List<string>{};
            Facets = new List<string>{};
            InventoryStatuses = new string[]{};
        }

        ///<summary>
        ///the Ids of the inventory locations where the products should be available.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Ids of the inventory locations where the products should be available.")]
        public virtual List<string> InventoryLocationIds { get; set; }

        ///<summary>
        ///should the products found be available in all (AND) or in any (OR) of the inventory locations.
        ///</summary>
        [DataMember]
        [ApiMember(Description="should the products found be available in all (AND) or in any (OR) of the inventory locations.")]
        public virtual SearchOperator InventoryLocationOperator { get; set; }

        ///<summary>
        ///the date at which the product should be available
        ///</summary>
        [DataMember]
        [ApiMember(Description="the date at which the product should be available")]
        public virtual DateTime? AvailabilityDate { get; set; }

        ///<summary>
        ///The collection of properties, represented as a string. According to the search engine, a list of properties may be required to retrieve the document properties
        ///</summary>
        [DataMember]
        [ApiMember(Description="The collection of properties, represented as a string. According to the search engine, a list of properties may be required to retrieve the document properties")]
        public virtual List<string> Properties { get; set; }

        ///<summary>
        ///Whether facets are returned as part of the search results
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether facets are returned as part of the search results")]
        public virtual bool IncludeFacets { get; set; }

        ///<summary>
        ///List of FacetPredicates to apply on the search
        ///</summary>
        [DataMember]
        [ApiMember(Description="List of FacetPredicates to apply on the search")]
        public virtual List<FacetPredicate> FacetPredicates { get; set; }

        ///<summary>
        ///The search terms for this search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The search terms for this search query")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        ///The boost query parameters for this search. This will append a 'bq' parameter to the call to Solr for each param.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The boost query parameters for this search. This will append a 'bq' parameter to the call to Solr for each param.")]
        public virtual List<string> BoostQueryParams { get; set; }

        ///<summary>
        ///The facets, a list of strings, that will be included in the results
        ///</summary>
        [DataMember]
        [ApiMember(Description="The facets, a list of strings, that will be included in the results")]
        public virtual List<string> Facets { get; set; }

        ///<summary>
        ///The variant grouping strategy
        ///</summary>
        [DataMember]
        [ApiMember(Description="The variant grouping strategy")]
        public virtual SearchVariantGroupingStrategy VariantGroupingStrategy { get; set; }

        ///<summary>
        ///Whether search term should be automatically corrected
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether search term should be automatically corrected")]
        public virtual bool AutoCorrect { get; set; }

        ///<summary>
        ///The inventory statuses to filter by. If none are specified, the value will be taken from the product setting 'AvailableInventoryStatuses' (InStock, OutOfStock, BackOrder).
        ///</summary>
        [DataMember]
        [ApiMember(Description="The inventory statuses to filter by. If none are specified, the value will be taken from the product setting 'AvailableInventoryStatuses' (InStock, OutOfStock, BackOrder).")]
        public virtual string[] InventoryStatuses { get; set; }
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/{ScopeId}/{CultureName}/availableProducts/byCategory/{CategoryName*}", "POST")]
    [Api(Description="The API used to query the search engine.")]
    [ApiResponse(Description="Requested available products not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class SearchAvailableProductsByCategoryRequest
        : SearchAvailableProductsBaseRequest, IReturn<SearchAvailableProductsByCategoryResponse>, IPost
    {
        ///<summary>
        ///The name of the search query to be used.If query doesn't exists, available products will be returned with this parameter's value not affecting the filtering
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the search query to be used.If query doesn't exists, available products will be returned with this parameter's value not affecting the filtering")]
        public virtual string CategoryName { get; set; }
    }

    [DataContract]
    public partial class SearchAvailableProductsByCategoryResponse
        : ProductSearchResult
    {
        public SearchAvailableProductsByCategoryResponse()
        {
            SelectedFacets = new List<SelectedFacet>{};
        }

        ///<summary>
        ///The selected facets generated by the SearchQuery
        ///</summary>
        [DataMember]
        [ApiMember(Description="The selected facets generated by the SearchQuery")]
        public virtual List<SelectedFacet> SelectedFacets { get; set; }
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/{ScopeId}/{CultureName}/availableProducts", "POST")]
    [Api(Description="The API used to query the search engine.")]
    [ApiResponse(Description="Requested available products not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class SearchAvailableProductsRequest
        : SearchAvailableProductsBaseRequest, IReturn<ProductSearchResult>, IPost
    {
        public SearchAvailableProductsRequest()
        {
            FeaturedProducts = new string[]{};
        }

        ///<summary>
        ///The document ids of the products that will be elevated
        ///</summary>
        [DataMember]
        [ApiMember(Description="The document ids of the products that will be elevated")]
        public virtual string[] FeaturedProducts { get; set; }
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/{ScopeId}/{CultureName}/bySearchQuery/{QueryType}/{QueryName}", "POST")]
    [Api(Description="The API used to query the search engine.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class SearchBySearchQueryRequest
        : QueryRequestBase, IReturn<SearchQueryResult>, IPost
    {
        public SearchBySearchQueryRequest()
        {
            Properties = new List<string>{};
            FacetPredicates = new List<FacetPredicate>{};
            Facets = new List<string>{};
        }

        ///<summary>
        ///The type of the requested search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the requested search query")]
        public virtual SearchQueryType QueryType { get; set; }

        ///<summary>
        ///The name of the requested search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the requested search query")]
        public virtual string QueryName { get; set; }

        ///<summary>
        ///the collection of properties, represented as string, to return in the search results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of properties, represented as string, to return in the search results.")]
        public virtual List<string> Properties { get; set; }

        ///<summary>
        ///Whether search term should be automatically corrected
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether search term should be automatically corrected")]
        public virtual bool AutoCorrect { get; set; }

        ///<summary>
        ///Whether facets are returned as part of the search results
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether facets are returned as part of the search results")]
        public virtual bool IncludeFacets { get; set; }

        ///<summary>
        ///List of FacetPredicates to apply on the search
        ///</summary>
        [DataMember]
        [ApiMember(Description="List of FacetPredicates to apply on the search")]
        public virtual List<FacetPredicate> FacetPredicates { get; set; }

        ///<summary>
        ///The facets, a list of strings, that will be included in the results
        ///</summary>
        [DataMember]
        [ApiMember(Description="The facets, a list of strings, that will be included in the results")]
        public virtual List<string> Facets { get; set; }

        ///<summary>
        ///The search terms for this search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The search terms for this search query")]
        public virtual string SearchTerms { get; set; }

        ///<summary>
        ///The bag containing all the custom attributes. You may use this bag to add attributes to the effective Search request that will be executed.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The bag containing all the custom attributes. You may use this bag to add attributes to the effective Search request that will be executed.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/{ScopeId}/{CultureName}/customers", "POST")]
    [Api(Description="The API used to query the search engine.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class SearchCustomersRequest
        : SearchRequestBase, IReturn<SearchResult>, IPost
    {
        public SearchCustomersRequest()
        {
            Facets = new List<string>{};
            Properties = new List<string>{};
            SearchFilters = new List<SearchFilter>{};
            SearchRanges = new List<SearchRange>{};
        }

        ///<summary>
        ///the search terms to use in the query.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the search terms to use in the query.")]
        public virtual string Keywords { get; set; }

        ///<summary>
        ///the name of the field used to order the results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the field used to order the results.")]
        public virtual string SortFieldName { get; set; }

        ///<summary>
        ///the value indicating the sort is ascending
        ///</summary>
        [DataMember]
        [ApiMember(Description="the value indicating the sort is ascending")]
        public virtual bool IsSortAscending { get; set; }

        ///<summary>
        ///the index of the first record in the list (used for paging purpose).
        ///</summary>
        [DataMember]
        [ApiMember(Description="the index of the first record in the list (used for paging purpose).")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///the maximum number of items returned by the search query.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of items returned by the search query.")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///the list of facets that will be included in the results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of facets that will be included in the results.")]
        public virtual List<string> Facets { get; set; }

        ///<summary>
        ///the collection of properties, represented as string, to return in the search results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of properties, represented as string, to return in the search results.")]
        public virtual List<string> Properties { get; set; }

        ///<summary>
        ///the collection of SearchFilters.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of SearchFilters.")]
        public virtual List<SearchFilter> SearchFilters { get; set; }

        ///<summary>
        ///the collection of SearchRange.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of SearchRange.")]
        public virtual List<SearchRange> SearchRanges { get; set; }
    }

    [DataContract]
    public enum SearchOperator
    {
        Or,
        And,
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/{ScopeId}/{CultureName}/products/byIds", "POST")]
    [Api(Description="The API used to query the search engine.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class SearchProductByIdsRequest
        : SearchRequestBase, IReturn<SearchResult>, IPost
    {
        public SearchProductByIdsRequest()
        {
            Ids = new List<string>{};
            Properties = new List<string>{};
        }

        ///<summary>
        ///the list of products to return.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of products to return.")]
        public virtual List<string> Ids { get; set; }

        ///<summary>
        ///the collection of properties, represented as string, to return in the search results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of properties, represented as string, to return in the search results.")]
        public virtual List<string> Properties { get; set; }

        ///<summary>
        ///whether to return active products only. True by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether to return active products only. True by default.")]
        public virtual bool ActiveProductOnly { get; set; }

        ///<summary>
        ///The variant grouping strategy
        ///</summary>
        [DataMember]
        [ApiMember(Description="The variant grouping strategy")]
        public virtual SearchVariantGroupingStrategy VariantGroupingStrategy { get; set; }
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/{ScopeId}/{CultureName}/products/bySavedQuery/{QueryId}", "POST")]
    [Api(Description="The API used to query the search engine.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class SearchProductBySavedQueryRequest
        : SearchRequestBase, IReturn<SearchResult>, IPost
    {
        public SearchProductBySavedQueryRequest()
        {
            Properties = new List<string>{};
        }

        ///<summary>
        ///the id of the saved query to execute.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the id of the saved query to execute.", IsRequired=true)]
        public virtual string QueryId { get; set; }

        ///<summary>
        ///the collection of properties, represented as string, to return in the search results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of properties, represented as string, to return in the search results.")]
        public virtual List<string> Properties { get; set; }

        ///<summary>
        ///whether to return active product only.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether to return active product only.")]
        public virtual bool ActiveProductOnly { get; set; }

        ///<summary>
        ///The variant grouping strategy
        ///</summary>
        [DataMember]
        [ApiMember(Description="The variant grouping strategy")]
        public virtual SearchVariantGroupingStrategy VariantGroupingStrategy { get; set; }
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/{ScopeId}/{CultureName}/products", "POST")]
    [Api(Description="The API used to query the search engine.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class SearchProductRequest
        : SearchRequestBase, IReturn<SearchResult>, IPost
    {
        public SearchProductRequest()
        {
            Properties = new List<string>{};
            SearchFilters = new List<SearchFilter>{};
            SearchRanges = new List<SearchRange>{};
            Facets = new List<string>{};
            FeaturedProducts = new string[]{};
        }

        ///<summary>
        ///the search terms to use in the query.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the search terms to use in the query.")]
        public virtual string Keywords { get; set; }

        ///<summary>
        ///the collection of properties, represented as string, to return in the search results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of properties, represented as string, to return in the search results.")]
        public virtual List<string> Properties { get; set; }

        ///<summary>
        ///the collection of SearchFilters.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of SearchFilters.")]
        public virtual List<SearchFilter> SearchFilters { get; set; }

        ///<summary>
        ///the collection of SearchRange.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the collection of SearchRange.")]
        public virtual List<SearchRange> SearchRanges { get; set; }

        ///<summary>
        ///the name of the field used to order the results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the field used to order the results.")]
        public virtual string SortFieldName { get; set; }

        ///<summary>
        ///the direction used to sort the results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the direction used to sort the results.")]
        public virtual SortDirection SortFieldDirection { get; set; }

        ///<summary>
        ///the index of the first record in the list (used for paging purpose).
        ///</summary>
        [DataMember]
        [ApiMember(Description="the index of the first record in the list (used for paging purpose).")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///the maximum number of items returned by the search query.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum number of items returned by the search query.")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///the list of facets that will be included in the results.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of facets that will be included in the results.")]
        public virtual List<string> Facets { get; set; }

        ///<summary>
        ///whether to return active products only. True by default.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether to return active products only. True by default.")]
        public virtual bool ActiveProductOnly { get; set; }

        ///<summary>
        ///The variant grouping strategy
        ///</summary>
        [DataMember]
        [ApiMember(Description="The variant grouping strategy")]
        public virtual SearchVariantGroupingStrategy VariantGroupingStrategy { get; set; }

        ///<summary>
        ///The document ids of the products that will be elevated
        ///</summary>
        [DataMember]
        [ApiMember(Description="The document ids of the products that will be elevated")]
        public virtual string[] FeaturedProducts { get; set; }
    }

    [DataContract]
    public partial class SearchRequestBase
    {
        ///<summary>
        ///The name of the configuration to use to process this request
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the configuration to use to process this request")]
        public virtual string ConfigurationName { get; set; }

        ///<summary>
        ///The culture (language) to use to process the request (en-US)
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture (language) to use to process the request (en-US)", IsRequired=true)]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The scope to use to process the request
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope to use to process the request", IsRequired=true)]
        public virtual string ScopeId { get; set; }
    }

    ///<summary>
    ///The API used to query the search engine.
    ///</summary>
    [Route("/search/{ScopeId}/{CultureName}/products/similar/{ProductId}", "POST")]
    [Api(Description="The API used to query the search engine.")]
    [DataContract]
    public partial class SearchSimilarProductsRequest
        : ScopedRequest, IReturn<SearchResult>, IPost
    {
        ///<summary>
        ///The culture name in which language tha data will be returned
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The product id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The product id")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///The query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The query")]
        public virtual Query Query { get; set; }

        ///<summary>
        ///The minimum price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum price")]
        public virtual int? MinPrice { get; set; }

        ///<summary>
        ///The maximum price
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum price")]
        public virtual int? MaxPrice { get; set; }

        ///<summary>
        ///Whether or not retrieve only active products
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether or not retrieve only active products")]
        public virtual bool OnlyActiveProducts { get; set; }

        ///<summary>
        ///The maximum number of results
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of results")]
        public virtual int MaxNumberOfResults { get; set; }

        ///<summary>
        ///The variant grouping strategy
        ///</summary>
        [DataMember]
        [ApiMember(Description="The variant grouping strategy")]
        public virtual SearchVariantGroupingStrategy VariantGroupingStrategy { get; set; }
    }

    [DataContract]
    public enum SearchVariantGroupingStrategy
    {
        PerConfiguredSearchOption,
        PerProduct,
        None,
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.SearchQueries
{

    ///<summary>
    ///The API used to handle saved Search queries.
    ///</summary>
    [Route("/searchqueries/{ScopeId}/{QueryType}/{Name}", "POST")]
    [Api(Description="The API used to handle saved Search queries.")]
    [DataContract]
    public partial class CreateSearchQueryRequest
        : ScopedRequest, IReturn<SearchQuery>, IPost
    {
        public CreateSearchQueryRequest()
        {
            QueryData = new List<SearchQueryData>{};
        }

        ///<summary>
        ///The type of the requested search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the requested search query")]
        public virtual SearchQueryType QueryType { get; set; }

        ///<summary>
        ///The name of the requested search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the requested search query")]
        public virtual string Name { get; set; }

        ///<summary>
        ///Category of the search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="Category of the search query")]
        public virtual string Category { get; set; }

        ///<summary>
        ///The data used to build a search request
        ///</summary>
        [DataMember]
        [ApiMember(Description="The data used to build a search request")]
        public virtual List<SearchQueryData> QueryData { get; set; }
    }

    ///<summary>
    ///The API used to handle saved Search queries.
    ///</summary>
    [Route("/searchqueries/{ScopeId}/{QueryType}/{Name}", "DELETE")]
    [Api(Description="The API used to handle saved Search queries.")]
    [DataContract]
    public partial class DeleteSearchQueryRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The type of the requested search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the requested search query")]
        public virtual SearchQueryType QueryType { get; set; }

        ///<summary>
        ///The name of the requested search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the requested search query")]
        public virtual string Name { get; set; }
    }

    ///<summary>
    ///The API used to handle saved Search queries.
    ///</summary>
    [Route("/searchqueries/{ScopeId}/find", "POST")]
    [Api(Description="The API used to handle saved Search queries.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindSearchQueriesRequest
        : ScopedRequest, IReturn<FindSearchQueriesResult>, IPost
    {
        ///<summary>
        ///Query type to filter with
        ///</summary>
        [DataMember]
        [ApiMember(Description="Query type to filter with")]
        public virtual SearchQueryType? QueryType { get; set; }

        ///<summary>
        ///Indicates if the response should include the query data with the SearchQueries or not
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates if the response should include the query data with the SearchQueries or not")]
        public virtual bool IncludeQueryData { get; set; }
    }

    ///<summary>
    ///The API used to handle saved Search queries.
    ///</summary>
    [Route("/searchqueries/{ScopeId}/{QueryType}/{Name}", "GET")]
    [Api(Description="The API used to handle saved Search queries.")]
    [ApiResponse(Description="No search query matching the provided parameters could be found.", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetSearchQueryByNameRequest
        : ScopedRequest, IReturn<SearchQuery>, IGet
    {
        ///<summary>
        ///The type of the requested search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the requested search query")]
        public virtual SearchQueryType QueryType { get; set; }

        ///<summary>
        ///The name of the requested search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the requested search query")]
        public virtual string Name { get; set; }

        ///<summary>
        ///Indicates whether the system should use a strict mode (allow only Sales Scope), or should search for a parent Sales Scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the system should use a strict mode (allow only Sales Scope), or should search for a parent Sales Scope")]
        public virtual bool UseScopeStrictMode { get; set; }
    }

    ///<summary>
    ///The API used to handle saved Search queries.
    ///</summary>
    [Route("/searchqueries/{ScopeId}/{QueryType}/{Name}", "PUT")]
    [Api(Description="The API used to handle saved Search queries.")]
    [DataContract]
    public partial class UpdateSearchQueryRequest
        : ScopedRequest, IReturn<SearchQuery>, IPut
    {
        public UpdateSearchQueryRequest()
        {
            QueryData = new List<SearchQueryData>{};
        }

        ///<summary>
        ///The type of the requested search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the requested search query")]
        public virtual SearchQueryType QueryType { get; set; }

        ///<summary>
        ///The name of the requested search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the requested search query")]
        public virtual string Name { get; set; }

        ///<summary>
        ///Category of the search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="Category of the search query")]
        public virtual string Category { get; set; }

        ///<summary>
        ///The data used to build a search request
        ///</summary>
        [DataMember]
        [ApiMember(Description="The data used to build a search request")]
        public virtual List<SearchQueryData> QueryData { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Security
{

    ///<summary>
    ///Users represents the persons interacting with the system.
    ///</summary>
    [Route("/users/{UserName}/activate", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Users represents the persons interacting with the system.")]
    [DataContract]
    public partial class ActivateUserRequest
        : IReturn<User>, IPost
    {
        ///<summary>
        ///The username.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username.", IsRequired=true)]
        public virtual string UserName { get; set; }
    }

    ///<summary>
    ///Users represents the persons interacting with the system.
    ///</summary>
    [Route("/users/activate", "PUT")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Users represents the persons interacting with the system.")]
    [DataContract]
    public partial class ActivateUsersRequest
        : IReturnVoid, IPut
    {
        public ActivateUsersRequest()
        {
            UsersToActivate = new List<string>{};
        }

        ///<summary>
        ///The users to activate.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The users to activate.", IsRequired=true)]
        public virtual List<string> UsersToActivate { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/{ParentRoleId}/child", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class AddRoleChildrenRequest
        : IReturnVoid, IPost
    {
        public AddRoleChildrenRequest()
        {
            ChildRoleIds = new List<int>{};
        }

        ///<summary>
        ///the parent role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the parent role identifier.")]
        public virtual int ParentRoleId { get; set; }

        ///<summary>
        ///the list of child role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of child role identifier.")]
        public virtual List<int> ChildRoleIds { get; set; }

        ///<summary>
        ///the application name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the application name.")]
        public virtual string ApplicationName { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/{ParentRoleId}/{ChildRoleId}", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class AddRoleChildRequest
        : IReturnVoid, IPost
    {
        ///<summary>
        ///the parent role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the parent role identifier.")]
        public virtual int ParentRoleId { get; set; }

        ///<summary>
        ///the child role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the child role identifier.")]
        public virtual int ChildRoleId { get; set; }

        ///<summary>
        ///the application name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the application name.")]
        public virtual string ApplicationName { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/systemAdministrator/{ChildRoleId}", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class AddRoleChildToGlobalAdministratorRoleRequest
        : IReturnVoid, IPost
    {
        ///<summary>
        ///the child role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the child role identifier.")]
        public virtual int ChildRoleId { get; set; }

        ///<summary>
        ///the application name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the application name.")]
        public virtual string ApplicationName { get; set; }
    }

    ///<summary>
    ///Groups are entities wrapping identities objects (users or groups).
    ///</summary>
    [Route("/groups/{GroupId}/{UserName}", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Groups are entities wrapping identities objects (users or groups).")]
    [DataContract]
    public partial class AddUserToGroupRequest
        : IReturnVoid, IPost
    {
        ///<summary>
        ///The username.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username.", IsRequired=true)]
        public virtual string UserName { get; set; }

        ///<summary>
        ///The group identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The group identifier.", IsRequired=true)]
        public virtual string GroupId { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/custom/{Name}", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class CreateCustomRoleRequest
        : IReturn<Role>, IPost
    {
        ///<summary>
        ///the role name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the role name.")]
        public virtual string Name { get; set; }
    }

    ///<summary>
    ///Groups are entities wrapping identities objects (users or groups).
    ///</summary>
    [Route("/groups/{DisplayName}/", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Groups are entities wrapping identities objects (users or groups).")]
    [DataContract]
    public partial class CreateGroupRequest
        : IReturn<Group>, IPost
    {
        ///<summary>
        ///the description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name.")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///the name of the mail nick.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the mail nick.")]
        public virtual string MailNickName { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/{Name}", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class CreateRoleRequest
        : IReturn<Role>, IPost
    {
        ///<summary>
        ///the module identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the module identifier.")]
        public virtual int ModuleId { get; set; }

        ///<summary>
        ///the role name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the role name.")]
        public virtual string Name { get; set; }
    }

    ///<summary>
    ///Users represents the persons interacting with the system.
    ///</summary>
    [Route("/users/{UserName}", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Users represents the persons interacting with the system.")]
    [DataContract]
    public partial class CreateUserRequest
        : IReturn<User>, IPost
    {
        ///<summary>
        ///a value indicating whether user is enabled.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether user is enabled.")]
        public virtual bool Enabled { get; set; }

        ///<summary>
        ///the first name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the first name.")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///the last name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the last name.")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///the display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name.")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///the name of the user.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the user.")]
        public virtual string UserName { get; set; }

        ///<summary>
        ///the phone.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the phone.")]
        public virtual string Phone { get; set; }

        ///<summary>
        ///the mobile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the mobile.")]
        public virtual string Mobile { get; set; }

        ///<summary>
        ///the department.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the department.")]
        public virtual string Department { get; set; }

        ///<summary>
        ///the job title.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the job title.")]
        public virtual string JobTitle { get; set; }

        ///<summary>
        ///the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the address.")]
        public virtual string Address { get; set; }

        ///<summary>
        ///the city.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the city.")]
        public virtual string City { get; set; }

        ///<summary>
        ///the state.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the state.")]
        public virtual string State { get; set; }

        ///<summary>
        ///the country.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the country.")]
        public virtual string Country { get; set; }

        ///<summary>
        ///the postal code.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the postal code.")]
        public virtual string PostalCode { get; set; }

        ///<summary>
        ///the preferred language.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the preferred language.")]
        public virtual string PreferredLanguage { get; set; }

        ///<summary>
        ///the password profile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the password profile.")]
        public virtual PasswordProfile PasswordProfile { get; set; }
    }

    ///<summary>
    ///Users represents the persons interacting with the system.
    ///</summary>
    [Route("/users/{UserName}/deactivate", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Users represents the persons interacting with the system.")]
    [DataContract]
    public partial class DeactivateUserRequest
        : IReturn<User>, IPost
    {
        ///<summary>
        ///The name of the user.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the user.", IsRequired=true)]
        public virtual string UserName { get; set; }
    }

    ///<summary>
    ///Users represents the persons interacting with the system.
    ///</summary>
    [Route("/users/desactivate", "PUT")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Users represents the persons interacting with the system.")]
    [DataContract]
    public partial class DeactivateUsersRequest
        : IReturnVoid, IPut
    {
        public DeactivateUsersRequest()
        {
            UsersToDeactivate = new List<string>{};
        }

        ///<summary>
        ///The users to deactivate.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The users to deactivate.", IsRequired=true)]
        public virtual List<string> UsersToDeactivate { get; set; }
    }

    ///<summary>
    ///Groups are entities wrapping identities objects (users or groups).
    ///</summary>
    [Route("/groups/{GroupId}", "DELETE")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Groups are entities wrapping identities objects (users or groups).")]
    [DataContract]
    public partial class DeleteGroupRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The group identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The group identifier.", IsRequired=true)]
        public virtual string GroupId { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/{Id}", "DELETE")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class DeleteRoleRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///the role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the role identifier.")]
        public virtual int Id { get; set; }

        ///<summary>
        ///the module identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the module identifier.")]
        public virtual int ModuleId { get; set; }

        ///<summary>
        ///the name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name.")]
        public virtual string Name { get; set; }
    }

    ///<summary>
    ///Users represents the persons interacting with the system.
    ///</summary>
    [Route("/users/{UserName}", "DELETE")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Users represents the persons interacting with the system.")]
    [DataContract]
    public partial class DeleteUserRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The username of the user.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username of the user.", IsRequired=true)]
        public virtual string UserName { get; set; }
    }

    ///<summary>
    ///Groups are entities wrapping identities objects (users or groups).
    ///</summary>
    [Route("/groups/find/", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Groups are entities wrapping identities objects (users or groups).")]
    [DataContract]
    public partial class FindGroupsRequest
        : IReturn<FindGroupsResult>, IPost
    {
        ///<summary>
        ///The part of the name to be found.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The part of the name to be found.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The number results to return. Used for paging.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number results to return. Used for paging.")]
        public virtual int? PageSize { get; set; }

        ///<summary>
        ///The index of the result page
        ///</summary>
        [DataMember]
        [ApiMember(Description="The index of the result page")]
        public virtual int? PageIndex { get; set; }

        ///<summary>
        ///The 'order by attribute' use to sort groups. By default, the users will be order by DisplayName.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The 'order by attribute' use to sort groups. By default, the users will be order by DisplayName.")]
        public virtual UserManagementSortGroupAttributes OrderBy { get; set; }
    }

    ///<summary>
    ///Users represents the persons interacting with the system.
    ///</summary>
    [Route("/users/find", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Users represents the persons interacting with the system.")]
    [DataContract]
    public partial class FindUsersByNameRequest
        : IReturn<FindUsersByNameResult>, IPost
    {
        ///<summary>
        ///The name of the user.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the user.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///The maximum of user results to return.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum of user results to return.")]
        public virtual int? MaxResults { get; set; }

        ///<summary>
        ///The number results to return. Used for paging.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The number results to return. Used for paging.")]
        public virtual int? PageSize { get; set; }

        ///<summary>
        ///The index of the result page
        ///</summary>
        [DataMember]
        [ApiMember(Description="The index of the result page")]
        public virtual int? PageIndex { get; set; }

        ///<summary>
        ///The 'order by attribute' use to sort users. By default, the users will be order by DisplayName.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The 'order by attribute' use to sort users. By default, the users will be order by DisplayName.")]
        public virtual UserManagementSortUserAttributes OrderBy { get; set; }

        ///<summary>
        ///Indicates whether the query should include disabled user
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates whether the query should include disabled user")]
        public virtual bool IncludeDisabled { get; set; }

        ///<summary>
        ///Indicates how to sort the users
        ///</summary>
        [DataMember]
        [ApiMember(Description="Indicates how to sort the users")]
        public virtual SortDirection SortDirection { get; set; }
    }

    ///<summary>
    ///Users represents the persons interacting with the system.
    ///</summary>
    [Route("/users/{UserName}/forceChangePassword", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Users represents the persons interacting with the system.")]
    [DataContract]
    public partial class ForceChangeUserPasswordRequest
        : IReturnVoid, IPost
    {
        ///<summary>
        ///The username.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username.")]
        public virtual string UserName { get; set; }

        ///<summary>
        ///The new password.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The new password.")]
        public virtual string Password { get; set; }

        ///<summary>
        ///The culture name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name.")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Application are blocks of logical business features.
    ///</summary>
    [Route("/applications/", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Application are blocks of logical business features.")]
    [DataContract]
    public partial class GetAllApplicationsRequest
        : IReturn<List<Application>>, IGet
    {
    }

    ///<summary>
    ///Modules are blocks of logical business features.
    ///</summary>
    [Route("/modules/byApplicationName/{ApplicationName}", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Modules are blocks of logical business features.")]
    [DataContract]
    public partial class GetApplicationModules
        : IReturn<List<Module>>, IGet
    {
        ///<summary>
        ///The application name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The application name.")]
        public virtual string ApplicationName { get; set; }
    }

    ///<summary>
    ///Application are blocks of logical business features.
    ///</summary>
    [Route("/my/applications/", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Application are blocks of logical business features.")]
    [DataContract]
    public partial class GetAuthorizedApplicationsRequest
        : IReturn<List<Application>>, IGet
    {
    }

    ///<summary>
    ///Users represents the persons interacting with the system.
    ///</summary>
    [Route("/users/domains", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Users represents the persons interacting with the system.")]
    [DataContract]
    public partial class GetAvailableDomainsRequest
        : IReturn<List<string>>, IGet
    {
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/custom", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class GetCustomRolesRequest
        : IReturn<List<Role>>, IGet
    {
        ///<summary>
        ///The 'order by attribute' use to sort custom roles return. By default, the custom roles will be order by DisplayName.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The 'order by attribute' use to sort custom roles return. By default, the custom roles will be order by DisplayName.")]
        public virtual UserManagementSortCustomRolesAttributes OrderBy { get; set; }

        ///<summary>
        ///The CultureCode is use when you sort by DisplayName. By default, the culture 'en_US' will be use. If you don't sort by display name, this parameter is not mandatory.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The CultureCode is use when you sort by DisplayName. By default, the culture 'en_US' will be use. If you don't sort by display name, this parameter is not mandatory.")]
        public virtual string CultureCode { get; set; }
    }

    ///<summary>
    ///Authorizations represents what an entity (Group, User...) is allowed to do.
    ///</summary>
    [Route("/authorizations/direct/{ObjectsIds}", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Authorizations represents what an entity (Group, User...) is allowed to do.")]
    [DataContract]
    public partial class GetDirectAuthorizationsRequest
        : IReturn<List<MembershipAuthorization>>, IPost
    {
        public GetDirectAuthorizationsRequest()
        {
            ObjectsIds = new List<string>{};
        }

        ///<summary>
        ///The objects identifiers.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The objects identifiers.")]
        public virtual List<string> ObjectsIds { get; set; }
    }

    ///<summary>
    ///Authorizations represents what an entity (Group, User...) is allowed to do.
    ///</summary>
    [Route("/authorizations/GetEffectiveAuthorizations", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Authorizations represents what an entity (Group, User...) is allowed to do.")]
    [DataContract]
    public partial class GetEffectiveAuthorizationsRequest
        : IReturn<List<MembershipAuthorization>>, IPost
    {
        public GetEffectiveAuthorizationsRequest()
        {
            ObjectsIds = new List<string>{};
        }

        ///<summary>
        ///The objects identifiers.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The objects identifiers.")]
        public virtual List<string> ObjectsIds { get; set; }
    }

    ///<summary>
    ///Groups are entities wrapping identities objects (users or groups).
    ///</summary>
    [Route("/groups/{GroupId}/users", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Groups are entities wrapping identities objects (users or groups).")]
    [DataContract]
    public partial class GetGroupMembersWithPagingRequest
        : IReturn<GetGroupMembersWithPagingResult>, IGet
    {
        ///<summary>
        ///The group identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The group identifier.")]
        public virtual string GroupId { get; set; }

        ///<summary>
        ///The starting index.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting index.")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The maximum of items to be returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum of items to be returned.")]
        public virtual int MaximumItems { get; set; }
    }

    ///<summary>
    ///Groups are entities wrapping identities objects (users or groups).
    ///</summary>
    [Route("/groups/{GroupId}/", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Groups are entities wrapping identities objects (users or groups).")]
    [DataContract]
    public partial class GetGroupRequest
        : IReturn<Group>, IGet
    {
        ///<summary>
        ///The group identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The group identifier.")]
        public virtual string GroupId { get; set; }
    }

    ///<summary>
    ///Authorizations represents what an entity (Group, User...) is allowed to do.
    ///</summary>
    [Route("/authorizations/settings", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Authorizations represents what an entity (Group, User...) is allowed to do.")]
    [DataContract]
    public partial class GetMembershipSettingsRequest
        : IReturn<MembershipSettings>, IGet
    {
    }

    ///<summary>
    ///Modules are blocks of logical business features.
    ///</summary>
    [Route("/modules/", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Modules are blocks of logical business features.")]
    [DataContract]
    public partial class GetModulesRequest
        : IReturn<List<Module>>, IGet
    {
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/role/{RoleId}/parents", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class GetParentRolesRequest
        : IReturn<List<Role>>, IGet
    {
        ///<summary>
        ///The child role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The child role identifier.")]
        public virtual int RoleId { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/{Id}", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="The requested role was not found", StatusCode=404)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class GetRoleByIdRequest
        : IReturn<Role>, IGet
    {
        ///<summary>
        ///The role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The role identifier.")]
        public virtual int Id { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/{ModuleId}/{RoleName}", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class GetRoleRequest
        : IReturn<Role>, IGet
    {
        ///<summary>
        ///The role name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The role name.")]
        public virtual string RoleName { get; set; }

        ///<summary>
        ///The module identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The module identifier.")]
        public virtual int ModuleId { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class GetRolesRequest
        : IReturn<List<Role>>, IGet
    {
    }

    ///<summary>
    ///Authorizations represents what an entity (Group, User...) is allowed to do.
    ///</summary>
    [Route("/authorizations/{UserName}/GetEffectiveAuthorizations", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Authorizations represents what an entity (Group, User...) is allowed to do.")]
    [DataContract]
    public partial class GetUserEffectiveAuthorizationsRequest
        : IReturn<List<MembershipAuthorization>>, IGet
    {
        ///<summary>
        ///The username of the user.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username of the user.")]
        public virtual string UserName { get; set; }
    }

    ///<summary>
    ///Users represents the persons interacting with the system.
    ///</summary>
    [Route("/users/{UserName}/groups", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Users represents the persons interacting with the system.")]
    [DataContract]
    public partial class GetUserGroupsRequest
        : IReturn<List<Group>>, IGet
    {
        ///<summary>
        ///The username of the user.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username of the user.", IsRequired=true)]
        public virtual string UserName { get; set; }
    }

    ///<summary>
    ///Users represents the persons interacting with the system.
    ///</summary>
    [Route("/users/{UserName}", "GET")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [ApiResponse(Description="The user was not found.", StatusCode=404)]
    [Api(Description="Users represents the persons interacting with the system.")]
    [DataContract]
    public partial class GetUserRequest
        : IReturn<User>, IGet
    {
        ///<summary>
        ///The username of user.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username of user.", IsRequired=true)]
        public virtual string UserName { get; set; }
    }

    ///<summary>
    ///Authorizations represents what an entity (Group, User...) is allowed to do.
    ///</summary>
    [Route("/authorizations/{RoleId}/{ObjectId}", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Authorizations represents what an entity (Group, User...) is allowed to do.")]
    [DataContract]
    public partial class GrantAuthorizationRequest
        : IReturnVoid, IPost
    {
        ///<summary>
        ///The object identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The object identifier.")]
        public virtual string ObjectId { get; set; }

        ///<summary>
        ///The role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The role identifier.")]
        public virtual int RoleId { get; set; }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope identifier.")]
        public virtual string RequestedScopeId { get; set; }

        ///<summary>
        ///The object type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The object type.")]
        public virtual string ObjectType { get; set; }
    }

    ///<summary>
    ///Authorizations represents what an entity (Group, User...) is allowed to do.
    ///</summary>
    [Route("/authorizations/{ObjectId}", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Authorizations represents what an entity (Group, User...) is allowed to do.")]
    [DataContract]
    public partial class GrantAuthorizationsRequest
        : IReturnVoid, IPost
    {
        public GrantAuthorizationsRequest()
        {
            AuthorizationsToGrant = new List<GrantedAuthorization>{};
        }

        ///<summary>
        ///The object identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The object identifier.")]
        public virtual string ObjectId { get; set; }

        ///<summary>
        ///The list of authorization to grant.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of authorization to grant.")]
        public virtual List<GrantedAuthorization> AuthorizationsToGrant { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/{ParentRoleId}/child", "DELETE")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class RemoveRoleChildrenRequest
        : IReturnVoid, IDelete
    {
        public RemoveRoleChildrenRequest()
        {
            ChildRoleIds = new List<int>{};
        }

        ///<summary>
        ///the parent role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the parent role identifier.")]
        public virtual int ParentRoleId { get; set; }

        ///<summary>
        ///the list of child role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of child role identifier.")]
        public virtual List<int> ChildRoleIds { get; set; }

        ///<summary>
        ///the application name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the application name.")]
        public virtual string ApplicationName { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/{ParentRoleId}/{ChildRoleId}", "DELETE")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class RemoveRoleChildRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///the parent role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the parent role identifier.")]
        public virtual int ParentRoleId { get; set; }

        ///<summary>
        ///the child role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the child role identifier.")]
        public virtual int ChildRoleId { get; set; }

        ///<summary>
        ///the application name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the application name.")]
        public virtual string ApplicationName { get; set; }
    }

    ///<summary>
    ///Groups are entities wrapping identities objects (users or groups).
    ///</summary>
    [Route("/groups/{GroupId}/{UserName}", "DELETE")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Groups are entities wrapping identities objects (users or groups).")]
    [DataContract]
    public partial class RemoveUserFromGroupRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The username.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username.", IsRequired=true)]
        public virtual string UserName { get; set; }

        ///<summary>
        ///The group identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The group identifier.", IsRequired=true)]
        public virtual string GroupId { get; set; }
    }

    ///<summary>
    ///Users represents the persons interacting with the system.
    ///</summary>
    [Route("/users/{UserName}/resetUserPassword", "PUT")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Users represents the persons interacting with the system.")]
    [DataContract]
    public partial class ResetUserPasswordRequest
        : IReturn<ResetUserPasswordResult>, IPut
    {
        ///<summary>
        ///The username of the user.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The username of the user.", IsRequired=true)]
        public virtual string UserName { get; set; }
    }

    ///<summary>
    ///Authorizations represents what an entity (Group, User...) is allowed to do.
    ///</summary>
    [Route("/authorizations/{RoleId}/{ObjectId}", "DELETE")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Authorizations represents what an entity (Group, User...) is allowed to do.")]
    [DataContract]
    public partial class RevokeAuthorizationRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The Object identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Object identifier.")]
        public virtual string ObjectId { get; set; }

        ///<summary>
        ///The Role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Role identifier.")]
        public virtual int RoleId { get; set; }

        ///<summary>
        ///The Scope identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Scope identifier.")]
        public virtual string RequestedScopeId { get; set; }

        ///<summary>
        ///The object type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The object type.")]
        public virtual string ObjectType { get; set; }
    }

    ///<summary>
    ///Authorizations represents what an entity (Group, User...) is allowed to do.
    ///</summary>
    [Route("/authorizations/{ObjectId}", "DELETE")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Authorizations represents what an entity (Group, User...) is allowed to do.")]
    [DataContract]
    public partial class RevokeAuthorizationsRequest
        : IReturnVoid, IDelete
    {
        public RevokeAuthorizationsRequest()
        {
            AuthorizationsToRevoke = new List<GrantedAuthorization>{};
        }

        ///<summary>
        ///The object identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The object identifier.")]
        public virtual string ObjectId { get; set; }

        ///<summary>
        ///The list of authorization to revoke.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of authorization to revoke.")]
        public virtual List<GrantedAuthorization> AuthorizationsToRevoke { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/{ChildRoleId}/childOf", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class RoleIsHierarchicalChildOfParentRolesRequest
        : IReturn<List<RoleChildAssociation>>, IPost
    {
        public RoleIsHierarchicalChildOfParentRolesRequest()
        {
            ParentRoleIds = new List<int>{};
        }

        ///<summary>
        ///the child role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the child role identifier.")]
        public virtual int ChildRoleId { get; set; }

        ///<summary>
        ///The list of parent role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of parent role identifier.")]
        public virtual List<int> ParentRoleIds { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/custom/{RoleId}", "PUT")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class SaveCustomRoleRequest
        : IReturn<Role>, IPut
    {
        ///<summary>
        ///the role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the role identifier.")]
        public virtual int RoleId { get; set; }

        ///<summary>
        ///the name of the role.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the role.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the display name of the role.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name of the role.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///the description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the description.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///whether role is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="whether role is active.")]
        public virtual bool IsActive { get; set; }
    }

    ///<summary>
    ///Groups are entities wrapping identities objects (users or groups).
    ///</summary>
    [Route("/groups/{GroupId}/", "PUT")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Groups are entities wrapping identities objects (users or groups).")]
    [DataContract]
    public partial class SaveGroupRequest
        : IReturn<Group>, IPut
    {
        ///<summary>
        ///the description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the display name of the group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name of the group.")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///the object identifier of this group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the object identifier of this group.")]
        public virtual string GroupId { get; set; }
    }

    ///<summary>
    ///Users represents the persons interacting with the system.
    ///</summary>
    [Route("/users/{UserName}", "PUT")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Users represents the persons interacting with the system.")]
    [DataContract]
    public partial class SaveUserRequest
        : IReturn<User>, IPut
    {
        ///<summary>
        ///the user identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the user identifier.")]
        public virtual string UserId { get; set; }

        ///<summary>
        ///a value indicating whether the user is enabled.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether the user is enabled.")]
        public virtual bool Enabled { get; set; }

        ///<summary>
        ///the first name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the first name.")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///the last name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the last name.")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///the display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name.")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///the username of the user.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the username of the user.")]
        public virtual string UserName { get; set; }

        ///<summary>
        ///the phone number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the phone number.")]
        public virtual string Phone { get; set; }

        ///<summary>
        ///the mobile number.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the mobile number.")]
        public virtual string Mobile { get; set; }

        ///<summary>
        ///the department.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the department.")]
        public virtual string Department { get; set; }

        ///<summary>
        ///the job title.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the job title.")]
        public virtual string JobTitle { get; set; }

        ///<summary>
        ///the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the address.")]
        public virtual string Address { get; set; }

        ///<summary>
        ///the city.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the city.")]
        public virtual string City { get; set; }

        ///<summary>
        ///the state.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the state.")]
        public virtual string State { get; set; }

        ///<summary>
        ///the country.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the country.")]
        public virtual string Country { get; set; }

        ///<summary>
        ///the postal code.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the postal code.")]
        public virtual string PostalCode { get; set; }

        ///<summary>
        ///the preferred language.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the preferred language.")]
        public virtual string PreferredLanguage { get; set; }

        ///<summary>
        ///the password profile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the password profile.")]
        public virtual PasswordProfile PasswordProfile { get; set; }
    }

    ///<summary>
    ///Application are blocks of logical business features.
    ///</summary>
    [Route("/applications/{ApplicationId}/visibility", "PUT")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Application are blocks of logical business features.")]
    [DataContract]
    public partial class SetApplicationVisibilityRequest
        : IReturn<Application>, IPut
    {
        ///<summary>
        ///The id of the application
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the application")]
        public virtual int ApplicationId { get; set; }

        ///<summary>
        ///Whether the application is visible or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Whether the application is visible or not.")]
        public virtual bool IsVisible { get; set; }
    }

    ///<summary>
    ///Roles represents what a person/group is.
    ///</summary>
    [Route("/roles/{Id}", "PUT")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Roles represents what a person/group is.")]
    [DataContract]
    public partial class UpdateRoleRequest
        : IReturnVoid, IPut
    {
        ///<summary>
        ///the module identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the module identifier.")]
        public virtual int ModuleId { get; set; }

        ///<summary>
        ///the name of this role.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of this role.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the role identifier.")]
        public virtual int Id { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Setting
{

    ///<summary>
    ///Application are blocks of logical business features.
    ///</summary>
    [Route("/my/application", "GET")]
    [Api(Description="Application are blocks of logical business features.")]
    [DataContract]
    public partial class GetUserApplicationRequest
        : IReturn<Application>, IGet
    {
    }

    ///<summary>
    ///Application are blocks of logical business features.
    ///</summary>
    [Route("/my/culture", "GET")]
    [Api(Description="Application are blocks of logical business features.")]
    [DataContract]
    public partial class GetUserCultureRequest
        : IReturn<Culture>, IGet
    {
    }

    ///<summary>
    ///Application are blocks of logical business features.
    ///</summary>
    [Route("/my/scope/{Module}", "GET")]
    [Api(Description="Application are blocks of logical business features.")]
    [DataContract]
    public partial class GetUserScopeRequest
        : IReturn<Scope>, IGet
    {
        ///<summary>
        ///The module for which the scope will be define as default
        ///</summary>
        [DataMember]
        [ApiMember(Description="The module for which the scope will be define as default")]
        public virtual OvertureModule Module { get; set; }
    }

    ///<summary>
    ///Application are blocks of logical business features.
    ///</summary>
    [Route("/my/scope/{Module}/tree", "GET")]
    [Api(Description="Application are blocks of logical business features.")]
    [DataContract]
    public partial class GetUserScopeTreeRequest
        : IReturn<AuthorizedScope>, IGet
    {
        ///<summary>
        ///The module for which the scope tree is returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The module for which the scope tree is returned.")]
        public virtual OvertureModule Module { get; set; }

        ///<summary>
        ///The culture name in which language tha data will be returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name in which language tha data will be returned.")]
        public virtual string CultureName { get; set; }
    }

    ///<summary>
    ///Application are blocks of logical business features.
    ///</summary>
    [Route("/my/application/{ApplicationId}", "POST")]
    [Api(Description="Application are blocks of logical business features.")]
    [DataContract]
    public partial class SaveUserApplicationRequest
        : IReturnVoid, IPost
    {
        ///<summary>
        ///The id of the application
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the application")]
        public virtual int ApplicationId { get; set; }
    }

    ///<summary>
    ///Application are blocks of logical business features.
    ///</summary>
    [Route("/my/culture/{CultureIso}", "POST")]
    [Api(Description="Application are blocks of logical business features.")]
    [DataContract]
    public partial class SaveUserCultureRequest
        : IReturnVoid, IPost
    {
        ///<summary>
        ///The culture in iso format
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture in iso format")]
        public virtual string CultureIso { get; set; }
    }

    ///<summary>
    ///Application are blocks of logical business features.
    ///</summary>
    [Route("/my/scope/{Module}/{ScopeId}", "POST")]
    [Api(Description="Application are blocks of logical business features.")]
    [DataContract]
    public partial class SaveUserScopeRequest
        : IReturnVoid, IPost
    {
        ///<summary>
        ///The module for which the user will set the default scope
        ///</summary>
        [DataMember]
        [ApiMember(Description="The module for which the user will set the default scope")]
        public virtual OvertureModule Module { get; set; }

        ///<summary>
        ///The default scope id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The default scope id")]
        public virtual string ScopeId { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Requests.Taxes
{

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/taxCategory", "POST")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class CreateTaxCategoryRequest
        : IReturn<TaxCategory>, IPost
    {
        ///<summary>
        ///The id of the tax category.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the tax category.")]
        [Required]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The tax category name
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax category name")]
        [Required]
        public virtual string Name { get; set; }

        ///<summary>
        ///A value indicating whether this category is only for system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this category is only for system.")]
        public virtual bool IsSystem { get; set; }

        ///<summary>
        ///A value indicating whether this tax category is active or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this tax category is active or not.")]
        public virtual bool IsSupported { get; set; }

        ///<summary>
        ///The textual description of the tax category object.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The textual description of the tax category object.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The tax category display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax category display name.")]
        public virtual LocalizedString DisplayName { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/jurisdictionGroups", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [DataContract]
    public partial class CreateTaxJurisdictionGroupRequest
        : IReturn<TaxJurisdictionGroup>, IPost
    {
        ///<summary>
        ///the tax jurisdiction group id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax jurisdiction group id.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the tax jurisdiction group name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax jurisdiction group name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the textual description of the tax jurisdiction group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the textual description of the tax jurisdiction group.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the tax jurisdiction group display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax jurisdiction group display name.")]
        public virtual LocalizedString DisplayName { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/jurisdictions", "POST")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [DataContract]
    public partial class CreateTaxJurisdictionRequest
        : IReturn<TaxJurisdiction>, IPost
    {
        ///<summary>
        ///the unique id of tax jurisdiction.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique id of tax jurisdiction.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the code or name of the jurisdiction.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the code or name of the jurisdiction.")]
        public virtual string Code { get; set; }

        ///<summary>
        ///the country code where the associated tax rate is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the country code where the associated tax rate is applied.")]
        public virtual string CountryCode { get; set; }

        ///<summary>
        ///the region code where the associated tax rate is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the region code where the associated tax rate is applied.")]
        public virtual string RegionCode { get; set; }

        ///<summary>
        ///the from postal code of the postal code range where the associated tax rate is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the from postal code of the postal code range where the associated tax rate is applied.")]
        public virtual string FromPostalCode { get; set; }

        ///<summary>
        ///the to postal code of the postal code range where the associated tax rate is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the to postal code of the postal code range where the associated tax rate is applied.")]
        public virtual string ToPostalCode { get; set; }

        ///<summary>
        ///the textual description of the jurisdiction.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the textual description of the jurisdiction.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the jurisdiction display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the jurisdiction display name.")]
        public virtual LocalizedString DisplayName { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/rates/{ScopeId}", "POST")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class CreateTaxRateRequest
        : ScopedRequest, IReturn<TaxRate>, IPost
    {
        ///<summary>
        ///The tax rate id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax rate id.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The tax rate name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax rate name.")]
        [Required]
        public virtual string Name { get; set; }

        ///<summary>
        ///The tax rate description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax rate description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The tax rate display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax rate display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The tax rate percentage.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax rate percentage.")]
        public virtual double RatePercentage { get; set; }

        ///<summary>
        ///The tax category id associated to the tax rate.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax category id associated to the tax rate.")]
        public virtual Guid TaxCategoryId { get; set; }

        ///<summary>
        ///The tax jurisdiction group id associated to the tax rate.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax jurisdiction group id associated to the tax rate.")]
        public virtual Guid TaxJurisdictionGroupId { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/jurisdictionGroups/{Id}", "DELETE")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteTaxJurisdictionGroupRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The tax jurisdiction group id for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax jurisdiction group id for the request.")]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/jurisdictions/{Id}", "DELETE")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteTaxJurisdictionRequest
        : IReturnVoid, IDelete
    {
        ///<summary>
        ///The tax jurisdiction id for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax jurisdiction id for the request.")]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/rates/{ScopeId}/{Id}", "DELETE")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class DeleteTaxRateRequest
        : ScopedRequest, IReturnVoid, IDelete
    {
        ///<summary>
        ///The tax rate id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax rate id.")]
        [Required]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/taxCategories", "GET")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class GetTaxCategoriesListRequest
        : IReturn<GetTaxCategoriesListResponse>, IGet
    {
        ///<summary>
        ///The culture name. If not specified, all available cultures will be returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name. If not specified, all available cultures will be returned.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The starting index.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting index.")]
        public virtual int StartIndex { get; set; }

        ///<summary>
        ///Number of items to retrieve.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Number of items to retrieve.")]
        public virtual int MaximumItems { get; set; }

        ///<summary>
        ///Sorting field. If not specified will be sorted by IsSystem property.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Sorting field. If not specified will be sorted by IsSystem property.")]
        public virtual string SortField { get; set; }

        ///<summary>
        ///Sorting direction. Ascending is the default value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Sorting direction. Ascending is the default value.")]
        public virtual SortDirection SortDirection { get; set; }
    }

    [DataContract]
    public partial class GetTaxCategoriesListResponse
    {
        public GetTaxCategoriesListResponse()
        {
            TaxCategories = new List<TaxCategory>{};
        }

        ///<summary>
        ///The list of the tax categories.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of the tax categories.")]
        public virtual List<TaxCategory> TaxCategories { get; set; }

        ///<summary>
        ///The total count of tax categories.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total count of tax categories.")]
        public virtual int TotalCount { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/taxCategory/{Id}", "GET")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [ApiResponse(Description="The requested tax category was not found", StatusCode=404)]
    [DataContract]
    public partial class GetTaxCategoryByIdRequest
        : IReturn<TaxCategory>, IGet
    {
        ///<summary>
        ///The id of the tax category to receive.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the tax category to receive.")]
        [Required]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/jurisdictionGroups/{Id}", "GET")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetTaxJurisdictionGroupRequest
        : IReturn<TaxJurisdictionGroup>, IGet
    {
        ///<summary>
        ///The tax jurisdiction group id for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax jurisdiction group id for the request.")]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/jurisdictionGroups", "GET")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [DataContract]
    public partial class GetTaxJurisdictionGroupsRequest
        : IReturn<GetTaxJurisdictionGroupsResponse>, IGet
    {
    }

    [DataContract]
    public partial class GetTaxJurisdictionGroupsResponse
    {
        public GetTaxJurisdictionGroupsResponse()
        {
            TaxJurisdictionGroups = new List<TaxJurisdictionGroup>{};
        }

        ///<summary>
        ///The list of tax jurisdiction groups.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of tax jurisdiction groups.")]
        public virtual List<TaxJurisdictionGroup> TaxJurisdictionGroups { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/jurisdictions/{Id}", "GET")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetTaxJurisdictionRequest
        : IReturn<TaxJurisdiction>, IGet
    {
        ///<summary>
        ///The tax jurisdiction id for the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax jurisdiction id for the request.")]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/jurisdictions", "GET")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetTaxJurisdictionsRequest
        : IReturn<GetTaxJurisdictionsResponse>, IGet
    {
    }

    [DataContract]
    public partial class GetTaxJurisdictionsResponse
    {
        public GetTaxJurisdictionsResponse()
        {
            TaxJurisdictions = new List<TaxJurisdiction>{};
        }

        ///<summary>
        ///The list of tax jurisdictions.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of tax jurisdictions.")]
        public virtual List<TaxJurisdiction> TaxJurisdictions { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/rates/{ScopeId}/{Id}", "GET")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [ApiResponse(Description="Requested tax rate not found", StatusCode=404)]
    [DataContract]
    public partial class GetTaxRateByIdRequest
        : ScopedRequest, IReturn<TaxRate>, IGet
    {
        ///<summary>
        ///The tax rate id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax rate id.")]
        [Required]
        public virtual Guid Id { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/rates/{ScopeId}", "GET")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [DataContract]
    public partial class GetTaxRatesRequest
        : ScopedRequest, IReturn<GetTaxRatesResponse>, IGet
    {
        ///<summary>
        ///The culture name. If not specified, all available cultures will be returned.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The culture name. If not specified, all available cultures will be returned.")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///A value indicating whether to include parent scopes as well (true) or not (false)
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether to include parent scopes as well (true) or not (false)")]
        public virtual bool IncludeParentScopes { get; set; }
    }

    [DataContract]
    public partial class GetTaxRatesResponse
    {
        public GetTaxRatesResponse()
        {
            TaxRates = new List<TaxRate>{};
        }

        ///<summary>
        ///The list of the tax rates.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of the tax rates.")]
        public virtual List<TaxRate> TaxRates { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/taxCategory/{Id}", "PUT")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [DataContract]
    public partial class UpdateTaxCategoryRequest
        : IReturn<TaxCategory>, IPut
    {
        ///<summary>
        ///The id of the tax category.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The id of the tax category.")]
        [Required]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The tax category name
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax category name")]
        [Required]
        public virtual string Name { get; set; }

        ///<summary>
        ///A value indicating whether this category is only for system.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this category is only for system.")]
        public virtual bool IsSystem { get; set; }

        ///<summary>
        ///A value indicating whether this tax category is active or not.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A value indicating whether this tax category is active or not.")]
        public virtual bool IsSupported { get; set; }

        ///<summary>
        ///The textual description of the tax category object.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The textual description of the tax category object.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The tax category display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax category display name.")]
        public virtual LocalizedString DisplayName { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/jurisdictionGroups/{Id}", "PUT")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [DataContract]
    public partial class UpdateTaxJurisdictionGroupRequest
        : IReturn<TaxJurisdictionGroup>, IPut
    {
        ///<summary>
        ///the tax jurisdiction group id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax jurisdiction group id.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the tax jurisdiction group name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax jurisdiction group name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the textual description of the tax jurisdiction group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the textual description of the tax jurisdiction group.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the tax jurisdiction group display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax jurisdiction group display name.")]
        public virtual LocalizedString DisplayName { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/jurisdictionGroups/{Id}/associatedJurisdictions", "PUT")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [DataContract]
    public partial class UpdateTaxJurisdictionGroupsAssociatedJurisdictionsRequest
        : IReturn<TaxJurisdictionGroup>, IPut
    {
        public UpdateTaxJurisdictionGroupsAssociatedJurisdictionsRequest()
        {
            AssociatedTaxjuristictionCodes = new List<string>{};
        }

        ///<summary>
        ///The unique identifier of the tax jurisdiction group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique identifier of the tax jurisdiction group.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The list of associated tax jurisdiction names or codes of the requested tax jurisdiction group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of associated tax jurisdiction names or codes of the requested tax jurisdiction group.")]
        public virtual List<string> AssociatedTaxjuristictionCodes { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/jurisdictions/{Id}", "PUT")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [DataContract]
    public partial class UpdateTaxJurisdictionRequest
        : IReturn<TaxJurisdiction>, IPut
    {
        ///<summary>
        ///the unique id of jurisdiction.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the unique id of jurisdiction.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the code or name of the jurisdiction.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the code or name of the jurisdiction.")]
        public virtual string Code { get; set; }

        ///<summary>
        ///the country code where the associated tax rate is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the country code where the associated tax rate is applied.")]
        public virtual string CountryCode { get; set; }

        ///<summary>
        ///the region code where the associated tax rate is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the region code where the associated tax rate is applied.")]
        public virtual string RegionCode { get; set; }

        ///<summary>
        ///the from postal code of the postal code range where the associated tax rate is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the from postal code of the postal code range where the associated tax rate is applied.")]
        public virtual string FromPostalCode { get; set; }

        ///<summary>
        ///the to postal code of the postal code range where the associated tax rate is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the to postal code of the postal code range where the associated tax rate is applied.")]
        public virtual string ToPostalCode { get; set; }

        ///<summary>
        ///the textual description of the jurisdiction.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the textual description of the jurisdiction.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the jurisdiction display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the jurisdiction display name.")]
        public virtual LocalizedString DisplayName { get; set; }
    }

    ///<summary>
    ///Taxes are entities used to define tax rules for orders.
    ///</summary>
    [Route("/taxes/rates/{ScopeId}/{Id}", "PUT")]
    [Api(Description="Taxes are entities used to define tax rules for orders.")]
    [ApiResponse(Description="You must be authenticated for using this request", StatusCode=401)]
    [ApiResponse(Description="Requested tax rate not found", StatusCode=404)]
    [DataContract]
    public partial class UpdateTaxRateRequest
        : ScopedRequest, IReturn<TaxRate>, IPut
    {
        ///<summary>
        ///The tax rate id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax rate id.")]
        [Required]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///The tax rate name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax rate name.")]
        [Required]
        public virtual string Name { get; set; }

        ///<summary>
        ///The tax rate description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax rate description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///The tax rate display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax rate display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///The tax rate percentage.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax rate percentage.")]
        public virtual double RatePercentage { get; set; }

        ///<summary>
        ///The tax category id associated to the tax rate.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax category id associated to the tax rate.")]
        public virtual Guid TaxCategoryId { get; set; }

        ///<summary>
        ///The tax jurisdiction group id associated to the tax rate.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The tax jurisdiction group id associated to the tax rate.")]
        public virtual Guid TaxJurisdictionGroupId { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Search
{

    [DataContract]
    public partial class Document
        : EntityBase<string>
    {
    }

    [DataContract]
    public partial class Facet
    {
        public Facet()
        {
            Values = new List<FacetValue>{};
        }

        ///<summary>
        ///Gets the Facet Type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets the Facet Type.")]
        public virtual FacetType FacetType { get; set; }

        ///<summary>
        ///the title.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the title.")]
        public virtual string Title { get; set; }

        ///<summary>
        ///the name which is used to refer to this facet.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name which is used to refer to this facet.")]
        public virtual string FieldName { get; set; }

        ///<summary>
        ///the different values available for this facet.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the different values available for this facet.")]
        public virtual List<FacetValue> Values { get; set; }

        ///<summary>
        ///the query.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the query.")]
        public virtual string Query { get; set; }

        ///<summary>
        ///Number of documents matching the facet value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Number of documents matching the facet value.")]
        public virtual int Count { get; set; }

        ///<summary>
        ///the start value of all the ranges.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the start value of all the ranges.")]
        public virtual string StartValue { get; set; }

        ///<summary>
        ///the end value of all the ranges.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the end value of all the ranges.")]
        public virtual string EndValue { get; set; }

        ///<summary>
        ///the size of the gap of all the ranges.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the size of the gap of all the ranges.")]
        public virtual string GapSize { get; set; }

        ///<summary>
        ///the type of the data used in the ranges.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of the data used in the ranges.")]
        public virtual string DataType { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class FacetPredicate
    {
        public FacetPredicate()
        {
            Values = new List<string>{};
        }

        ///<summary>
        ///Gets the Facet Type.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Gets the Facet Type.")]
        public virtual FacetType FacetType { get; set; }

        ///<summary>
        ///The name which is used to refer to this facet
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name which is used to refer to this facet")]
        public virtual string FieldName { get; set; }

        ///<summary>
        ///The values
        ///</summary>
        [DataMember]
        [ApiMember(Description="The values")]
        public virtual List<string> Values { get; set; }

        ///<summary>
        ///The values operator
        ///</summary>
        [DataMember]
        [ApiMember(Description="The values operator")]
        public virtual FacetValuesOperator OperatorType { get; set; }

        ///<summary>
        ///Exclude specified filter for facets count
        ///</summary>
        [DataMember]
        [ApiMember(Description="Exclude specified filter for facets count")]
        public virtual bool ExcludeFilterForFacetsCount { get; set; }

        ///<summary>
        ///The query expression
        ///</summary>
        [DataMember]
        [ApiMember(Description="The query expression")]
        public virtual string QueryExpression { get; set; }

        ///<summary>
        ///The range minimum value
        ///</summary>
        [DataMember]
        [ApiMember(Description="The range minimum value")]
        public virtual string MinimumValue { get; set; }

        ///<summary>
        ///The range maximum value
        ///</summary>
        [DataMember]
        [ApiMember(Description="The range maximum value")]
        public virtual string MaximumValue { get; set; }
    }

    [DataContract]
    public enum FacetType
    {
        Unspecified,
        Field,
        Range,
        Query,
    }

    [DataContract]
    public partial class FacetValue
    {
        ///<summary>
        ///the minimum of the range facet value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the minimum of the range facet value.")]
        public virtual string MinimumValue { get; set; }

        ///<summary>
        ///the maximum value of the range facet value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum value of the range facet value.")]
        public virtual string MaximumValue { get; set; }

        ///<summary>
        ///the number of documents matching this range facet value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the number of documents matching this range facet value.")]
        public virtual int Count { get; set; }

        ///<summary>
        ///the facet value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the facet value.")]
        public virtual string Value { get; set; }

        ///<summary>
        ///the facet display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the facet display name.")]
        public virtual string DisplayName { get; set; }
    }

    [DataContract]
    public enum FacetValuesOperator
    {
        Or,
        And,
    }

    [DataContract]
    public partial class ProductDocument
        : Document
    {
        public ProductDocument()
        {
            InventoryLocationStatuses = new List<InventoryItemAvailability>{};
        }

        ///<summary>
        ///the product identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the product identifier.")]
        public virtual string ProductId { get; set; }

        ///<summary>
        ///the catalog identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the catalog identifier.")]
        public virtual string CatalogId { get; set; }

        ///<summary>
        ///the sku.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sku.")]
        public virtual string Sku { get; set; }

        ///<summary>
        ///[Obsolete] the list price (default price).
        ///</summary>
        [DataMember]
        [ApiMember(Description="[Obsolete] the list price (default price).")]
        public virtual double? ListPrice { get; set; }

        ///<summary>
        ///[Obsolete] the default price.
        ///</summary>
        [DataMember]
        [ApiMember(Description="[Obsolete] the default price.")]
        public virtual double? DefaultPrice { get; set; }

        ///<summary>
        ///the current price according to the date sent in the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the current price according to the date sent in the request.")]
        public virtual double? Price { get; set; }

        ///<summary>
        ///the current price according to the date sent in the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the current price according to the date sent in the request.")]
        public virtual double? CurrentPrice { get; set; }

        ///<summary>
        ///The current regular price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The current regular price for one instance of the item (quantity = 1), at the moment that the item is to be processed by the workflow.")]
        public virtual double? RegularPrice { get; set; }

        ///<summary>
        ///the inventory statuses in each inventory location sent in the request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the inventory statuses in each inventory location sent in the request.")]
        public virtual List<InventoryItemAvailability> InventoryLocationStatuses { get; set; }

        ///<summary>
        ///the pricing for the document as a single entity. If the document represent a group of entities, this property is null
        ///</summary>
        [DataMember]
        [ApiMember(Description="the pricing for the document as a single entity. If the document represent a group of entities, this property is null")]
        public virtual EntityPricing EntityPricing { get; set; }

        ///<summary>
        ///the pricing for the document as a group of entities. If the document represent a single entity, this property is null
        ///</summary>
        [DataMember]
        [ApiMember(Description="the pricing for the document as a group of entities. If the document represent a single entity, this property is null")]
        public virtual GroupPricing GroupPricing { get; set; }
    }

    [Flags]
    [DataContract]
    public enum ProductSearchIndexType
    {
        All = 1,
        Details = 2,
        Categories = 4,
        Prices = 8,
    }

    [DataContract]
    public partial class ProductSearchResult
    {
        public ProductSearchResult()
        {
            Facets = new List<Facet>{};
            Suggestions = new List<Suggestion>{};
            Documents = new List<ProductDocument>{};
        }

        ///<summary>
        ///the index of the first record in the list from which to start paging.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the index of the first record in the list from which to start paging.")]
        public virtual int StartIndex { get; set; }

        ///<summary>
        ///the total number of records matching the search request, irrespective of the page.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the total number of records matching the search request, irrespective of the page.")]
        public virtual long TotalCount { get; set; }

        ///<summary>
        ///a list of Facet corresponding to the search request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of Facet corresponding to the search request.")]
        public virtual List<Facet> Facets { get; set; }

        ///<summary>
        ///a list of Suggestion that could return more meaningful results for the search term entered.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of Suggestion that could return more meaningful results for the search term entered.")]
        public virtual List<Suggestion> Suggestions { get; set; }

        ///<summary>
        ///the auto-corrected search terms used to return values.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the auto-corrected search terms used to return values.")]
        public virtual string CorrectedSearchTerms { get; set; }

        ///<summary>
        ///a list of Document matching the search request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of Document matching the search request.")]
        public virtual List<ProductDocument> Documents { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class SearchFilter
    {
        ///<summary>
        ///the name of the field to filter.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the field to filter.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the display name of the filter.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name of the filter.")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///the value to use to filter the data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the value to use to filter the data.")]
        public virtual string Value { get; set; }
    }

    [DataContract]
    public partial class SearchRange
    {
        ///<summary>
        ///the name of the field to filter.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the field to filter.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the display name of the filter.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name of the filter.")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///the minimum value to use to filter the data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the minimum value to use to filter the data.")]
        public virtual double? SelectedMin { get; set; }

        ///<summary>
        ///the maximum value to use to filter the data.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the maximum value to use to filter the data.")]
        public virtual double? SelectedMax { get; set; }
    }

    [DataContract]
    public partial class SearchResult
    {
        public SearchResult()
        {
            Facets = new List<Facet>{};
            Suggestions = new List<Suggestion>{};
            Documents = new List<Document>{};
        }

        ///<summary>
        ///the index of the first record in the list from which to start paging.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the index of the first record in the list from which to start paging.")]
        public virtual int StartIndex { get; set; }

        ///<summary>
        ///the total number of records matching the search request, irrespective of the page.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the total number of records matching the search request, irrespective of the page.")]
        public virtual long TotalCount { get; set; }

        ///<summary>
        ///a list of Facet corresponding to the search request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of Facet corresponding to the search request.")]
        public virtual List<Facet> Facets { get; set; }

        ///<summary>
        ///a list of Suggestion that could return more meaningful results for the search term entered.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of Suggestion that could return more meaningful results for the search term entered.")]
        public virtual List<Suggestion> Suggestions { get; set; }

        ///<summary>
        ///the auto-corrected search terms used to return values.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the auto-corrected search terms used to return values.")]
        public virtual string CorrectedSearchTerms { get; set; }

        ///<summary>
        ///a list of Document matching the search request.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a list of Document matching the search request.")]
        public virtual List<Document> Documents { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class Suggestion
    {
        ///<summary>
        ///the title of the suggestion.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the title of the suggestion.")]
        public virtual string Title { get; set; }

        ///<summary>
        ///The property bag containing extended properties for this entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The property bag containing extended properties for this entity.")]
        public virtual PropertyBag PropertyBag { get; set; }
    }

    [DataContract]
    public partial class VariantSearchConfiguration
    {
        ///<summary>
        ///the scope for this configuration.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the scope for this configuration.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the product definition name to apply this configuration.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the product definition name to apply this configuration.")]
        public virtual string ProductDefinitionName { get; set; }

        ///<summary>
        ///the search option for the specified product definition.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the search option for the specified product definition.")]
        public virtual VariantSearchOption SearchOption { get; set; }

        ///<summary>
        ///the grouping attribute to be used with the specified search option.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the grouping attribute to be used with the specified search option.")]
        public virtual string GroupingVariantAttributeId { get; set; }
    }

    [DataContract]
    public enum VariantSearchOption
    {
        SingleRecordPerProduct,
        GroupByKvaValue,
        SingleRecordPerVariant,
        GroupByCustomAttribute,
    }
}

namespace Orckestra.Overture.ServiceModel.Search.Pricing
{

    [DataContract]
    public partial class EntityPricing
    {
        ///<summary>
        ///the current price. This price is the one that will be applied in the cart
        ///</summary>
        [DataMember]
        [ApiMember(Description="the current price. This price is the one that will be applied in the cart")]
        public virtual double? CurrentPrice { get; set; }

        ///<summary>
        ///the price list information for the current price
        ///</summary>
        [DataMember]
        [ApiMember(Description="the price list information for the current price")]
        public virtual PriceListSummary CurrentPricePriceList { get; set; }

        ///<summary>
        ///the regular price. This price is the one from the Regular price list
        ///</summary>
        [DataMember]
        [ApiMember(Description="the regular price. This price is the one from the Regular price list")]
        public virtual double? RegularPrice { get; set; }
    }

    [DataContract]
    public partial class GroupPricing
    {
        public GroupPricing()
        {
            CurrentPricePriceLists = new List<PriceListSummary>{};
        }

        ///<summary>
        ///the starting (minimum) current price of this group
        ///</summary>
        [DataMember]
        [ApiMember(Description="the starting (minimum) current price of this group")]
        public virtual double? FromCurrentPrice { get; set; }

        ///<summary>
        ///the highest (maximum) current price of this group
        ///</summary>
        [DataMember]
        [ApiMember(Description="the highest (maximum) current price of this group")]
        public virtual double? ToCurrentPrice { get; set; }

        ///<summary>
        ///the information about all the price lists found for the current price in this group
        ///</summary>
        [DataMember]
        [ApiMember(Description="the information about all the price lists found for the current price in this group")]
        public virtual List<PriceListSummary> CurrentPricePriceLists { get; set; }

        ///<summary>
        ///the starting (minimum) regular price of this group
        ///</summary>
        [DataMember]
        [ApiMember(Description="the starting (minimum) regular price of this group")]
        public virtual double? FromRegularPrice { get; set; }

        ///<summary>
        ///the highest (maximum) regular price of this group
        ///</summary>
        [DataMember]
        [ApiMember(Description="the highest (maximum) regular price of this group")]
        public virtual double? ToRegularPrice { get; set; }
    }

    [DataContract]
    public partial class PriceListSummary
    {
        ///<summary>
        ///the price list name
        ///</summary>
        [DataMember]
        [ApiMember(Description="the price list name")]
        public virtual string PriceListId { get; set; }

        ///<summary>
        ///the type of the price list
        ///</summary>
        [DataMember]
        [ApiMember(Description="the type of the price list")]
        public virtual string PriceListType { get; set; }

        ///<summary>
        ///the price list category
        ///</summary>
        [DataMember]
        [ApiMember(Description="the price list category")]
        public virtual string PriceListCategory { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.SearchQueries
{

    public partial class FindSearchQueriesResult
    {
        public FindSearchQueriesResult()
        {
            SearchQueries = new List<SearchQuery>{};
        }

        ///<summary>
        ///List of Search Queries found
        ///</summary>
        [DataMember]
        [ApiMember(Description="List of Search Queries found")]
        public virtual List<SearchQuery> SearchQueries { get; set; }

        ///<summary>
        ///Amount of results found
        ///</summary>
        [DataMember]
        [ApiMember(Description="Amount of results found")]
        public virtual int Count { get; set; }
    }

    public partial class SavedFacetPredicate
    {
        public SavedFacetPredicate()
        {
            Values = new List<string>{};
        }

        ///<summary>
        ///The name of the facet
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the facet")]
        public virtual string FacetName { get; set; }

        ///<summary>
        ///The type of the value
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the value")]
        public virtual SavedFacetPredicateValueType ValueType { get; set; }

        ///<summary>
        ///The type of the operator to use when using many values
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the operator to use when using many values")]
        public virtual FacetValuesOperator OperatorType { get; set; }

        ///<summary>
        ///The values of the facet predicate
        ///</summary>
        [DataMember]
        [ApiMember(Description="The values of the facet predicate")]
        public virtual List<string> Values { get; set; }
    }

    [DataContract]
    public enum SavedFacetPredicateValueType
    {
        Lookup,
        Field,
        Range,
        Category,
    }

    public partial class SavedQuerySorting
    {
        ///<summary>
        ///the sorting direction
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sorting direction")]
        public virtual SortDirection Direction { get; set; }

        ///<summary>
        ///the name of the property to be sorted
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the property to be sorted")]
        public virtual string PropertyName { get; set; }
    }

    public partial class SearchQuery
    {
        public SearchQuery()
        {
            SupportedCultures = new List<string>{};
            QueryData = new List<SearchQueryData>{};
        }

        ///<summary>
        ///Id of the Search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="Id of the Search query")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///Scope of the Search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="Scope of the Search query")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///Name of the search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="Name of the search query")]
        public virtual string Name { get; set; }

        ///<summary>
        ///Category of the search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="Category of the search query")]
        public virtual string Category { get; set; }

        ///<summary>
        ///The type of the search query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the search query")]
        public virtual SearchQueryType QueryType { get; set; }

        ///<summary>
        ///List of all supported cultures of the search query. If the query is auto-localizable, contains the list of the catalog supported cultures
        ///</summary>
        [DataMember]
        [ApiMember(Description="List of all supported cultures of the search query. If the query is auto-localizable, contains the list of the catalog supported cultures")]
        public virtual List<string> SupportedCultures { get; set; }

        ///<summary>
        ///True if the query supports all the cultures of the catalog
        ///</summary>
        [DataMember]
        [ApiMember(Description="True if the query supports all the cultures of the catalog")]
        public virtual bool SupportsAllCulturesInCatalog { get; set; }

        ///<summary>
        ///Date the entity was created
        ///</summary>
        [DataMember]
        [ApiMember(Description="Date the entity was created")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///Identifier of the operator who created the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="Identifier of the operator who created the entity")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///Date that the last modification was applied to the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="Date that the last modification was applied to the entity")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///Identifier of the operator who last modified the entity
        ///</summary>
        [DataMember]
        [ApiMember(Description="Identifier of the operator who last modified the entity")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///The data used to build a search request
        ///</summary>
        [DataMember]
        [ApiMember(Description="The data used to build a search request")]
        public virtual List<SearchQueryData> QueryData { get; set; }
    }

    public partial class SearchQueryData
    {
        public SearchQueryData()
        {
            FacetPredicates = new List<SavedFacetPredicate>{};
            ElevatedIds = new string[]{};
            ProductSkus = new string[]{};
            Sortings = new List<SavedQuerySorting>{};
        }

        ///<summary>
        ///Culture Name. Should be * if the QueryData is auto-localizable
        ///</summary>
        [DataMember]
        [ApiMember(Description="Culture Name. Should be * if the QueryData is auto-localizable")]
        public virtual string CultureName { get; set; }

        ///<summary>
        ///The facet predicates to include in the Search Query
        ///</summary>
        [DataMember]
        [ApiMember(Description="The facet predicates to include in the Search Query")]
        public virtual List<SavedFacetPredicate> FacetPredicates { get; set; }

        ///<summary>
        ///The elevated ids
        ///</summary>
        [DataMember]
        [ApiMember(Description="The elevated ids")]
        public virtual string[] ElevatedIds { get; set; }

        ///<summary>
        ///The product skus
        ///</summary>
        [DataMember]
        [ApiMember(Description="The product skus")]
        public virtual string[] ProductSkus { get; set; }

        ///<summary>
        ///the sorting parameter of the query
        ///</summary>
        [DataMember]
        [ApiMember(Description="the sorting parameter of the query")]
        public virtual List<SavedQuerySorting> Sortings { get; set; }
    }

    [DataContract]
    public partial class SearchQueryResult
    {
        public SearchQueryResult()
        {
            SelectedFacets = new List<SelectedFacet>{};
        }

        ///<summary>
        ///The selected facets generated by the SearchQuery
        ///</summary>
        [DataMember]
        [ApiMember(Description="The selected facets generated by the SearchQuery")]
        public virtual List<SelectedFacet> SelectedFacets { get; set; }

        ///<summary>
        ///The result generated by the search request
        ///</summary>
        [DataMember]
        [ApiMember(Description="The result generated by the search request")]
        public virtual SearchResult Result { get; set; }
    }

    [DataContract]
    public enum SearchQueryType
    {
        Category,
        Merchandising,
        ProductSet,
    }

    [DataContract]
    public partial class SelectedFacet
    {
        public SelectedFacet()
        {
            Values = new List<string>{};
        }

        ///<summary>
        ///Name of the facet
        ///</summary>
        [DataMember]
        [ApiMember(Description="Name of the facet")]
        public virtual string FacetName { get; set; }

        ///<summary>
        ///Selected values for the facet
        ///</summary>
        [DataMember]
        [ApiMember(Description="Selected values for the facet")]
        public virtual List<string> Values { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Security
{

    [DataContract]
    public partial class Application
    {
        ///<summary>
        ///The Application identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Application identifier.")]
        public virtual int Id { get; set; }

        ///<summary>
        ///The Name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///a value indicating whether or not an application is visible
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether or not an application is visible")]
        public virtual bool IsVisible { get; set; }

        ///<summary>
        ///a value indicating whether or not an application url is absolute
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether or not an application url is absolute")]
        public virtual bool IsAbsoluteUrl { get; set; }

        ///<summary>
        ///The url.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The url.")]
        public virtual string Url { get; set; }

        ///<summary>
        ///The icon uri.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The icon uri.")]
        public virtual string IconUri { get; set; }

        ///<summary>
        ///The display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The display name.")]
        public virtual LocalizedString DisplayName { get; set; }
    }

    [DataContract]
    public partial class FindGroupsResult
    {
        public FindGroupsResult()
        {
            Groups = new List<Group>{};
        }

        ///<summary>
        ///The list of groups
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of groups")]
        public virtual List<Group> Groups { get; set; }

        ///<summary>
        ///Shows the total number of query results which may differ with returned results if we use page them
        ///</summary>
        [DataMember]
        [ApiMember(Description="Shows the total number of query results which may differ with returned results if we use page them")]
        public virtual int TotalResults { get; set; }
    }

    [DataContract]
    public partial class FindUsersByNameResult
    {
        public FindUsersByNameResult()
        {
            Users = new List<User>{};
        }

        ///<summary>
        ///The list of user
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of user")]
        public virtual List<User> Users { get; set; }

        ///<summary>
        ///If there are more users available than the Users list
        ///</summary>
        [DataMember]
        [ApiMember(Description="If there are more users available than the Users list")]
        public virtual bool MoreUsersAvailable { get; set; }

        ///<summary>
        ///Shows the total number of users matching the provided name
        ///</summary>
        [DataMember]
        [ApiMember(Description="Shows the total number of users matching the provided name")]
        public virtual int TotalResults { get; set; }
    }

    [DataContract]
    public partial class GetGroupMembersWithPagingResult
    {
        public GetGroupMembersWithPagingResult()
        {
            Users = new List<User>{};
        }

        ///<summary>
        ///The list of user for this group
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of user for this group")]
        public virtual List<User> Users { get; set; }

        ///<summary>
        ///The total of users
        ///</summary>
        [DataMember]
        [ApiMember(Description="The total of users")]
        public virtual int UsersTotal { get; set; }
    }

    [DataContract]
    public partial class GrantedAuthorization
    {
        ///<summary>
        ///The Role Id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Role Id")]
        public virtual int RoleId { get; set; }

        ///<summary>
        ///The Scope Id
        ///</summary>
        [DataMember]
        [ApiMember(Description="The Scope Id")]
        public virtual string RequestedScopeId { get; set; }

        ///<summary>
        ///The object Type
        ///</summary>
        [DataMember]
        [ApiMember(Description="The object Type")]
        public virtual string ObjectType { get; set; }
    }

    [DataContract]
    public partial class Group
    {
        ///<summary>
        ///the description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the description.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name.")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///the object identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the object identifier.")]
        public virtual string GroupId { get; set; }

        ///<summary>
        ///the MailNickName
        ///</summary>
        [DataMember]
        [ApiMember(Description="the MailNickName")]
        public virtual string MailNickName { get; set; }
    }

    [DataContract]
    public partial class MembershipAuthorization
    {
        ///<summary>
        ///The type of the object.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the object.")]
        public virtual string ObjectType { get; set; }

        ///<summary>
        ///The scope identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The scope identifier.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The module identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The module identifier.")]
        public virtual int ModuleId { get; set; }

        ///<summary>
        ///The module name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The module name.")]
        public virtual string ModuleName { get; set; }

        ///<summary>
        ///The role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The role identifier.")]
        public virtual int RoleId { get; set; }

        ///<summary>
        ///The role name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The role name.")]
        public virtual string RoleName { get; set; }

        ///<summary>
        ///The localized role Display Name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The localized role Display Name.")]
        public virtual LocalizedString RoleDisplayName { get; set; }

        ///<summary>
        ///The date of creation.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The date of creation.")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///True if is system role
        ///</summary>
        [DataMember]
        [ApiMember(Description="True if is system role")]
        public virtual bool IsSystem { get; set; }
    }

    [DataContract]
    public partial class MembershipSettings
    {
        ///<summary>
        ///Determine if modification is user management is enabled.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determine if modification is user management is enabled.")]
        public virtual bool UserManagementEnabled { get; set; }
    }

    [DataContract]
    public partial class Module
    {
        ///<summary>
        ///the Module identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Module identifier.")]
        public virtual int ModuleId { get; set; }

        ///<summary>
        ///the Name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the Created date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Created date.")]
        public virtual DateTime CreatedDate { get; set; }

        ///<summary>
        ///the Created by.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the Created by.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///a value indicating whether or not an application is visible
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether or not an application is visible")]
        public virtual bool IsVisible { get; set; }
    }

    [DataContract]
    public partial class PasswordProfile
    {
        ///<summary>
        ///the password.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the password.")]
        public virtual string Password { get; set; }

        ///<summary>
        ///the password should be changed or not at the next user's login.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the password should be changed or not at the next user's login.")]
        public virtual bool? ForceChangePasswordNextLogin { get; set; }
    }

    [DataContract]
    public enum ResetUserPasswordMode
    {
        WithoutTemporaryPassword,
        WithTemporaryPassword,
    }

    [DataContract]
    public partial class ResetUserPasswordResult
    {
        ///<summary>
        ///The list of user
        ///</summary>
        [DataMember]
        [ApiMember(Description="The list of user")]
        public virtual string TemporaryPassword { get; set; }

        ///<summary>
        ///the ResetUserPasswordMode
        ///</summary>
        [DataMember]
        [ApiMember(Description="the ResetUserPasswordMode")]
        public virtual ResetUserPasswordMode ResetUserPasswordMode { get; set; }
    }

    [DataContract]
    public partial class Role
    {
        public Role()
        {
            ChildrenRoles = new List<Role>{};
        }

        ///<summary>
        ///the role identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the role identifier.")]
        public virtual int Id { get; set; }

        ///<summary>
        ///the module identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the module identifier.")]
        public virtual int ModuleId { get; set; }

        ///<summary>
        ///the name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///the description.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the description.")]
        public virtual LocalizedString Description { get; set; }

        ///<summary>
        ///the created date
        ///</summary>
        [DataMember]
        [ApiMember(Description="the created date")]
        public virtual DateTime Created { get; set; }

        ///<summary>
        ///the created by value.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the created by value.")]
        public virtual string CreatedBy { get; set; }

        ///<summary>
        ///the last modified by.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the last modified by.")]
        public virtual string LastModifiedBy { get; set; }

        ///<summary>
        ///the last modified date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the last modified date.")]
        public virtual DateTime LastModified { get; set; }

        ///<summary>
        ///a value indicating whether or not role can be modified.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether or not role can be modified.")]
        public virtual bool IsReadOnly { get; set; }

        ///<summary>
        ///a value indicating whether or not role is active.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether or not role is active.")]
        public virtual bool IsActive { get; set; }

        ///<summary>
        ///the children roles.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the children roles.")]
        public virtual List<Role> ChildrenRoles { get; set; }
    }

    [DataContract]
    public partial class RoleChildAssociation
    {
        ///<summary>
        ///The parent role identifier
        ///</summary>
        [DataMember]
        [ApiMember(Description="The parent role identifier")]
        public virtual int ParentRoleId { get; set; }

        ///<summary>
        ///Determine if is child of the parent role id
        ///</summary>
        [DataMember]
        [ApiMember(Description="Determine if is child of the parent role id")]
        public virtual bool IsChildOf { get; set; }
    }

    [DataContract]
    public partial class Token
    {
        ///<summary>
        ///the value of the token.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the value of the token.")]
        public virtual string Value { get; set; }

        ///<summary>
        ///the expiry date of the token.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the expiry date of the token.")]
        public virtual DateTime ExpiryDate { get; set; }
    }

    [DataContract]
    public partial class User
    {
        ///<summary>
        ///the user identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the user identifier.")]
        public virtual string UserId { get; set; }

        ///<summary>
        ///a value indicating whether or not user is enabled.
        ///</summary>
        [DataMember]
        [ApiMember(Description="a value indicating whether or not user is enabled.")]
        public virtual bool? Enabled { get; set; }

        ///<summary>
        ///the first name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the first name.")]
        public virtual string FirstName { get; set; }

        ///<summary>
        ///the last name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the last name.")]
        public virtual string LastName { get; set; }

        ///<summary>
        ///the display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the display name.")]
        public virtual string DisplayName { get; set; }

        ///<summary>
        ///the name of the user.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name of the user.")]
        public virtual string UserName { get; set; }

        ///<summary>
        ///the phone.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the phone.")]
        public virtual string Phone { get; set; }

        ///<summary>
        ///the mobile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the mobile.")]
        public virtual string Mobile { get; set; }

        ///<summary>
        ///the department.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the department.")]
        public virtual string Department { get; set; }

        ///<summary>
        ///the job title.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the job title.")]
        public virtual string JobTitle { get; set; }

        ///<summary>
        ///the address.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the address.")]
        public virtual string Address { get; set; }

        ///<summary>
        ///the city.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the city.")]
        public virtual string City { get; set; }

        ///<summary>
        ///the state.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the state.")]
        public virtual string State { get; set; }

        ///<summary>
        ///the country.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the country.")]
        public virtual string Country { get; set; }

        ///<summary>
        ///the postal code.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the postal code.")]
        public virtual string PostalCode { get; set; }

        ///<summary>
        ///the preferred language.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the preferred language.")]
        public virtual string PreferredLanguage { get; set; }

        ///<summary>
        ///the password profile.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the password profile.")]
        public virtual PasswordProfile PasswordProfile { get; set; }
    }

    [DataContract]
    public enum UserManagementSortCustomRolesAttributes
    {
        DisplayName,
        Status,
    }

    [DataContract]
    public enum UserManagementSortGroupAttributes
    {
        DisplayName,
        ObjectID,
    }

    [DataContract]
    public enum UserManagementSortUserAttributes
    {
        DisplayName,
        FirstName,
        LastName,
        UserName,
    }

    [DataContract]
    public partial class UserPermissions
    {
        public UserPermissions()
        {
            RolesClaimsValues = new List<string>{};
            SIDs = new List<string>{};
        }

        ///<summary>
        ///the user principal name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the user principal name.")]
        public virtual string Upn { get; set; }

        ///<summary>
        ///the name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the roles claims.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the roles claims.")]
        public virtual List<string> RolesClaimsValues { get; set; }

        ///<summary>
        ///the SIDs.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the SIDs.")]
        public virtual List<string> SIDs { get; set; }

        ///<summary>
        ///the user primary Sid.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the user primary Sid.")]
        public virtual string PrimarySId { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Taxes
{

    [DataContract]
    public partial class TaxJurisdiction
    {
        ///<summary>
        ///the tax jurisdiction id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax jurisdiction id.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the tax jurisdiction code or name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax jurisdiction code or name.")]
        public virtual string Code { get; set; }

        ///<summary>
        ///the country code where the associated tax rate is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the country code where the associated tax rate is applied.")]
        public virtual string CountryCode { get; set; }

        ///<summary>
        ///the region code where the associated tax rate is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the region code where the associated tax rate is applied.")]
        public virtual string RegionCode { get; set; }

        ///<summary>
        ///the from postal code of the postal code range where the associated tax rate is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the from postal code of the postal code range where the associated tax rate is applied.")]
        public virtual string FromPostalCode { get; set; }

        ///<summary>
        ///the postal code range where the associated tax rate is applied.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the postal code range where the associated tax rate is applied.")]
        public virtual string ToPostalCode { get; set; }

        ///<summary>
        ///the textual description of the jurisdiction.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the textual description of the jurisdiction.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the jurisdiction display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the jurisdiction display name.")]
        public virtual LocalizedString DisplayName { get; set; }
    }

    [DataContract]
    public partial class TaxJurisdictionGroup
    {
        public TaxJurisdictionGroup()
        {
            TaxJurisdictions = new List<TaxJurisdiction>{};
        }

        ///<summary>
        ///the tax jurisdiction group id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax jurisdiction group id.")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///the tax jurisdiction group name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax jurisdiction group name.")]
        public virtual string Name { get; set; }

        ///<summary>
        ///the textual description of the tax jurisdiction group.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the textual description of the tax jurisdiction group.")]
        public virtual string Description { get; set; }

        ///<summary>
        ///the tax jurisdiction group display name.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the tax jurisdiction group display name.")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///List of tax jurisdiction associated to the jurisdiction groups
        ///</summary>
        [DataMember]
        [ApiMember(Description="List of tax jurisdiction associated to the jurisdiction groups")]
        public virtual List<TaxJurisdiction> TaxJurisdictions { get; set; }
    }

    [DataContract]
    public partial class TaxRate
    {
        ///<summary>
        ///Tax rate id
        ///</summary>
        [DataMember]
        [ApiMember(Description="Tax rate id")]
        public virtual Guid Id { get; set; }

        ///<summary>
        ///Tax rate name
        ///</summary>
        [DataMember]
        [ApiMember(Description="Tax rate name")]
        public virtual string Name { get; set; }

        ///<summary>
        ///Display name
        ///</summary>
        [DataMember]
        [ApiMember(Description="Display name")]
        public virtual LocalizedString DisplayName { get; set; }

        ///<summary>
        ///Description
        ///</summary>
        [DataMember]
        [ApiMember(Description="Description")]
        public virtual string Description { get; set; }

        ///<summary>
        ///Rate percentage
        ///</summary>
        [DataMember]
        [ApiMember(Description="Rate percentage")]
        public virtual double RatePercentage { get; set; }

        ///<summary>
        ///Scope id
        ///</summary>
        [DataMember]
        [ApiMember(Description="Scope id")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///Tax category id
        ///</summary>
        [DataMember]
        [ApiMember(Description="Tax category id")]
        public virtual Guid TaxCategoryId { get; set; }

        ///<summary>
        ///Tax jurisdiction group id
        ///</summary>
        [DataMember]
        [ApiMember(Description="Tax jurisdiction group id")]
        public virtual Guid TaxJurisdictionGroupId { get; set; }
    }
}

namespace Orckestra.Overture.ServiceModel.Validation
{

    [DataContract]
    public partial class EntityState
    {
        ///<summary>
        ///The type of the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The type of the entity.")]
        public virtual string EntityType { get; set; }

        ///<summary>
        ///The unqiue id of the entity.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unqiue id of the entity.")]
        public virtual string EntityId { get; set; }

        ///<summary>
        ///A state flag indicating whether the entity can be modified.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A state flag indicating whether the entity can be modified.")]
        public virtual bool IsReadOnly { get; set; }
    }

    [DataContract]
    public partial class ValidationFailure
    {
        ///<summary>
        ///The name of the property to which the validation failure applied
        ///</summary>
        [DataMember]
        [ApiMember(Description="The name of the property to which the validation failure applied")]
        public virtual string PropertyName { get; set; }

        ///<summary>
        ///The complete contextual property name given it's position in the entity hierarchy. Example: [ContextClass].[ContextCollection][IndexInCollection].[PropertyName]
        ///</summary>
        [DataMember]
        [ApiMember(Description="The complete contextual property name given it's position in the entity hierarchy. Example: [ContextClass].[ContextCollection][IndexInCollection].[PropertyName]")]
        public virtual string FullyQualifiedPropertyName { get; set; }

        ///<summary>
        ///The attempted value (ValueType or string) that caused the failure or its id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The attempted value (ValueType or string) that caused the failure or its id.")]
        public virtual Object AttemptedValue { get; set; }

        ///<summary>
        ///The descriptor detailing the application error code and message describing the issue
        ///</summary>
        [DataMember]
        [ApiMember(Description="The descriptor detailing the application error code and message describing the issue")]
        public virtual ValidationFailureDescriptor Descriptor { get; set; }

        ///<summary>
        ///The entity type name that was validated
        ///</summary>
        [DataMember]
        [ApiMember(Description="The entity type name that was validated")]
        public virtual string EntityType { get; set; }

        ///<summary>
        ///The unique entity identifier for which there was an error
        ///</summary>
        [DataMember]
        [ApiMember(Description="The unique entity identifier for which there was an error")]
        public virtual string EntityId { get; set; }

        ///<summary>
        ///The severity level of the failure
        ///</summary>
        [DataMember]
        [ApiMember(Description="The severity level of the failure")]
        public virtual ValidationFailureSeverity Severity { get; set; }

        ///<summary>
        ///Any additional contextual information related to the validation failure.
        ///</summary>
        [DataMember]
        [ApiMember(Description="Any additional contextual information related to the validation failure.")]
        public virtual PropertyBag Context { get; set; }
    }

    [DataContract]
    public partial class ValidationFailureDescriptor
    {
        ///<summary>
        ///The neutral application unique error code of the validation failure
        ///</summary>
        [DataMember]
        [ApiMember(Description="The neutral application unique error code of the validation failure")]
        public virtual string ErrorCode { get; set; }

        ///<summary>
        ///The detailed error message of the validation failure
        ///</summary>
        [DataMember]
        [ApiMember(Description="The detailed error message of the validation failure")]
        public virtual string ErrorMessage { get; set; }
    }

    [DataContract]
    public enum ValidationFailureSeverity
    {
        Information,
        Warning,
        Error,
        Critical,
    }

    [DataContract]
    public partial class ValidationResult
    {
        public ValidationResult()
        {
            Errors = new List<ValidationFailure>{};
        }

        ///<summary>
        ///A category that applies to the validation results
        ///</summary>
        [DataMember]
        [ApiMember(Description="A category that applies to the validation results")]
        public virtual string Category { get; set; }

        ///<summary>
        ///If applicable, a list of all validation failures associated with the result
        ///</summary>
        [DataMember]
        [ApiMember(Description="If applicable, a list of all validation failures associated with the result")]
        public virtual List<ValidationFailure> Errors { get; set; }

        ///<summary>
        ///Returns true if all errors are lesser than ErrorMinimumSeverity
        ///</summary>
        [DataMember]
        [ApiMember(Description="Returns true if all errors are lesser than ErrorMinimumSeverity")]
        public virtual bool IsValid { get; set; }

        ///<summary>
        ///The minimum severity to consider as error
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum severity to consider as error")]
        public virtual ValidationFailureSeverity ErrorMinimumSeverity { get; set; }
    }
}

namespace OrckestraCommerce.EntityLockProvider.ServiceModel
{

    public partial class EntityApplicationLockStatus
    {
        public virtual LockAcquisitionState State { get; set; }
        public virtual string Entity { get; set; }
        public virtual string EntityId { get; set; }
        public virtual string LockName { get; set; }
    }

    public enum LockAcquisitionState
    {
        Failure,
        Success,
    }
}

namespace OrckestraCommerce.EntityLockProvider.ServiceModel.Requests
{

    ///<summary>
    ///Application lock API
    ///</summary>
    [Route("/locking/{ScopeId}/entity/{Entity}/{EntityId}/lock", "POST")]
    [Api(Description="Application lock API")]
    [DataContract]
    public partial class AcquireEntityLockRequest
        : IReturn<EntityApplicationLockStatus>, IPost
    {
        ///<summary>
        ///The scope identifier
        ///</summary>
        [DataMember]
        [ApiMember(DataType="String", Description="The scope identifier", IsRequired=true, Name="ScopeId")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The entity type
        ///</summary>
        [DataMember]
        [ApiMember(DataType="String", Description="The entity type", IsRequired=true, Name="Entity")]
        public virtual string Entity { get; set; }

        ///<summary>
        ///The entity identifier
        ///</summary>
        [DataMember]
        [ApiMember(DataType="String", Description="The entity identifier", IsRequired=true, Name="EntityId")]
        public virtual string EntityId { get; set; }

        ///<summary>
        ///The time to wait to acquire the lock
        ///</summary>
        [DataMember]
        [ApiMember(DataType="int", Description="The time to wait to acquire the lock", IsRequired=true, Name="TimeoutInSeconds")]
        public virtual int TimeoutInSeconds { get; set; }

        ///<summary>
        ///The time that this lock will be enforced
        ///</summary>
        [DataMember]
        [ApiMember(DataType="int", Description="The time that this lock will be enforced", IsRequired=true, Name="LockDurationInSeconds")]
        public virtual int LockDurationInSeconds { get; set; }
    }

    ///<summary>
    ///Application lock API
    ///</summary>
    [Route("/locking/{ScopeId}/entity/{Entity}/{EntityId}/releaseLock", "POST")]
    [Api(Description="Application lock API")]
    public partial class ReleaseEntityLockRequest
        : IReturn<EntityApplicationLockStatus>, IPost
    {
        ///<summary>
        ///The scope identifier
        ///</summary>
        [ApiMember(DataType="String", Description="The scope identifier", IsRequired=true, Name="ScopeId")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///The entity type
        ///</summary>
        [ApiMember(DataType="String", Description="The entity type", IsRequired=true, Name="Entity")]
        public virtual string Entity { get; set; }

        ///<summary>
        ///The entity identifier
        ///</summary>
        [ApiMember(DataType="String", Description="The entity identifier", IsRequired=true, Name="EntityId")]
        public virtual string EntityId { get; set; }

        ///<summary>
        ///The lock name to release
        ///</summary>
        [ApiMember(DataType="String", Description="The lock name to release", IsRequired=true, Name="LockName")]
        public virtual string LockName { get; set; }
    }
}

namespace OrckestraCommerce.FulfillmentProviders.Core.ServiceModel
{

    public partial class EventToProductivityGroupMapping
    {
        public virtual string EventName { get; set; }
        public virtual string GroupName { get; set; }
    }

    public partial class FulfillmentEvent
    {
        public virtual Guid EventId { get; set; }
        public virtual Guid OrderId { get; set; }
        public virtual Guid? ShipmentId { get; set; }
        public virtual string EventName { get; set; }
        public virtual string SourceType { get; set; }
        public virtual Guid? SourceId { get; set; }
        public virtual string TargetType { get; set; }
        public virtual Guid? TargetId { get; set; }
        public virtual DateTime Created { get; set; }
        public virtual string CreatedBy { get; set; }
        public virtual DateTime LastModified { get; set; }
        public virtual string LastModifiedBy { get; set; }
        public virtual string ReasonLookupName { get; set; }
        public virtual string ReasonLookupValue { get; set; }
        public virtual string Note { get; set; }
        public virtual int? ElapsedSeconds { get; set; }
        public virtual string Signature { get; set; }
    }

    public partial class FulfillmentEventList
    {
        public FulfillmentEventList()
        {
            FulfillmentEvents = new List<FulfillmentEvent>{};
        }

        public virtual List<FulfillmentEvent> FulfillmentEvents { get; set; }
    }

    public partial class FulfillmentLocationAverageMetrics
    {
        public virtual int AverageElapsedSeconds { get; set; }
    }

    public partial class FulfillmentLocationProductivityMetrics
    {
        public FulfillmentLocationProductivityMetrics()
        {
            ProductivityMetrics = new List<ProductivityMetric>{};
        }

        public virtual List<ProductivityMetric> ProductivityMetrics { get; set; }
    }

    public partial class FulfillmentLocationShipmentAndItemMetrics
    {
        public virtual int NumberOfShipments { get; set; }
        public virtual int NumberOfItems { get; set; }
    }

    public partial class MergeDocumentsResult
    {
        public virtual string MergedDocumentsUrl { get; set; }
    }

    public enum MergeDocumentTypes
    {
        PDF,
    }

    public partial class ProductivityGroup
    {
        public virtual string GroupName { get; set; }
        public virtual bool IsTerminal { get; set; }
    }

    public partial class ProductivityMetric
    {
        public virtual string GroupName { get; set; }
        public virtual int Count { get; set; }
    }
}

namespace OrckestraCommerce.FulfillmentProviders.Core.ServiceModel.Requests
{

    ///<summary>
    ///Documents API methods
    ///</summary>
    [Route("/documents/{DocumentType}/merge", "POST")]
    [Api(Description="Documents API methods")]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class MergeDocumentsRequest
        : IReturn<MergeDocumentsResult>, IPost
    {
        public MergeDocumentsRequest()
        {
            DocumentUrlsToMerge = new List<string>{};
        }

        ///<summary>
        ///the document type to merge.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the document type to merge.", IsRequired=true)]
        public virtual MergeDocumentTypes DocumentType { get; set; }

        ///<summary>
        ///the list of document urls to merge.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the list of document urls to merge.", IsRequired=true)]
        public virtual List<string> DocumentUrlsToMerge { get; set; }

        ///<summary>
        ///adddional delay to wait for JavaScript or AJAX calls when rendering pages.
        ///</summary>
        [DataMember]
        [ApiMember(Description="adddional delay to wait for JavaScript or AJAX calls when rendering pages.")]
        public virtual TimeSpan? ConversionDelayOverride { get; set; }

        ///<summary>
        ///the override value for when the render should complete in.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the override value for when the render should complete in.")]
        public virtual TimeSpan? RenderTimeoutOverride { get; set; }

        ///<summary>
        ///the override value for the width in pixels for the rendering process.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the override value for the width in pixels for the rendering process.")]
        public virtual int? WidthInPixelsOverride { get; set; }
    }
}

namespace OrckestraCommerce.FulfillmentProviders.Core.ServiceModel.Requests.FulfillmentEvents
{

    ///<summary>
    ///Fulfillments api
    ///</summary>
    [Route("/fulfillments/events/find", "POST")]
    [Api(Description="Fulfillments api")]
    [ApiResponse(Description="Requested events not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class FindFulfillmentEventsRequest
        : IReturn<FulfillmentEventList>, IPost
    {
        public FindFulfillmentEventsRequest()
        {
            ShipmentIds = new List<Guid>{};
            OrderIds = new List<Guid>{};
        }

        ///<summary>
        ///The starting index in the results to start getting the orders.
        ///</summary>
        [DataMember]
        [ApiMember(Description="The starting index in the results to start getting the orders.")]
        public virtual int StartingIndex { get; set; }

        ///<summary>
        ///The maximum number of results to return. Default value : 50
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum number of results to return. Default value : 50")]
        public virtual int? MaximumItems { get; set; }

        ///<summary>
        ///The shipment' needed to be fetched
        ///</summary>
        [DataMember]
        [ApiMember(Description="The shipment' needed to be fetched")]
        public virtual List<Guid> ShipmentIds { get; set; }

        ///<summary>
        ///A list of specific order ids needed to be fetched.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A list of specific order ids needed to be fetched.")]
        public virtual List<Guid> OrderIds { get; set; }

        ///<summary>
        ///A specific location ids needed to be fetched.
        ///</summary>
        [DataMember]
        [ApiMember(Description="A specific location ids needed to be fetched.")]
        public virtual Guid LocationId { get; set; }

        ///<summary>
        ///The minimum date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The minimum date")]
        public virtual DateTime? MinDate { get; set; }

        ///<summary>
        ///The maximum date
        ///</summary>
        [DataMember]
        [ApiMember(Description="The maximum date")]
        public virtual DateTime? MaxDate { get; set; }
    }
}

namespace OrckestraCommerce.FulfillmentProviders.Core.ServiceModel.Requests.FulfillmentMetrics
{

    ///<summary>
    ///Fulfillments api
    ///</summary>
    [Route("/fulfillments/metrics/productivity/average/{ScopeId}/{FulfillmentLocationId}", "GET")]
    [Api(Description="Fulfillments api")]
    [ApiResponse(Description="Requested metrics not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentLocationAverageMetricsRequest
        : IReturn<FulfillmentLocationAverageMetrics>, IGet
    {
        ///<summary>
        ///the fulfillment location identifier.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the fulfillment location identifier.", IsRequired=true)]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the scope id.", IsRequired=true)]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the start date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the start date.", IsRequired=true)]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///the end date.
        ///</summary>
        [DataMember]
        [ApiMember(Description="the end date.", IsRequired=true)]
        public virtual DateTime EndDate { get; set; }
    }

    ///<summary>
    ///Fulfillments api
    ///</summary>
    [Route("/fulfillments/metrics/productivity/{ScopeId}/{FulfillmentLocationId}", "POST")]
    [Api(Description="Fulfillments api")]
    [ApiResponse(Description="Requested metrics not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentLocationProductivityMetricsRequest
        : IReturn<FulfillmentLocationProductivityMetrics>, IPost
    {
        public GetFulfillmentLocationProductivityMetricsRequest()
        {
            ProductivityGroups = new List<ProductivityGroup>{};
            EventToProductivityGroupMappings = new List<EventToProductivityGroupMapping>{};
        }

        ///<summary>
        ///the fulfillment location identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the fulfillment location identifier.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the start date.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the start date.")]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///the end date.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the end date.")]
        public virtual DateTime EndDate { get; set; }

        ///<summary>
        ///the fulfillment productivity groups.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the fulfillment productivity groups.")]
        public virtual List<ProductivityGroup> ProductivityGroups { get; set; }

        ///<summary>
        ///the event to fulfillment productivity group mappings.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the event to fulfillment productivity group mappings.")]
        public virtual List<EventToProductivityGroupMapping> EventToProductivityGroupMappings { get; set; }
    }

    ///<summary>
    ///Fulfillments api
    ///</summary>
    [Route("/fulfillments/metrics/shipments/{ScopeId}/{FulfillmentLocationId}", "GET")]
    [Api(Description="Fulfillments api")]
    [ApiResponse(Description="Requested metrics not found", StatusCode=404)]
    [ApiResponse(Description="You must be authenticated to use this request", StatusCode=401)]
    [DataContract]
    public partial class GetFulfillmentLocationShipmentAndItemMetricsRequest
        : IReturn<FulfillmentLocationShipmentAndItemMetrics>, IGet
    {
        ///<summary>
        ///the fulfillment location identifier.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the fulfillment location identifier.")]
        public virtual Guid FulfillmentLocationId { get; set; }

        ///<summary>
        ///the scope id.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the scope id.")]
        public virtual string ScopeId { get; set; }

        ///<summary>
        ///the start date.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the start date.")]
        public virtual DateTime StartDate { get; set; }

        ///<summary>
        ///the end date.
        ///</summary>
        [DataMember]
        [Required]
        [ApiMember(Description="the end date.")]
        public virtual DateTime EndDate { get; set; }
    }
}

namespace ServiceStack
{

    [Flags]
    public enum RequestAttributes
    {
        None = 0,
        Localhost = 1,
        LocalSubnet = 2,
        External = 4,
        Secure = 8,
        InSecure = 16,
        AnySecurityMode = 24,
        HttpHead = 32,
        HttpGet = 64,
        HttpPost = 128,
        HttpPut = 256,
        HttpDelete = 512,
        HttpPatch = 1024,
        HttpOptions = 2048,
        HttpOther = 4096,
        AnyHttpMethod = 8160,
        OneWay = 8192,
        Reply = 16384,
        AnyCallStyle = 24576,
        Soap11 = 32768,
        Soap12 = 65536,
        Xml = 131072,
        Json = 262144,
        Jsv = 524288,
        ProtoBuf = 1048576,
        Csv = 2097152,
        Html = 4194304,
        Wire = 8388608,
        MsgPack = 16777216,
        FormatOther = 33554432,
        AnyFormat = 67076096,
        Http = 67108864,
        MessageQueue = 134217728,
        Tcp = 268435456,
        Grpc = 536870912,
        EndpointOther = 1073741824,
        AnyEndpoint = 2080374784,
        InProcess = -2147483648,
        InternalNetworkAccess = -2147483645,
        AnyNetworkAccessType = -2147483641,
        Any = -1,
    }
}

namespace ServiceStack.Web
{

    public partial interface IHttpFile
    {
        string Name { get; set; }
        string FileName { get; set; }
        long ContentLength { get; set; }
        string ContentType { get; set; }
    }

    public partial interface IRequestPreferences
    {
        bool AcceptsGzip { get; set; }
        bool AcceptsDeflate { get; set; }
    }
}


namespace Orckestra.Overture.ServiceModel.Queries
{
    using System;
    using System.Diagnostics;
    using System.Runtime.Serialization;
    using Orckestra.Overture.ServiceModel.Serialization;
    using ServiceStack;

	/// <summary>
	/// Represents a filtering condition.
	/// </summary>
	[DebuggerDisplay("Not:{Not}, Operator:{Operator}, Member:{Member}, Value:{Value}, CustomExpression:{CustomExpression}, StartingIndex:{StartingIndex}, StartingIndex:{StartingIndex}")]
	[DataContract]
	[KnownType(typeof(bool[]))]
	[KnownType(typeof(byte[]))]
	[KnownType(typeof(sbyte[]))]
	[KnownType(typeof(char[]))]
	[KnownType(typeof(decimal[]))]
	[KnownType(typeof(double[]))]
	[KnownType(typeof(float[]))]
	[KnownType(typeof(int[]))]
	[KnownType(typeof(uint[]))]
	[KnownType(typeof(long[]))]
	[KnownType(typeof(ulong[]))]
	[KnownType(typeof(short[]))]
	[KnownType(typeof(ushort[]))]
	[KnownType(typeof(string[]))]
	[KnownType(typeof(DateTime[]))]
	[KnownType(typeof(TimeSpan[]))]
	[KnownType(typeof(Guid[]))]
	public class Filter 
	{
	    /// <summary>
		/// Gets or sets a value indicating whether to negate the filter operation.
		/// </summary>
		[DataMember]
		[ApiMember(Description = "Whether to negate the filter operation")]
		public bool Not { get; set; }

		/// <summary>
		/// Gets or sets the operation to apply on the filter.
		/// </summary>
		[DataMember]
		[ApiMember(Description = "The operation to apply on the filter")]
		public Operator Operator { get; set; }

		/// <summary>
		/// Gets or sets the name of the property.
		/// </summary>
		[DataMember]
		[ApiMember(Description = "The name of the property")]
		public string Member { get; set; }

		/// <summary>
		/// Gets or sets the value.
		/// </summary>
		[DataMember]
		[ApiMember(Description = "The value to compare")]
		public object Value { get; set; }

		/// <summary>
		/// Gets or sets the custom expression to be consumed as-is by the provider. Applies only with the <see cref="Queries.Operator.Custom"/> operator.
		/// </summary>
		[DataMember]
		[ApiMember(Description = "The custom expression to be consumed as-is by the provider. Applies only with the Operator.Custom.")]
		public string CustomExpression { get; set; }

	    /// <summary>
	    /// Creates a clone of this filter.
	    /// </summary>
	    /// <returns>Cloned instance.</returns>
		public Filter Clone()
		{
			return (Filter)MemberwiseClone();
		}

        /// <summary>
        /// Returns a cloned value of specified filter with JSON serialization of value.
        /// </summary>
        /// <param name="filter">Filter to use.</param>
        /// <returns>Newly created filter.</returns>
		public static Filter OnJsonSerializing(Filter filter)
		{
			// WARN Modification should be done using a new reference
			if (filter == null || filter.Value == null)
			{
				return filter;
			}

			var newFilter = filter.Clone();
			newFilter.Value = filter.Value.ToJsonCargo();

			return newFilter;
		}
	}
}
namespace Orckestra.Overture.ServiceModel
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Text;

    //Included as a linked file so that the hack of including AutoMockContainerTestBase as link file compiles
    /// <summary>
    /// For Entity Attributes. A key/value dictionary of localized strings. The key is the ISO Culture name.
    /// </summary>
    public class LocalizedString : Dictionary<string, string>
#if !ServiceStackCSharpCodeGenerator
        , ILocalizedString
#endif
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizedString"/> class.
        /// </summary>
        public LocalizedString()
            : this(new Dictionary<string, string>())
        {
        }

        private static Dictionary<string, string> _cultureNamesCache = new Dictionary<string, string>();

        private string GetCachedCultureName(string key)
        {
            string value;
            if (_cultureNamesCache.TryGetValue(key, out value))
            {
                return value;
            }

            try
            {
                value = new CultureInfo(key).ToString();
            }
            catch (CultureNotFoundException)
            {
                //test again if it's just an issue because of _ (when old values from OptimalPaymentProvider for instance)
                var fixedCulture = new CultureInfo(key.Replace('_', '-'));
                value = fixedCulture.ToString();
            }

            // Dictionary isn't thread safe, so we're making a new instance.
            var newCache = new Dictionary<string, string>(_cultureNamesCache);
            newCache[key] = value;
            _cultureNamesCache = newCache;

            return value;
        }
    

    /// <summary>
	    /// Initializes a new instance of the <see cref="LocalizedString"/> class.
	    /// </summary>
	    /// <param name="dictionary">
	    /// A dictionary of culture/value pairs
	    /// </param>
        public LocalizedString(IEnumerable<KeyValuePair<string, string>> dictionary)
            : base(StringComparer.OrdinalIgnoreCase)
        {
            if (dictionary == null)
                throw new ArgumentNullException("dictionary");

            foreach (var kvp in dictionary)
            {
                var cultureName = GetCachedCultureName(kvp.Key);

                Add(cultureName, kvp.Value);
            }
        }

          /// <summary>
          /// Returns the localized string defined by the culture name
          /// </summary>
          /// <param name="cultureName">
          /// The culture .
          /// </param>
          /// <returns>
		  /// The localized value defined by the culture name.
          /// </returns>
        public string GetLocalizedValue(string cultureName)
        {
            if (!ContainsKey(cultureName))
                return null;

            return this[cultureName];
        }

        /// <summary>
        /// Sets the localized string.
        /// </summary>
        /// <param name="culture">The culture.</param>
        /// <param name="value">The value.</param>
        public void SetLocalizedString(string culture, string value)
        {
            if (!ContainsKey(culture))
                Add(culture, value);
            else
        {
                this[culture] = value;
            }
        }

        /// <summary>
        /// The to all cultures string.
        /// </summary>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        public string ToAllCulturesString()
        {
            var sb = new StringBuilder();
            foreach (var key in Keys)
            {
                sb.AppendFormat("[{0}] : {1}", key, GetLocalizedValue(key));
                sb.AppendLine();
            }
            return sb.ToString();
        }

        /// <summary>
        /// Clones this instance.
        /// </summary>
        /// <returns>
		/// A member-wise clone of this <see cref="LocalizedString"/>.
        /// </returns>
        public LocalizedString Clone()
        {
            return (LocalizedString)MemberwiseClone();
        }
	}
}

namespace Orckestra.Overture.ServiceModel.Products.Draft
{
    using System;
    using System.Runtime.Serialization;
    using Orckestra.Overture.ServiceModel.Serialization;

    [DataContract]
    public class MediaPropertyModification : ProductModification
    {
        [DataMember]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the property to update.
        /// </summary>
        [DataMember]
        public string PropertyName { get; set; }


        /// <summary>
        /// Gets or sets the old value of the property. This is the value of the property
        /// before the draft was created.
        /// </summary>
        [DataMember]
        public object OldValue { get; set; }

        /// <summary>
        /// Gets or sets the current value of the property.	This will be the value 
        /// saved when the draft will be published
        /// </summary>
        [DataMember]
        public object CurrentValue { get; set; }

        /// <summary>
        /// A helper for Json Serializing
        /// </summary>
        /// <param name="modification">
        /// The definition.
        /// </param>
        /// <returns>
        /// The <see cref="MediaPropertyModification"/>.
        /// </returns>
        public static MediaPropertyModification OnJsonSerializing(MediaPropertyModification modification)
        {
            // WARN Modification should be done using a new reference
            if (modification == null)
            {
                return modification;
            }

            var newModification = (MediaPropertyModification)modification.MemberwiseClone();
            newModification.CurrentValue = modification.CurrentValue.ToJsonCargo();
            newModification.OldValue = modification.OldValue.ToJsonCargo();

            return newModification;
        }
    }
}

namespace Orckestra.Overture.ServiceModel.Metadata
{
    using System;
    using System.Diagnostics;
    using System.Runtime.Serialization;
    using Orckestra.Overture.ServiceModel.Serialization;

    using ServiceStack;

    /// <summary>
    /// The product property definition is the schema for a property that is part of a product definition
    /// </summary>
    [DataContract]
	[KnownType(typeof(bool[]))]
	[KnownType(typeof(byte[]))]
	[KnownType(typeof(sbyte[]))]
	[KnownType(typeof(char[]))]
	[KnownType(typeof(decimal[]))]
	[KnownType(typeof(double[]))]
	[KnownType(typeof(float[]))]
	[KnownType(typeof(int[]))]
	[KnownType(typeof(uint[]))]
	[KnownType(typeof(long[]))]
	[KnownType(typeof(ulong[]))]
	[KnownType(typeof(short[]))]
	[KnownType(typeof(ushort[]))]
	[KnownType(typeof(string[]))]
	[KnownType(typeof(DateTime[]))]
	[KnownType(typeof(TimeSpan[]))]
	[KnownType(typeof(Guid[]))]
    [DebuggerDisplay("ProductPropertyDefinition. Name: '{PropertyName}', type: '{DataType}', group: '{GroupName}'")]
    public class ProductPropertyDefinition
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ProductPropertyDefinition"/> class.
		/// </summary>
		public ProductPropertyDefinition()
		{
			DisplayName = new LocalizedString();
		}

		/// <summary>
		/// Gets or sets the name (business key, un-editable) of the attribute.
		/// </summary>
		[ApiMember(Description = "The name (business key, un-editable) of the attribute")]
		[DataMember]
		public string PropertyName { get; set; }

		/// <summary>
		/// Gets or sets the UI friendly name for the attribute. It is multilingual.
		/// </summary>
		[ApiMember(Description = "A UI friendly name for the attribute. It is multilingual")]
		[DataMember]
		public LocalizedString DisplayName { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether a value for the attribute is required.
		/// </summary>
		[ApiMember(Description = "Whether a value for the attribute is required")]
		[DataMember]
		public bool IsRequired { get; set; }

		/// <summary>
		/// Gets or sets a number defining in what order the attribute will be sort in the list of attributes.
		/// </summary>
		[ApiMember(Description = "A number defining in what order the attribute will be sort in the list of attributes")]
		[DataMember]
		public int DisplayOrder { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether the attribute can have multiple values, one per culture.
		/// </summary>
		[ApiMember(Description = "Whether the attribute can have multiple values, one per culture")]
		[DataMember]
		public bool Localizable { get; set; }

		/// <summary>
		/// Gets or sets the data type of the value saved in the attribute.
		/// </summary>
		[ApiMember(Description = "The data type of the value saved in the attribute")]
		[DataMember]
		public PropertyDataType DataType { get; set; }

		/// <summary>
		/// Gets or sets the default value given to the attribute.
		/// </summary>
		[ApiMember(Description = "What is the default value given to the attribute")]
		[DataMember]
		public object DefaultValue { get; set; }

		/// <summary>
		/// Gets or sets the minimal value for the attribute. Serves as a restriction.
		/// </summary>
		[ApiMember(Description = "A minimal value for the attribute. Serves as a restriction")]
		[DataMember]
		public object MinimumValue { get; set; }

		/// <summary>
		/// Gets or sets the maximal value for the attribute. Serves as a restriction.
		/// </summary>
		[ApiMember(Description = "A maximal value for the attribute. Serves as a restriction")]
		[DataMember]
		public object MaximumValue { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether the attribute is a system defined attribute or custom user defined.
		/// </summary>
		[ApiMember(Description = "Whether the attribute is a system defined attribute or custom user defined")]
		[DataMember]
		public bool IsSystem { get; set; }

		/// <summary>
		/// Gets or sets the description explaining the purpose of the attribute. Not multilingual.
		/// </summary>
		[ApiMember(Description = "A description explaining the purpose of the attribute. Not multilingual")]
		[DataMember]
		public string Description { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether to automatically include this attribute in every product definition.
		/// </summary>
		[ApiMember(Description = "Whether to automatically include this attribute in every product definitio")]
		[DataMember]
		public bool IncludeInAllProductDefinition { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether to automatically include this attribute in every category definition.
		/// </summary>
		[ApiMember(Description = "Whether to automatically include this attribute in every category definition")]
		[DataMember]
		public bool IncludeInAllCategoryDefinition { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to automatically include this attribute in every variant definition.
        /// </summary>
        [ApiMember(Description = "Whether to automatically include this attribute in every variant definition")]
        [DataMember]
        public bool IncludeInAllVariantDefinition { get; set; }

        /// <summary>
        /// Gets or sets the name (business key) of the group associated to the attribute.
        /// </summary>
        [ApiMember(Description = "The name (business key) of the group associated to the attribute")]
		[DataMember]
		public string GroupName { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the attribute is hidden in the orchestrator.
        /// </summary>
        /// <value>
        /// <c>true</c> if the attribute is hidden in the orchestrator; otherwise, <c>false</c>.
        /// </value>
        [ApiMember(Description = "Whether the attribute is hidden in the orchestrator")]
        [DataMember]
	    public bool IsHiddenInOrchestrator { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the attribute is a variant.
        /// </summary>
        [ApiMember(Description = "Whether the attribute is a variant.")]
        [DataMember]
        public bool IsVariant { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the attribute is a group for variant.
        /// </summary>
        [ApiMember(Description = "Whether the attribute is a group for variant.")]
        [DataMember]
        public bool IsVariantGroup { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the attribute is a key for variant.
        /// </summary>
        [ApiMember(Description = "Whether the attribute is a key for variant.")]
        [DataMember]
        public bool IsKeyVariant { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the attribute values are searchable in an admin UI.
        /// </summary>
        [ApiMember(Description = "Whether the attribute is searchable in an admin UI.")]
        [DataMember]
        public bool IsSearchableAdmin { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the attribute values are searchable on a public website.
        /// </summary>
        [ApiMember(Description = "Whether the attribute is searchable on a public website.")]
        [DataMember]
        public bool IsSearchableWeb { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this attribute is facetable in ContentManagement(CM)/Admin UI system.
        /// </summary>
		[ApiMember(Description = "Whether the attribute is facettable when admin.")]
        [DataMember]
        public bool IsFacettableAdmin { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this attribute is facetable in ContentDelivery(CD) system/public website.
        /// </summary>
		[ApiMember(Description = "Whether the attribute is facettable when web.")]
        [DataMember]
        public bool IsFacettableWeb { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether this attribute  should be used as a source for 'type - ahead' and 'spell - check' suggestions in ContentManagement(CM) system/Admin UI.
		/// </summary>
		[ApiMember(Description = "A value indicating whether this attribute  should be used as a source for 'type - ahead' and 'spell - check' suggestions in ContentManagement(CM) system/Admin UI")]
		[DataMember]
		public bool IsTypeAheadAdmin { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether this attribute  should be used as a source for 'type - ahead' and 'spell - check' suggestions in  ContentDelivery(CD) system/public website.
		/// </summary>
		[ApiMember(Description = "A value indicating whether this attribute  should be used as a source for 'type - ahead' and 'spell - check' suggestions in ContentDelivery(CD) system/public website")]
        [DataMember]
		public bool IsTypeAheadWeb { get; set; }

		/// <summary>
		/// Gets or sets a value indicating max multiplicity of the attribute.
		/// </summary>
		[ApiMember(Description = "Max multiplicity of the attribute.")]
        [DataMember]
        public string MaxMultiplicity { get; set; }

        /// <summary>
        /// Gets or sets the Order of the Variant attribute key.
        /// </summary>
        [ApiMember(Description = "The Order of the Variant attribute key.")]
        [DataMember]
        public int? KeyVariantOrder { get; set; }

		/// <summary>
		/// Gets or sets the lookup definition of the attribute (in the case attribute data type is Lookup)
		/// </summary>
		[ApiMember(Description = "The lookup definition of the attribute")]
		[DataMember]
		public ProductLookupDefinition LookupDefinition { get; set; }

        /// <summary>
		/// A helper for Json Serializing
		/// </summary>
		/// <param name="definition">
		/// The definition.
		/// </param>
		/// <returns>
		/// The <see cref="ProductPropertyDefinition"/>.
		/// </returns>
		public static ProductPropertyDefinition OnJsonSerializing(ProductPropertyDefinition definition)
		{
			// WARN Modification should be done using a new reference
			if (definition == null)
			{
				return definition;
			}

			var newDefinition = (ProductPropertyDefinition)definition.MemberwiseClone();
			newDefinition.MaximumValue = definition.MaximumValue.ToJsonCargo();
			newDefinition.MinimumValue = definition.MinimumValue.ToJsonCargo();
			newDefinition.DefaultValue = definition.DefaultValue.ToJsonCargo();

			return newDefinition;
		}
    }
}

namespace Orckestra.Overture.ServiceModel.Products.Draft
{
    using System.Runtime.Serialization;
    using Orckestra.Overture.ServiceModel.Metadata;
    using Orckestra.Overture.ServiceModel.Serialization;

    /// <summary> 
    /// This entity represents a modification to update a single property of the <see cref="Product"/>
    /// of a product draft.
    /// </summary>
    [DataContract]
    public class ProductPropertyModification : ProductModification
    {
        /// <summary>
        /// Gets or sets the name of the property to update.
        /// </summary>
        [DataMember]
        public string PropertyName { get; set; }


        /// <summary>
        /// Gets or sets the old value of the property. This is the value of the property
        /// before the draft was created.
        /// </summary>
        [DataMember]
        public object OldValue { get; set; }

        /// <summary>
        /// Gets or sets the current value of the property.	This will be the value 
        /// saved when the draft will be published
        /// </summary>
        [DataMember]
        public object CurrentValue { get; set; }

        /// <summary>
		/// A helper for Json Serializing
		/// </summary>
		/// <param name="modification">
		/// The definition.
		/// </param>
		/// <returns>
		/// The <see cref="ProductPropertyDefinition"/>.
		/// </returns>
		public static ProductPropertyModification OnJsonSerializing(ProductPropertyModification modification)
        {
            // WARN Modification should be done using a new reference
            if (modification == null)
            {
                return modification;
            }

            var newModification = (ProductPropertyModification) modification.MemberwiseClone();
            newModification.CurrentValue = modification.CurrentValue.ToJsonCargo();
            newModification.OldValue = modification.OldValue.ToJsonCargo();

            return newModification;
        }
    }
}

namespace Orckestra.Overture.ServiceModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.Serialization;
    using Orckestra.Overture.ServiceModel.Search;
    using Orckestra.Overture.ServiceModel.Serialization;

    /// <summary>
    /// Key/value container based on the Dictionary type.
    /// </summary>
#if !ServiceStackCSharpCodeGenerator
    [KnownType(typeof(bool[]))]
    [KnownType(typeof(byte[]))]
    [KnownType(typeof(sbyte[]))]
    [KnownType(typeof(char[]))]
    [KnownType(typeof(decimal[]))]
    [KnownType(typeof(double[]))]
    [KnownType(typeof(float[]))]
    [KnownType(typeof(int[]))]
    [KnownType(typeof(uint[]))]
    [KnownType(typeof(long[]))]
    [KnownType(typeof(ulong[]))]
    [KnownType(typeof(short[]))]
    [KnownType(typeof(ushort[]))]
    [KnownType(typeof(string[]))]
    [KnownType(typeof(DateTime[]))]
    [KnownType(typeof(TimeSpan[]))]
    [KnownType(typeof(Guid[]))]
    [KnownType(typeof(Guid))]
    [KnownType(typeof(LocalizedString))]
    [KnownType(typeof(SolrIndexingResult))]
#endif
    [CollectionDataContract]
    public class PropertyBag : Dictionary<string, object>, IEquatable<PropertyBag>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyBag"/> class.
        /// </summary>
        public PropertyBag()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyBag"/> class.
        /// </summary>
        /// <param name="dictionary">
        /// The dictionary.
        /// </param>
        public PropertyBag(IDictionary<string, object> dictionary)
            : base(dictionary) { }

        /// <summary>
        /// Determines if 2 PropertyBag are equal by checking if they both contain the same properties.
        /// </summary>
        /// <param name="other">The other PropertyBag to compare with.</param>
        /// <returns>True if bot PropertyBag are not null and contain the same properties.</returns>
        public bool Equals(PropertyBag other)
        {
            if (other == null)
                return false;
            if (ReferenceEquals(this, other))
                return true;
            if (GetHashCode() != other.GetHashCode())
                return false;

            if (!Keys.OrderBy(s => s).SequenceEqual(other.Keys.OrderBy(s => s)))
                return false;

            foreach (string k in Keys)
            {
                object val1 = this[k];
                object val2 = other[k];
                if ((val1 == null) && (val2 == null))
                    continue;
                if ((val1 == null) || (val2 == null))
                    return false;
                if (!val1.Equals(val2))
                    return false;
            }

            return true;
        }

        /// <summary>
        /// Determines if 2 PropertyBag are equal by checking if they both contain the same properties.
        /// </summary>
        /// <param name="obj">An object to compare with.</param>
        /// <returns>True if both objects are PropertyBag type and contain the same properties.</returns>
        public override bool Equals(object obj)
        {
            var otherPropertyBag = obj as PropertyBag;
            if (obj == null)
                return false;

            return Equals(otherPropertyBag);
        }

        /// <summary>
        /// Returns a hash based on the concatenation of hashes of each properties.
        /// </summary>
        /// <returns>The calculated hash value</returns>
        public override int GetHashCode()
        {
            return this.Aggregate(0, (current, entry) => current ^ (entry.Key.GetHashCode() ^ ((entry.Value != null) ? entry.Value.GetHashCode() : 0)));
        }

        /// <summary>
        /// The json serialization helper.
        /// </summary>
        /// <param name="bag">
        /// The bag.
        /// </param>
        /// <returns>
        /// A <see cref="PropertyBag"/>.
        /// </returns>
        public static PropertyBag OnJsonSerializing(PropertyBag bag)
        {
            if (bag == null) return null;

            // ToJsonCargo has been implemented in the Java and Swift clients.  If its implementation changes the Java and Swift client will have to be updated as well.

            return new PropertyBag(bag.ToDictionary(pair => pair.Key, pair => pair.Value.ToJsonCargo()));
        }
    }
}

namespace Orckestra.Overture.ServiceModel.Marketing
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Runtime.Serialization;
    using Orckestra.Overture.ServiceModel.Serialization;
    using ServiceStack;

    /// <summary>
	/// The targeting condition defines the conditions on which a promotion will be applied on a cart
	/// </summary>
	[DataContract]
	[KnownType(typeof(bool[]))]
	[KnownType(typeof(byte[]))]
	[KnownType(typeof(sbyte[]))]
	[KnownType(typeof(char[]))]
	[KnownType(typeof(decimal[]))]
	[KnownType(typeof(double[]))]
	[KnownType(typeof(float[]))]
	[KnownType(typeof(int[]))]
	[KnownType(typeof(uint[]))]
	[KnownType(typeof(long[]))]
	[KnownType(typeof(ulong[]))]
	[KnownType(typeof(short[]))]
	[KnownType(typeof(ushort[]))]
	[KnownType(typeof(string[]))]
	[KnownType(typeof(DateTime[]))]
	[KnownType(typeof(TimeSpan[]))]
	[KnownType(typeof(Guid[]))]
	public class TargetingCondition
	{
		/// <summary>
		/// The _children backing field
		/// </summary>
		private List<TargetingCondition> _children;

		/// <summary>
		/// Gets or sets the type of condition.
		/// </summary>
		[DataMember]
		[ApiMember(Description = "The type of condition")]
		public TargetingConditionType Type { get; set; }

		/// <summary>
		/// Gets or sets the relative path of the property used for the condition.
		/// </summary>
		[DataMember]
		[ApiMember(Description = "The relative path of the property used for the condition")]
		public string PropertyPath { get; set; }

		/// <summary>
		/// Gets or sets the value that must be matched to get the promotion.
		/// </summary>
		/// <remarks>In case of multiple lookup selection, aggregate all values in a string with '|' as separator. ex : "Monday|Tuesday|Wednesday"</remarks>
		[DataMember]
		[ApiMember(Description = "The value that must be matched to get the promotion.")]
		public object Value { get; set; }

		/// <summary>
		/// Gets or sets the operator to apply on the <see cref="Value"/> to get the promotion.
		/// </summary>
		[DataMember]
		[ApiMember(Description = "The operator to apply on the Value to get the promotion.")]
		public TargetingOperator Operator { get; set; }

		/// <summary>
		/// Gets or sets the operator to apply on the <see cref="Value"/> to get the promotion
		/// when the target is used on a collection.
		/// </summary>
		/// <remarks>
		/// This is used with a <see cref="Type" /> as <see cref="TargetingConditionType.CollectionFilter" />.
		/// </remarks>
		[DataMember]
		[ApiMember(Description = " Gets or sets the operator to apply on the Value to get the promotion when the target is used on a collection.")]
		public TargetingCollectionOperator CollectionOperator { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether to use the <see cref="Operator" /> should NOT be matched.
		/// </summary>
		/// <value>
		/// <c>true</c> if the <see cref="Operator" /> should not be matched;
		/// <c>false</c> if the <see cref="Operator" /> should be matched.
		/// </value>
		[DataMember]
		[ApiMember(Description = " Gets or sets a value indicating whether to use the Operator should NOT be matched.")]
		public bool Not { get; set; }

		/// <summary>
		/// Gets or sets the children of this targeting condition.
		/// </summary>
		/// <remarks>
		/// This is used with a <see cref="Type" /> as <see cref="TargetingConditionType.TargetingGroup" />.
		/// </remarks>
		[DataMember]
		[ApiMember(Description = "The children of this targeting condition.")]
		public List<TargetingCondition> Children
		{
			get { return _children ?? (_children = new List<TargetingCondition>()); }
			set { _children = value; }
		}

		/// <summary>
		/// Gets or sets the binary operator which will be apply between the children targeting conditions.
		/// </summary>
		/// /// <remarks>
		/// This is used with a <see cref="Type" /> as <see cref="TargetingConditionType.TargetingGroup" />.
		/// </remarks>
		[DataMember]
		[ApiMember(Description = "The binary operator which will be apply between the children targeting conditions.")]
		public TargetingBinaryOperator BinaryOperator { get; set; }

		/// <summary>
		/// A helper for Json Serializing
		/// </summary>
		/// <param name="condition">
		/// The targeting condition.
		/// </param>
		/// <returns>
		/// The <see cref="TargetingCondition"/>.
		/// </returns>
		public static TargetingCondition OnJsonSerializing(TargetingCondition condition)
		{
			// WARN Modification should be done using a new reference
			if (condition == null)
			{
				return null;
			}
			return condition.ToJsonTransport();
		}

		/// <summary>
		/// Clones this instance and its children.
		/// </summary>
		/// <returns>A copy </returns>
		public TargetingCondition Clone()
		{
			var clone = (TargetingCondition)MemberwiseClone();
			clone.Children = Children.Select(x => x.Clone()).ToList();
			return clone;
		}

		/// <summary>
		/// The to json transport.
		/// </summary>
		/// <returns>
		/// The <see cref="TargetingCondition"/>.
		/// </returns>
		private TargetingCondition ToJsonTransport()
		{
			var clone = (TargetingCondition)MemberwiseClone();
			clone.Value = Value.ToJsonCargo();

			// Recursivity will be made by the serializer
			return clone;
		}
	}
}

namespace Orckestra.Overture.ServiceModel.Products.Draft
{
    using System.Runtime.Serialization;
    using Orckestra.Overture.ServiceModel.Serialization;

    /// <summary> 
    /// This entity represents a modification to update a single property of the <see cref="Variant"/>
    /// of a product draft.
    /// </summary>
    [DataContract]
    public class VariantPropertyModification : ProductModification
    {
        /// <summary>
        /// Gets or sets the name of the property to update.
        /// </summary>
        [DataMember]
        public string PropertyName { get; set; }

        /// <summary>
        /// Gets or sets the id of the variant to update.
        /// </summary>
        [DataMember]
        public string VariantId { get; set; }

        /// <summary>
        /// Gets or sets the old value of the property. This is the value of the property
        /// before the draft was created.
        /// </summary>
        [DataMember]
        public object OldValue { get; set; }

        /// <summary>
        /// Gets or sets the current value of the property.	This will be the value 
        /// saved when the draft will be published
        /// </summary>
        [DataMember]
        public object CurrentValue { get; set; }

        /// <summary>
		/// A helper for Json Serializing
		/// </summary>
		/// <param name="modification">
		/// The definition.
		/// </param>
		/// <returns>
		/// The <see cref="VariantPropertyModification"/>.
		/// </returns>
		public static VariantPropertyModification OnJsonSerializing(VariantPropertyModification modification)
        {
            // WARN Modification should be done using a new reference
            if (modification == null)
            {
                return modification;
            }

            var newModification = (VariantPropertyModification) modification.MemberwiseClone();
            newModification.CurrentValue = modification.CurrentValue.ToJsonCargo();
            newModification.OldValue = modification.OldValue.ToJsonCargo();

            return newModification;
        }
    }
}

namespace Orckestra.Overture.ServiceModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;



    public class ValueTypeWrapper
    {
        internal static HashSet<Type> SupportedTypes = new HashSet<Type> {
                                                                             typeof(bool),typeof(bool?),
                                                                             typeof(byte),typeof(byte?),
                                                                             typeof(sbyte),typeof(sbyte?),
                                                                             typeof(short),typeof(short?),
                                                                             typeof(ushort),typeof(ushort?),
                                                                             typeof(int),typeof(int?),
                                                                             typeof(uint),typeof(uint?),
                                                                             typeof(long),typeof(long?),
                                                                             typeof(ulong),typeof(ulong?),
                                                                             typeof(float),typeof(float?),
                                                                             typeof(double),typeof(double?),
                                                                             typeof(decimal),typeof(decimal?),
                                                                             typeof(DateTime),typeof(DateTime?),
                                                                             typeof(char),typeof(char?),
                                                                             typeof(string)
                                                                         };

        private object _value;

        public object Value
        {
            get { return _value; }
            set
            {
                if (!IsTypeSupported(value))
                {
                    throw new NotSupportedException($"Type '{value.GetType()}' is not a supported type for {nameof(ValueTypeWrapper)}");
                }
                _value = value;
            }
        }

        public ValueTypeWrapper()
            : this(null)
        {
        }

        public ValueTypeWrapper(object value)
        {
            if (!IsTypeSupported(value))
            {
                throw new NotSupportedException($"Type '{value.GetType()}' is not a supported type for {nameof(ValueTypeWrapper)}");
            }

            Value = value;
        }

        private bool IsTypeSupported(object value)
        {
            if (value == null)
            {
                return true;
            }

            return SupportedTypes.Contains(value.GetType());
        }

        public ValueTypeWrapper Clone()
        {
            return MemberwiseClone() as ValueTypeWrapper;
        }

        #region Implicit Conversions

        public static implicit operator ValueTypeWrapper(bool value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(bool? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(byte value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(byte? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(sbyte value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(sbyte? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(short value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(short? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(ushort value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(ushort? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(int value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(int? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(uint value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(uint? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(long value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(long? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(ulong value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(ulong? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(float value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(float? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(double value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(double? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(decimal value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(Decimal? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(DateTime value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(DateTime? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(char value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(char? value)
        {
            return new ValueTypeWrapper(value);
        }

        public static implicit operator ValueTypeWrapper(string value)
        {
            return new ValueTypeWrapper(value);
        }

        #endregion
    }
}


namespace Orckestra.Overture.ServiceModel.Serialization
{
    using System.Runtime.Serialization;
    using ServiceStack;

	/// <summary>
	/// Enables the transport of typed JSON value.
	/// </summary>
	/// <remarks>
    /// This class is used internally.
	/// </remarks>
	/// <typeparam name="T">The c# type to transport</typeparam>
	[DataContract]
	public class JsonCargo<T>
#if !ServiceStackCSharpCodeGenerator
        : ICargo
#endif
    {
	    /// <summary>
	    /// Initializes a new instance of the <see cref="JsonCargo{T}"/> class.
	    /// </summary>
	    public JsonCargo()
	    {
	    }

	    /// <summary>
        /// Initializes a new instance of the <see cref="JsonCargo{T}"/> class with a specified initial value.
        /// </summary>
        /// <param name="value">Initial value of cargo.</param>
		public JsonCargo(T value)
		{
			Value = value;
		}

        /// <summary>
        /// Gets or sets the generic type value transported by this cargo.
        /// </summary>
		[DataMember]
		[ApiMember(Description = "The value transported by this cargo")]
		public T Value { get; set; }

#if !ServiceStackCSharpCodeGenerator
        /// <summary>
        /// Gets or sets the value transported by this cargo.
        /// </summary>
		object ICargo.Value
        {
            get { return Value; }
            set { Value = (T)value; }
        }
#endif
    }
}

namespace Orckestra.Overture.ServiceModel.Serialization
{
    using System;
    using System.Linq;
    using System.Reflection;

    /// <summary>
    /// Provides common helper and extensions to register c# types that need special consideration when serialized to JSON.
    /// </summary>
    public static class JsonSerialization
	{
        /// <summary>
        /// Initializes static members of the <see cref="JsonSerialization"/> class.
        /// </summary>
		static JsonSerialization()
		{
			TypeRegistry = new JsTypeRegistry();

#if (PCL)
            foreach (var type in typeof(JsonSerialization).Assembly.GetExportedTypes().Where(type => type.IsClass))
            {
                TypeRegistry.RegisterType(type);
            }
#else
            foreach (var type in typeof(JsonSerialization).GetTypeInfo().Assembly.ExportedTypes.Where(type => type.GetTypeInfo().IsClass))
            {
                TypeRegistry.RegisterType(type);
            }
#endif
        }

        /// <summary>
        /// Converts object value to JSON cargo.
        /// </summary>
        /// <param name="value">Value to convert.</param>
        /// <returns>Created JSON cargo.</returns>
		public static object ToJsonCargo(this object value)
		{
            // ToJsonCargo has been implemented in the Java and Swift clients.  If its implementation changes the Java and Swift client will have to be updated as well.

			if (value == null)
				return null;

			var vt = value.GetType();
#if (PCL)
            if (vt.IsValueType
                || vt == typeof(LocalizedString)
                || vt.IsArray)
#else
            if (vt.GetTypeInfo().IsValueType 
				|| vt == typeof(LocalizedString) 
				|| vt.GetTypeInfo().IsArray)
#endif
            {
                // box c# type into a friendly json value
                var type = typeof(JsonCargo<>).MakeGenericType(vt);
				return Activator.CreateInstance(type, value);
			}

			return value;
		}

        /// <summary>
        /// Finds specified type.
        /// </summary>
        /// <param name="typeName">Name of type to find.</param>
        /// <param name="typeFinder">Function to use for retrieving type.</param>
        /// <returns>Found type.</returns>
        /// <remarks>Function will only be used if specified type cannot be found in registry.</remarks>
		private static Type FindType(string typeName, Func<string, Type> typeFinder)
		{
			var type = TypeRegistry.ResolveType(typeName);
			if (type == null)
			{
				type = typeFinder(typeName);
			}
			return type;
		}

        /// <summary>
        /// Finds a specified type.
        /// </summary>
        /// <param name="typeName">Name of type to find.</param>
        /// <param name="typeFinder">Function to use for retrieving type.</param>
        /// <returns>Found type.</returns>
		public static Type TypeFinder(string typeName, Func<string, Type> typeFinder)
		{
			if (typeName == null) return null;
			
			if (!typeName.StartsWith("ValueOf"))
			{
				return FindType(typeName, typeFinder);
			}

			var bagType = typeName.Substring(7);
            if (bagType == "LocalizedString")
                return typeof(JsonCargo<>).MakeGenericType(typeof(LocalizedString));
            if (bagType == "LocalizedString[]")
                return typeof(JsonCargo<>).MakeGenericType(typeof(LocalizedString[]));

            Type systemType;

            if (bagType.StartsWith("Nullable"))
            {
                bagType = bagType.Substring(8);
                systemType = Type.GetType(string.Format("System.{0}", bagType));

                if (systemType != null)
                {
                    systemType = typeof(Nullable<>).MakeGenericType(systemType);
                }

            }
            else
            {
			    systemType = Type.GetType(string.Format("System.{0}", bagType));
            }


            if (systemType != null)
				return typeof(JsonCargo<>).MakeGenericType(systemType);

			return FindType(typeName, typeFinder);
		}

        /// <summary>
        /// Resolves a type writer name.
        /// </summary>
        /// <param name="type">Type to find.</param>
        /// <param name="typeWriter">Function to use for finding type writer.</param>
        /// <returns>Resolved type writer name.</returns>
		public static string TypeWriter(Type type, Func<Type, string> typeWriter)
		{
			if (type == null) return null;
#if (PCL)
            if (type.IsGenericType && type.Name == typeof(JsonCargo<>).Name)
            {
                return string.Format("ValueOf{0}", type.GetGenericArguments()[0].Name);
            }
#else
            if (type.GetTypeInfo().IsGenericType && type.Name == typeof(JsonCargo<>).Name)
			{
				return string.Format("ValueOf{0}", type.GetGenericArguments()[0].Name);
			}
#endif

            var name = TypeRegistry.ResolveName(type);
			if (name == null)
			{
				name = typeWriter(type);
			}
			return name;
		}

        /// <summary>
        /// Gets or sets the type registry to use for finding types.
        /// </summary>
#if !ServiceStackCSharpCodeGenerator
        public static Orckestra.Overture.Server.IJsTypeRegistry TypeRegistry { get; set; }
#else
        public static JsTypeRegistry TypeRegistry { get; set; }
#endif
    }
}
namespace Orckestra.Overture.Serialization
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Reflection;
    using Orckestra.Overture.ServiceModel;
    using Orckestra.Overture.ServiceModel.Marketing;
    using Orckestra.Overture.ServiceModel.Metadata;
    using Orckestra.Overture.ServiceModel.Products.Draft;
    using Orckestra.Overture.ServiceModel.Queries;
    using Orckestra.Overture.ServiceModel.Serialization;
    using ServiceStack.Text;
    using ServiceStack.Text.Common;
    using ServiceStack.Text.Json;
#if !(SILVERLIGHT)
    using System.Collections.Concurrent;
#endif

    public class JsonSerializationConfig
    {
        public static void SetConfig()
        {
            var typeFinder = JsConfig.TypeFinder;
            var typeWriter = JsConfig.TypeWriter;

#if SILVERLIGHT || PCL
            JsConfig.EmitCamelCaseNames = true;
#else
            JsConfig.TextCase = TextCase.CamelCase;
            JsConfig.AllowRuntimeType = _ => true;
#endif
            JsConfig.AlwaysUseUtc = true;
            JsConfig.AssumeUtc = true;
            JsConfig.TimeSpanHandler = TimeSpanHandler.DurationFormat; // we have to use the Xsd duration format otherwise Java and Swift will not be able to deserialize TimeSpans
            JsConfig.DateHandler = DateHandler.ISO8601; // http://stackoverflow.com/questions/206384/how-to-format-a-json-date/2316066#2316066
            JsConfig.EscapeUnicode = true;

            JsConfig.TypeFinder = typeName => JsonSerialization.TypeFinder(typeName, typeFinder);
            JsConfig.TypeWriter = type => JsonSerialization.TypeWriter(type, typeWriter);

            JsConfig<PropertyBag>.OnSerializingFn = PropertyBag.OnJsonSerializing;       // We have custom serializer/deserializer code for the Java and Swift code generators.  If we change the way that the PropertyBag is generated that code will need to be updated.
            JsConfig<PropertyBag>.RawDeserializeFn = DeserializePropertyBag;
            JsConfig<Filter>.OnSerializingFn = Filter.OnJsonSerializing;
            JsConfig<Filter>.RawDeserializeFn = GenerateDeserializationCode<Filter>(new[] { nameof(Filter.Value) });
            JsConfig<TargetingCondition>.OnSerializingFn = TargetingCondition.OnJsonSerializing;
            JsConfig<TargetingCondition>.RawDeserializeFn = GenerateDeserializationCode<TargetingCondition>(new[] { nameof(TargetingCondition.Value) });
            JsConfig<ProductPropertyDefinition>.OnSerializingFn = ProductPropertyDefinition.OnJsonSerializing;
            JsConfig<ProductPropertyDefinition>.RawDeserializeFn = GenerateDeserializationCode<ProductPropertyDefinition>(new[] { nameof(ProductPropertyDefinition.DefaultValue), nameof(ProductPropertyDefinition.MinimumValue), nameof(ProductPropertyDefinition.MaximumValue) });
            JsConfig<ProductPropertyModification>.OnSerializingFn = ProductPropertyModification.OnJsonSerializing;
            JsConfig<ProductPropertyModification>.RawDeserializeFn = GenerateDeserializationCode<ProductPropertyModification>(new[] { nameof(ProductPropertyModification.OldValue), nameof(ProductPropertyModification.CurrentValue) });
            JsConfig<VariantPropertyModification>.OnSerializingFn = VariantPropertyModification.OnJsonSerializing;
            JsConfig<VariantPropertyModification>.RawDeserializeFn = GenerateDeserializationCode<VariantPropertyModification>(new[] { nameof(VariantPropertyModification.OldValue), nameof(VariantPropertyModification.CurrentValue) });
            JsConfig<MediaPropertyModification>.OnSerializingFn = MediaPropertyModification.OnJsonSerializing;
            JsConfig<MediaPropertyModification>.RawDeserializeFn = GenerateDeserializationCode<MediaPropertyModification>(new[] { nameof(MediaPropertyModification.OldValue), nameof(MediaPropertyModification.CurrentValue) });
            JsConfig<ValueTypeWrapper>.RawSerializeFn = ValueTypeWrapperSerialization.RawSerializeFn;
            JsConfig<ValueTypeWrapper>.RawDeserializeFn = ValueTypeWrapperSerialization.RawDeserializeFn;
        }

        /// <summary>
        /// Dictionary to hold the compiled expression that hydrate the properties of an object using a JsonObject as the source
        /// </summary>
        private static readonly ConcurrentDictionary<Type, Action<object, JsonObject>> HydrateTypeMethods = new ConcurrentDictionary<Type, Action<object, JsonObject>>();

        private static Action<object, JsonObject> GenerateHydrateMethod<T>(string[] cargoPropertyNames)
        {
            /* 
             * This method will create a compile expression that looks like this:
             * void dynamic_method<T>(T newInstance, JsonObject rawValues)
             * {
             *      newInstance.NormalProperty = DeserializeValue(rawValues, "NormalProperty", typeof(NormalProperty));
             *      newInstance.CargoProperty = DeserializeJsonCargoValue(rawValues, "CargoProperty");
             * }             
             * 
             * The properties to hydrate are detected using reflection.
             */

            Action<object, JsonObject> hydrateMethod;
            if (HydrateTypeMethods.TryGetValue(typeof(T), out hydrateMethod))
            {
                return hydrateMethod;
            }
            var expressions = new List<Expression>();
            var properties = GetProperties<T>();
            var rawValues = Expression.Parameter(typeof(JsonObject));
            var newInstance = Expression.Parameter(typeof(object));
            var tempVariable = Expression.Parameter(typeof(object));
            var cargoProperties = properties.Where(x => cargoPropertyNames.Contains(x.Name)).ToArray();

            // validate that the property really exists 
            if (cargoProperties.Length != cargoPropertyNames.Length)
            {
                throw new InvalidOperationException("One or more cargo property was not found.");
            }

            foreach (PropertyInfo property in properties)
            {
                MethodCallExpression deserializeCall;
                if (cargoProperties.Contains(property))
                {
                    deserializeCall = Expression.Call(GetDeserializeJsonCargoValueMethod(), rawValues, Expression.Constant(property.Name, typeof(string)));
                }
                else
                {
                    deserializeCall = Expression.Call(GetDeserializeValueMethod(), rawValues, Expression.Constant(property.Name, typeof(string)), Expression.Constant(property.PropertyType, typeof(Type)));
                }

                expressions.Add(Expression.Assign(tempVariable, Expression.Convert(deserializeCall, typeof(object))));


                expressions.Add(Expression.IfThen(Expression.NotEqual(tempVariable, Expression.Constant(null, typeof(object))),
                                                  Expression.Assign(Expression.Property(Expression.Convert(newInstance, typeof(T)), property), Expression.Convert(tempVariable, property.PropertyType))));
            }

            hydrateMethod = Expression.Lambda<Action<object, JsonObject>>(Expression.Block(new[] { tempVariable }, expressions), newInstance, rawValues).Compile();
            HydrateTypeMethods.TryAdd(typeof(T), hydrateMethod);
            return hydrateMethod;
        }

        private static PropertyInfo[] GetProperties<T>()
        {
#if !(PCL)
            return typeof(T).GetProperties();
#else
            return typeof(T).GetTypeInfo().DeclaredProperties.ToArray();
#endif
        }

        private static MethodInfo GetDeserializeJsonCargoValueMethod()
        {
#if !(PCL)
            return typeof(JsonSerializationConfig).GetMethod(nameof(JsonSerializationConfig.DeserializeJsonCargoValue), BindingFlags.Static | BindingFlags.NonPublic);
#else
            return typeof(JsonSerializationConfig).GetTypeInfo().DeclaredMethods.FirstOrDefault(x => x.Name == nameof(JsonSerializationConfig.DeserializeJsonCargoValue) && x.IsStatic);
#endif
        }

        private static MethodInfo GetDeserializeValueMethod()
        {
#if !(PCL)
            return typeof(JsonSerializationConfig).GetMethod(nameof(JsonSerializationConfig.DeserializeValue), BindingFlags.Static | BindingFlags.NonPublic);
#else
            return typeof(JsonSerializationConfig).GetTypeInfo().DeclaredMethods.FirstOrDefault(x => x.Name == nameof(JsonSerializationConfig.DeserializeValue) && x.IsStatic);
#endif
        }

        /// <summary>
        /// This method dynamically generate a compiled expression tree that does the following:
        ///     - Copy the value of each properties not contained in cargoPropertyNames
        ///     - Call a special 'manual' deserializer for properties contained in cargoPropertyNames
        /// </summary>
        /// <typeparam name="T">Any reference type</typeparam>
        /// <param name="cargoPropertyNames">Property names that must be manually deserialized.</param>
        /// <returns>A method to copy the object</returns>
        private static Func<string, T> GenerateDeserializationCode<T>(string[] cargoPropertyNames)
            where T : class, new()
        {
            /* 
             * This method will create a compile expression that looks like this:
             * void dynamic_method<T>(string serializedJson)
             * {
             *      T newInstance = new T();
             *      JsonObject rawValues = JsonObject.Parse(serializedJson)
             *      HydratePropertyMethod(newInstance, rawValues); // this method has been generated by GenerateHydrateMethod
             *      return newInstance;
             * }             
             * 
             * The properties to hydrate are detected using reflection.
             */

            var input = Expression.Parameter(typeof(string), "serializedJson");
            var variables = new List<ParameterExpression>();
            var rawValues = Expression.Parameter(typeof(JsonObject));
            var newInstance = Expression.Parameter(typeof(T));
            var ctorExpr = Expression.New(typeof(T));

            variables.Add(newInstance);
            variables.Add(rawValues);

            var expressions = new List<Expression>();
            expressions.Add(Expression.Assign(newInstance, ctorExpr));
            expressions.Add(Expression.Assign(rawValues, Expression.Call(GetJsonObjectParseMethod(), input)));

            var method = GenerateHydrateMethod<T>(cargoPropertyNames);

            expressions.Add(Expression.Invoke(Expression.Constant(method, method.GetType()), newInstance, rawValues));
            expressions.Add(newInstance);

            var block = Expression.Block(variables, expressions);

            return Expression.Lambda<Func<string, T>>(block, input).Compile();
        }

        private static MethodInfo GetJsonObjectParseMethod()
        {
#if !(PCL)
            return typeof(JsonObject).GetMethod(nameof(JsonObject.Parse), BindingFlags.Static | BindingFlags.Public);
#else
            return typeof(JsonObject).GetRuntimeMethods().First(x => x.Name == nameof(JsonObject.Parse) && x.IsStatic);
#endif
        }

        private static object DeserializeValue(JsonObject obj, string propertyName, Type propertyType)
        {
            var key = obj.Keys.FirstOrDefault(x => String.Equals(x.ToLower(), propertyName.ToLower()));
            if (key != null)
            {
                // code to copy the Children collection of a TargetingCondition
                if (IsGenericType(propertyType) && propertyType.GetGenericTypeDefinition() == typeof(List<>) && HydrateTypeMethods.ContainsKey(GetFirstGenericArgument(propertyType)))
                {
                    return DeserializeList(obj.GetUnescaped(key), GetFirstGenericArgument(propertyType));
                }
                return JsonSerializer.DeserializeFromString(obj.GetUnescaped(key), propertyType);
            }
            return null;
        }

        private static bool IsGenericType(Type propertyType)
        {
#if !(PCL)
            return propertyType.IsGenericType;
#else
            return propertyType.GetTypeInfo().IsGenericType;
#endif
        }

        public static Type[] GetGenericParamsAndArgs(Type type)
        {
#if !(PCL)
            return type.GetGenericArguments();
#else
            var typeInfo = type.GetTypeInfo();

            return typeInfo.IsGenericTypeDefinition
                       ? typeInfo.GenericTypeParameters
                       : typeInfo.GenericTypeArguments;
#endif
        }

        private static Type GetFirstGenericArgument(Type type)
        {
            return GetGenericParamsAndArgs(type)[0];
        }

        private static object DeserializeList(string serializedJson, Type propertyType)
        {
            var listType = typeof(List<>).MakeGenericType(propertyType);
            var list = Activator.CreateInstance(listType) as IList;

            var array = JsonObject.ParseArray(serializedJson);
            foreach (var item in array)
            {
                var method = HydrateTypeMethods[propertyType];
                var newInstance = Activator.CreateInstance(propertyType);

                method(newInstance, item);

                list.Add(newInstance);
            }

            return list;
        }

        private static object DeserializeJsonCargoValue(JsonObject obj, string propertyName)
        {
            var key = obj.Keys.FirstOrDefault(x => String.Equals(x.ToLower(), propertyName.ToLower()));
            if (key != null)
            {
                var unescaped = obj.GetUnescaped(key);
                if (IsStringJsonCargoObject(unescaped))
                {
                    return DeserializeJsonCargoFromString(obj.GetUnescaped(key));
                }

                return JsonSerializer.DeserializeFromString(unescaped, typeof(object));
            }
            return null;
        }

        private static PropertyBag DeserializePropertyBag(string rawStringValue)
        {
            if (String.IsNullOrEmpty(rawStringValue))
            {
                return null;
            }

            var pb = new PropertyBag();

            var rawValues = JsonObject.Parse(rawStringValue);

            foreach (var kvp in rawValues)
            {
                if (IsStringJsonCargoObject(kvp.Value))
                {
                    pb.Add(kvp.Key, DeserializeJsonCargoFromString(kvp.Value));
                }
                else if (kvp.Value == String.Empty)
                {
                    pb.Add(kvp.Key, String.Empty);
                }
                else
                {
                    pb.Add(kvp.Key, JsonSerializer.DeserializeFromString(kvp.Value, typeof(object)));
                }
            }

            return pb;
        }

        private static bool IsStringJsonCargoObject(string value)
        {
            if (!string.IsNullOrWhiteSpace(value) 
                && (value.StartsWith("{") && value.EndsWith("}") || (value.StartsWith("[") && value.EndsWith("]")))
                && (value.Contains(@"""__type""") && !value.Contains(@"\""__type\""")))
            {
                return true;
            }

            return false;
        }

        private static object DeserializeJsonCargoFromString(string value)
        {
            if (String.IsNullOrEmpty(value))

            {
                return null;
            }

            var obj = JsonObject.Parse(value);

            if (obj.ContainsKey(JsWriter.TypeAttr) && obj[JsWriter.TypeAttr] != null)
            {
                var type = JsConfig.TypeFinder(obj[JsWriter.TypeAttr]);
                if (type != null)
                {
                    try
                    {
                        var deserializedValue = JsonSerializer.DeserializeFromString(value, type);
#if !ServiceStackCSharpCodeGenerator
                        var cargo = deserializedValue as ICargo;
                        if (cargo != null)
                        {
                            return cargo.Value;
                        }
#else
                        if (IsJsonCargo(deserializedValue))
                        {
                            return GetJsonCargoValue(deserializedValue);
                        }
#endif

                        return deserializedValue;
                    }
                    catch (System.Runtime.Serialization.SerializationException)
                    {
                    }
                }
            }
            return JsonSerializer.DeserializeFromString(value, typeof(object));
        }

#if ServiceStackCSharpCodeGenerator
        // The new OrckestraCommerce.RestClient cannot references the ICargo interface so we use the code below to target JsonCargo<> directly

        private static readonly ConcurrentDictionary<Type, Func<object, object>> JsonCargoValueDelegates = new ConcurrentDictionary<Type, Func<object, object>>();

        private static readonly ConcurrentDictionary<Type, bool> TypeIsJsonCargo = new ConcurrentDictionary<Type, bool>();

        private static bool IsJsonCargo(object value)
        {
            if (value == null)
            {
                return false;
            }

            return TypeIsJsonCargo.GetOrAdd(value.GetType(), t =>
            {
                return IsGenericType(value.GetType()) && value.GetType().GetGenericTypeDefinition() == typeof(JsonCargo<>);
            });
        }

        private static object GetJsonCargoValue(object value)
        {
            if (value == null)
            {
                return null;
            }
            var del = JsonCargoValueDelegates.GetOrAdd(value.GetType(), CreateJsonCargoValueDelegate);
            return del(value);
        }

        private static Func<object, object> CreateJsonCargoValueDelegate(Type type)
        {
            var firstType = GetFirstGenericArgument(type);
            var value = Expression.Parameter(typeof(object), "value");
            Expression expr = Expression.Property(Expression.Convert(value, type), nameof(JsonCargo<object>.Value));

#if !(PCL)
            if (firstType.IsValueType || firstType.IsPrimitive)
#else
            if (firstType.GetTypeInfo().IsValueType || firstType.GetTypeInfo().IsPrimitive)
#endif
            {
                expr = Expression.Convert(expr, typeof(object));
            }

            return Expression.Lambda<Func<object, object>>(expr, value).Compile();
        }
#endif
    }
}

namespace Orckestra.Overture.ServiceModel.Serialization
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;

    /// <summary>
    /// Implements a JSON type registry.
    /// </summary>
    [SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1600:ElementsMustBeDocumented", Justification = "Reviewed. Suppression is OK here.")]
    public class JsTypeRegistry
#if !ServiceStackCSharpCodeGenerator
        : Orckestra.Overture.Server.IJsTypeRegistry
#endif
    {
		private readonly Dictionary<string, Type> _typeCache = new Dictionary<string, Type>();
		private readonly Dictionary<Type, string> _nameCache = new Dictionary<Type, string>();

		public void RegisterType(string uniqueName, Type type)
		{
			_typeCache[uniqueName] = type;
			_nameCache[type] = uniqueName;
		}

		public void RegisterType<TTypeToRegister>(string uniqueName)
		{
			RegisterType(uniqueName, typeof(TTypeToRegister));
		}

		public void RegisterType<TTypeToRegister>()
		{
			var type = typeof(TTypeToRegister);
			RegisterType(type.Name, type);
		}

		public void RegisterType(Type type)
		{
			if (type == null) throw new InvalidOperationException("You must provide a type");
			RegisterType(type.Name, type);
		}

		public Type ResolveType(string uniqueName)
		{
			Type outVal;
			if (_typeCache.TryGetValue(uniqueName, out outVal))
			{
				return outVal;
			}
			return null;
		}

		public string ResolveName(Type type)
		{
			string outVal;
			if (_nameCache.TryGetValue(type, out outVal))
			{
				return outVal;
			}
			return null;
		}

	}
}

namespace Orckestra.Overture.Serialization
{
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using Orckestra.Overture.ServiceModel;
    using ServiceStack;

#if PCL || SILVERLIGHT
    using ServiceStack.Text; // used for ConcurrentDictionary
#endif

    public class ValueTypeWrapperSerialization
    {
        private static readonly ConcurrentDictionary<Type, Func<object, string>> ObjectToStringConverters = CreateObjectToStringConverters();
        private static readonly ConcurrentDictionary<Type, Func<string, object>> StringToObjectConverters = CreateStringToObjectConverters();

        // Force an ISO8601 format without taking into account the timezone.
        // We assume that the date is always UTC
        private static string _dateFormatIso8601 = @"yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffff\Z";
        private static string _valueOfMarker = "ValueOf";
        private static string _valueOfNullableMarker = "ValueOfNullable";

        public string Type { get; }
        public string Value { get; }

        // Boxing a nullable type is a bit weird in C#: it boxes the Value of the nullable type instead of the Nullable<> (if it has a value).
        // This has the side effect that GetType returns the non nullable type that was boxed instead of Nullable<>
        // It should not cause an issue for our present use.

        public ValueTypeWrapperSerialization(object value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));

            Type = GetTypeFromObject(value);
            Value = ConvertValueToString(value);
        }

        /// <summary>
        /// The json serialization helper.
        /// </summary>
        /// <param name="obj">
        /// The object to serialize.
        /// </param>
        public static string RawSerializeFn(ValueTypeWrapper obj)
        {
            if (obj?.Value == null) return null;
            var sw2 = new ValueTypeWrapperSerialization(obj.Value);
            return ServiceStack.Text.JsonSerializer.SerializeToString(sw2);
        }

        /// <summary>
        /// Deserialize a raw string value to a <see cref="ValueTypeWrapper"/>
        /// </summary>
        /// <param name="rawStringValue">Raw string value to deserialize</param>
        /// <returns>An instance of <see cref="ValueTypeWrapper"/></returns>
        public static ValueTypeWrapper RawDeserializeFn(string rawStringValue)
        {
            if (String.IsNullOrEmpty(rawStringValue))
            {
                return new ValueTypeWrapper();
            }

            var rawValues = ServiceStack.Text.JsonObject.Parse(rawStringValue);

            var typeKey = rawValues.Keys.FirstOrDefault(x => String.Equals(x, nameof(ValueTypeWrapperSerialization.Type), StringComparison.OrdinalIgnoreCase));
            var valueKey = rawValues.Keys.FirstOrDefault(x => String.Equals(x, nameof(ValueTypeWrapperSerialization.Value), StringComparison.OrdinalIgnoreCase));

            if (String.IsNullOrWhiteSpace(typeKey))
            {
                return new ValueTypeWrapper();
            }

            var typeValue = rawValues[typeKey];
            var type = GetTypeFromString(typeValue);

            var value = String.IsNullOrWhiteSpace(valueKey) ? null : rawValues[valueKey];

            var deserializedValue = ConvertStringToObject(type, value);

            return new ValueTypeWrapper(deserializedValue);
        }

        public static List<Type> GetSupportedTypes()
        {
            return ObjectToStringConverters.Keys.ToList();
        }

        private string ConvertValueToString(object value)
        {
            if (!ObjectToStringConverters.ContainsKey(value.GetType()))
            {
                throw new NotSupportedException($"The type {value.GetType()} is not a supported type for serialization of {nameof(ValueTypeWrapper)}");
            }

            var converter = ObjectToStringConverters[value.GetType()];
            return converter(value);
        }

        public static object ConvertStringToObject(Type type, string value)
        {
            if (!StringToObjectConverters.ContainsKey(type))
            {
                throw new NotSupportedException($"The type {type} is not a supported type for deserialization of {nameof(ValueTypeWrapper)}");
            }

            var converter = StringToObjectConverters[type];
            return converter(value);
        }

        private static string GetTypeFromObject(object value)
        {
            var type = value.GetType();

            if (type.IsNullableType())
            {
                return _valueOfNullableMarker + type.Name;
            }

            return _valueOfMarker + type.Name;
        }

        private static ConcurrentDictionary<Type, Func<object, string>> CreateObjectToStringConverters()
        {
            var converters = new ConcurrentDictionary<Type, Func<object, string>>();

            converters.TryAdd(typeof(bool), InvariantConverterToString);
            converters.TryAdd(typeof(bool?), InvariantConverterToString);

            converters.TryAdd(typeof(byte), InvariantConverterToString);
            converters.TryAdd(typeof(byte?), InvariantConverterToString);

            converters.TryAdd(typeof(sbyte), InvariantConverterToString);
            converters.TryAdd(typeof(sbyte?), InvariantConverterToString);

            converters.TryAdd(typeof(short), InvariantConverterToString);
            converters.TryAdd(typeof(short?), InvariantConverterToString);

            converters.TryAdd(typeof(ushort), InvariantConverterToString);
            converters.TryAdd(typeof(ushort?), InvariantConverterToString);

            converters.TryAdd(typeof(int), InvariantConverterToString);
            converters.TryAdd(typeof(int?), InvariantConverterToString);

            converters.TryAdd(typeof(uint), InvariantConverterToString);
            converters.TryAdd(typeof(uint?), InvariantConverterToString);

            converters.TryAdd(typeof(long), InvariantConverterToString);
            converters.TryAdd(typeof(long?), InvariantConverterToString);

            converters.TryAdd(typeof(ulong), InvariantConverterToString);
            converters.TryAdd(typeof(ulong?), InvariantConverterToString);

            converters.TryAdd(typeof(float), InvariantConverterToString);
            converters.TryAdd(typeof(float?), InvariantConverterToString);

            converters.TryAdd(typeof(double), InvariantConverterToString);
            converters.TryAdd(typeof(double?), InvariantConverterToString);

            converters.TryAdd(typeof(decimal), InvariantConverterToString);
            converters.TryAdd(typeof(decimal?), InvariantConverterToString);

            converters.TryAdd(typeof(DateTime), ConvertDateTimeToString);
            converters.TryAdd(typeof(DateTime?), ConvertNullableDateTimeToString);

            converters.TryAdd(typeof(char), InvariantConverterToString);
            converters.TryAdd(typeof(char?), InvariantConverterToString);

            converters.TryAdd(typeof(string), o => o as string);

            return converters;
        }

        private static ConcurrentDictionary<Type, Func<string, object>> CreateStringToObjectConverters()
        {
            var converters = new ConcurrentDictionary<Type, Func<string, object>>();

            converters.TryAdd(typeof(bool), s => InvariantStringToObjectConverter(s, typeof(bool)));
            converters.TryAdd(typeof(bool?), s => InvariantStringToObjectConverter(s, typeof(bool?)));

            converters.TryAdd(typeof(byte), s => InvariantStringToObjectConverter(s, typeof(byte)));
            converters.TryAdd(typeof(byte?), s => InvariantStringToObjectConverter(s, typeof(byte?)));

            converters.TryAdd(typeof(sbyte), s => InvariantStringToObjectConverter(s, typeof(sbyte)));
            converters.TryAdd(typeof(sbyte?), s => InvariantStringToObjectConverter(s, typeof(sbyte?)));

            converters.TryAdd(typeof(short), s => InvariantStringToObjectConverter(s, typeof(short)));
            converters.TryAdd(typeof(short?), s => InvariantStringToObjectConverter(s, typeof(short?)));

            converters.TryAdd(typeof(ushort), s => InvariantStringToObjectConverter(s, typeof(ushort)));
            converters.TryAdd(typeof(ushort?), s => InvariantStringToObjectConverter(s, typeof(ushort?)));

            converters.TryAdd(typeof(int), s => InvariantStringToObjectConverter(s, typeof(int)));
            converters.TryAdd(typeof(int?), s => InvariantStringToObjectConverter(s, typeof(int?)));

            converters.TryAdd(typeof(uint), s => InvariantStringToObjectConverter(s, typeof(uint)));
            converters.TryAdd(typeof(uint?), s => InvariantStringToObjectConverter(s, typeof(uint?)));

            converters.TryAdd(typeof(long), s => InvariantStringToObjectConverter(s, typeof(long)));
            converters.TryAdd(typeof(long?), s => InvariantStringToObjectConverter(s, typeof(long?)));

            converters.TryAdd(typeof(ulong), s => InvariantStringToObjectConverter(s, typeof(ulong)));
            converters.TryAdd(typeof(ulong?), s => InvariantStringToObjectConverter(s, typeof(ulong?)));

            converters.TryAdd(typeof(float), s => InvariantStringToObjectConverter(s, typeof(float)));
            converters.TryAdd(typeof(float?), s => InvariantStringToObjectConverter(s, typeof(float?)));

            converters.TryAdd(typeof(double), s => InvariantStringToObjectConverter(s, typeof(double)));
            converters.TryAdd(typeof(double?), s => InvariantStringToObjectConverter(s, typeof(double?)));

            converters.TryAdd(typeof(decimal), s => InvariantStringToObjectConverter(s, typeof(decimal)));
            converters.TryAdd(typeof(decimal?), s => InvariantStringToObjectConverter(s, typeof(decimal?)));

            converters.TryAdd(typeof(DateTime), ConvertInvariantStringToDateTime);
            converters.TryAdd(typeof(DateTime?), ConvertInvariantStringToNullableDateTime);

            converters.TryAdd(typeof(char), s => InvariantStringToObjectConverter(s, typeof(char)));
            converters.TryAdd(typeof(char?), s => InvariantStringToObjectConverter(s, typeof(char?)));

            converters.TryAdd(typeof(string), o => o as string);

            return converters;
        }

        private static object ConvertInvariantStringToDateTime(string value)
        {
            if (String.IsNullOrWhiteSpace(value))
            {
                throw new InvalidOperationException("Could not convert an empty string to a DateTime.");
            }

            DateTime date;
            if (!DateTime.TryParse(value, CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind, out date))
            {
                throw new InvalidOperationException($"Could not parse value '{value}' as a DateTime.");
            }

            return DateTime.SpecifyKind(date, DateTimeKind.Utc);
        }

        private static object ConvertInvariantStringToNullableDateTime(string value)
        {
            if (String.IsNullOrWhiteSpace(value))
            {
                return null;
            }

            return ConvertInvariantStringToDateTime(value);
        }

        private static object InvariantStringToObjectConverter(string value, Type type)
        {
            if (type.IsNullableType())
            {
                if (String.IsNullOrWhiteSpace(value))
                {
                    return null;
                }

                var underlyingType = Nullable.GetUnderlyingType(type);

                return Convert.ChangeType(value,
                                          // underlyingType should never be null because we have a check above for nullable type
                                          // ReSharper disable once AssignNullToNotNullAttribute
                                          underlyingType,
                                          CultureInfo.InvariantCulture);
            }

            return Convert.ChangeType(value,
                                      type,
                                      CultureInfo.InvariantCulture);
        }

        private static string ConvertDateTimeToString(object value)
        {
            if (value is DateTime)
            {
                return ConvertDateTimeToString((DateTime)value);
            }

            return null;
        }

        private static string ConvertDateTimeToString(DateTime date)
        {
            return date.ToString(_dateFormatIso8601,
                                 System.Globalization.CultureInfo.InvariantCulture);
        }

        private static string ConvertNullableDateTimeToString(object value)
        {
            var nullableDate = value as DateTime?;
            if (nullableDate.HasValue)
            {
                return ConvertDateTimeToString(nullableDate.Value);
            }

            return null;
        }

        private static string InvariantConverterToString(object value)
        {
            if (value == null)
            {
                return null;
            }

            return Convert.ToString(value, CultureInfo.InvariantCulture);
        }

        public static Type GetTypeFromString(string typeValue)
        {
            if (String.IsNullOrWhiteSpace(typeValue))
            {
                throw new InvalidOperationException($"Type is required for deserialization of {nameof(ValueTypeWrapper)}");
            }

            if (typeValue.StartsWith(_valueOfNullableMarker))
            {
                var typeName = typeValue.Substring(_valueOfNullableMarker.Length);
                var systemType = System.Type.GetType(string.Format("System.{0}", typeName));

                return typeof(Nullable<>).MakeGenericType(systemType);
            }
            else if (typeValue.StartsWith(_valueOfMarker))
            {
                var typeName = typeValue.Substring(_valueOfMarker.Length);

                return System.Type.GetType(string.Format("System.{0}", typeName));
            }
            else
            {
                throw new InvalidOperationException($"Unknown type for deserialization of {nameof(ValueTypeWrapper)}: {typeValue}");
            }
        }

        public static bool IsTypeSupported(object value)
        {
            if (value == null)
            {
                return false;
            }

            return ObjectToStringConverters.ContainsKey(value.GetType());
        }
    }
}

