//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Orckestra.Composer.Caching
{


    /// <summary>
    /// The CacheConfiguration Configuration Section.
    /// </summary>
    public partial class CacheConfiguration : global::System.Configuration.ConfigurationSection
    {

        #region Singleton Instance
        /// <summary>
        /// The XML name of the CacheConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string CacheConfigurationSectionName = "caching";

        /// <summary>
        /// The XML path of the CacheConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string CacheConfigurationSectionPath = "caching";

        /// <summary>
        /// Gets the CacheConfiguration instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public static global::Orckestra.Composer.Caching.CacheConfiguration Instance
        {
            get
            {
                return ((global::Orckestra.Composer.Caching.CacheConfiguration)(global::System.Configuration.ConfigurationManager.GetSection(global::Orckestra.Composer.Caching.CacheConfiguration.CacheConfigurationSectionPath)));
            }
        }
        #endregion

        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string XmlnsPropertyName = "xmlns";

        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.CacheConfiguration.XmlnsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Orckestra.Composer.Caching.CacheConfiguration.XmlnsPropertyName]));
            }
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Profiles Property
        /// <summary>
        /// The XML name of the <see cref="Profiles"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string ProfilesPropertyName = "profiles";

        /// <summary>
        /// Gets or sets the Profiles.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Profiles.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.CacheConfiguration.ProfilesPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual global::Orckestra.Composer.Caching.CacheProfiles Profiles
        {
            get
            {
                return ((global::Orckestra.Composer.Caching.CacheProfiles)(base[global::Orckestra.Composer.Caching.CacheConfiguration.ProfilesPropertyName]));
            }
            set
            {
                base[global::Orckestra.Composer.Caching.CacheConfiguration.ProfilesPropertyName] = value;
            }
        }
        #endregion

        #region Categories Property
        /// <summary>
        /// The XML name of the <see cref="Categories"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string CategoriesPropertyName = "categories";

        /// <summary>
        /// Gets or sets the Categories.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Categories.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.CacheConfiguration.CategoriesPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual global::Orckestra.Composer.Caching.CacheCategoryCollection Categories
        {
            get
            {
                return ((global::Orckestra.Composer.Caching.CacheCategoryCollection)(base[global::Orckestra.Composer.Caching.CacheConfiguration.CategoriesPropertyName]));
            }
            set
            {
                base[global::Orckestra.Composer.Caching.CacheConfiguration.CategoriesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Orckestra.Composer.Caching
{


    /// <summary>
    /// A collection of CacheProfile instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Orckestra.Composer.Caching.CacheProfile), CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName = global::Orckestra.Composer.Caching.CacheProfiles.CacheProfilePropertyName)]
    public partial class CacheProfiles : global::System.Configuration.ConfigurationElementCollection
    {

        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Orckestra.Composer.Caching.CacheProfile"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string CacheProfilePropertyName = "profile";
        #endregion

        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }

        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        protected override string ElementName
        {
            get
            {
                return global::Orckestra.Composer.Caching.CacheProfiles.CacheProfilePropertyName;
            }
        }

        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Orckestra.Composer.Caching.CacheProfiles.CacheProfilePropertyName);
        }

        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Orckestra.Composer.Caching.CacheProfile)(element)).Name;
        }

        /// <summary>
        /// Creates a new <see cref="global::Orckestra.Composer.Caching.CacheProfile"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Orckestra.Composer.Caching.CacheProfile"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Orckestra.Composer.Caching.CacheProfile();
        }
        #endregion

        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Orckestra.Composer.Caching.CacheProfile"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Orckestra.Composer.Caching.CacheProfile"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public global::Orckestra.Composer.Caching.CacheProfile this[int index]
        {
            get
            {
                return ((global::Orckestra.Composer.Caching.CacheProfile)(base.BaseGet(index)));
            }
        }

        /// <summary>
        /// Gets the <see cref="global::Orckestra.Composer.Caching.CacheProfile"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Orckestra.Composer.Caching.CacheProfile"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public global::Orckestra.Composer.Caching.CacheProfile this[object name]
        {
            get
            {
                return ((global::Orckestra.Composer.Caching.CacheProfile)(base.BaseGet(name)));
            }
        }
        #endregion

        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Orckestra.Composer.Caching.CacheProfile"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="profile">The <see cref="global::Orckestra.Composer.Caching.CacheProfile"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public void Add(global::Orckestra.Composer.Caching.CacheProfile profile)
        {
            base.BaseAdd(profile);
        }
        #endregion

        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Orckestra.Composer.Caching.CacheProfile"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="profile">The <see cref="global::Orckestra.Composer.Caching.CacheProfile"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public void Remove(global::Orckestra.Composer.Caching.CacheProfile profile)
        {
            base.BaseRemove(this.GetElementKey(profile));
        }
        #endregion

        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Orckestra.Composer.Caching.CacheProfile"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Orckestra.Composer.Caching.CacheProfile"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public global::Orckestra.Composer.Caching.CacheProfile GetItemAt(int index)
        {
            return ((global::Orckestra.Composer.Caching.CacheProfile)(base.BaseGet(index)));
        }

        /// <summary>
        /// Gets the <see cref="global::Orckestra.Composer.Caching.CacheProfile"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Orckestra.Composer.Caching.CacheProfile"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public global::Orckestra.Composer.Caching.CacheProfile GetItemByKey(string name)
        {
            return ((global::Orckestra.Composer.Caching.CacheProfile)(base.BaseGet(((object)(name)))));
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Default Property
        /// <summary>
        /// The XML name of the <see cref="Default"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string DefaultPropertyName = "default";

        /// <summary>
        /// Gets or sets the Default.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Default.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.CacheProfiles.DefaultPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual string Default
        {
            get
            {
                return ((string)(base[global::Orckestra.Composer.Caching.CacheProfiles.DefaultPropertyName]));
            }
            set
            {
                base[global::Orckestra.Composer.Caching.CacheProfiles.DefaultPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Orckestra.Composer.Caching
{


    /// <summary>
    /// The CacheProfile Configuration Element.
    /// </summary>
    public partial class CacheProfile : global::System.Configuration.ConfigurationElement
    {

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Duration Property
        /// <summary>
        /// The XML name of the <see cref="Duration"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string DurationPropertyName = "duration";

        /// <summary>
        /// Gets or sets the Duration.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Duration.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.CacheProfile.DurationPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = "0:0:0")]
        public virtual global::System.TimeSpan Duration
        {
            get
            {
                return ((global::System.TimeSpan)(base[global::Orckestra.Composer.Caching.CacheProfile.DurationPropertyName]));
            }
            set
            {
                base[global::Orckestra.Composer.Caching.CacheProfile.DurationPropertyName] = value;
            }
        }
        #endregion

        #region Priority Property
        /// <summary>
        /// The XML name of the <see cref="Priority"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string PriorityPropertyName = "priority";

        /// <summary>
        /// Gets or sets the Priority.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Priority.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.CacheProfile.PriorityPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual global::Orckestra.Composer.Caching.ConfigurationCachePriority Priority
        {
            get
            {
                return ((global::Orckestra.Composer.Caching.ConfigurationCachePriority)(base[global::Orckestra.Composer.Caching.CacheProfile.PriorityPropertyName]));
            }
            set
            {
                base[global::Orckestra.Composer.Caching.CacheProfile.PriorityPropertyName] = value;
            }
        }
        #endregion

        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string NamePropertyName = "name";

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.CacheProfile.NamePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Orckestra.Composer.Caching.CacheProfile.NamePropertyName]));
            }
            set
            {
                base[global::Orckestra.Composer.Caching.CacheProfile.NamePropertyName] = value;
            }
        }
        #endregion

        #region ClientType Property
        /// <summary>
        /// The XML name of the <see cref="ClientType"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string ClientTypePropertyName = "clientType";

        /// <summary>
        /// Gets or sets the ClientType.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.ComponentModel.DescriptionAttribute("The ClientType.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.CacheProfile.ClientTypePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual string ClientType
        {
            get
            {
                return ((string)(base[global::Orckestra.Composer.Caching.CacheProfile.ClientTypePropertyName]));
            }
            set
            {
                base[global::Orckestra.Composer.Caching.CacheProfile.ClientTypePropertyName] = value;
            }
        }
        #endregion

        #region AcquiredLockTimeout Property
        /// <summary>
        /// The XML name of the <see cref="AcquiredLockTimeout"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string AcquiredLockTimeoutPropertyName = "acquiredLockTimeout";

        /// <summary>
        /// Gets or sets the AcquiredLockTimeout.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.ComponentModel.DescriptionAttribute("The AcquiredLockTimeout.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.CacheProfile.AcquiredLockTimeoutPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = "00:05:00")]
        public virtual global::System.TimeSpan AcquiredLockTimeout
        {
            get
            {
                return ((global::System.TimeSpan)(base[global::Orckestra.Composer.Caching.CacheProfile.AcquiredLockTimeoutPropertyName]));
            }
            set
            {
                base[global::Orckestra.Composer.Caching.CacheProfile.AcquiredLockTimeoutPropertyName] = value;
            }
        }
        #endregion

        #region Settings Property
        /// <summary>
        /// The XML name of the <see cref="Settings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string SettingsPropertyName = "settings";

        /// <summary>
        /// Gets or sets the Settings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Settings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.CacheProfile.SettingsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual global::Orckestra.Composer.Caching.ProfileSettings Settings
        {
            get
            {
                return ((global::Orckestra.Composer.Caching.ProfileSettings)(base[global::Orckestra.Composer.Caching.CacheProfile.SettingsPropertyName]));
            }
            set
            {
                base[global::Orckestra.Composer.Caching.CacheProfile.SettingsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Orckestra.Composer.Caching
{


    /// <summary>
    /// The CacheCategory Configuration Element.
    /// </summary>
    public partial class CacheCategory : global::System.Configuration.ConfigurationElement
    {

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string NamePropertyName = "name";

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.CacheCategory.NamePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Orckestra.Composer.Caching.CacheCategory.NamePropertyName]));
            }
            set
            {
                base[global::Orckestra.Composer.Caching.CacheCategory.NamePropertyName] = value;
            }
        }
        #endregion

        #region ProfileName Property
        /// <summary>
        /// The XML name of the <see cref="ProfileName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string ProfileNamePropertyName = "profileName";

        /// <summary>
        /// Gets or sets the ProfileName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.ComponentModel.DescriptionAttribute("The ProfileName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.CacheCategory.ProfileNamePropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
        public virtual string ProfileName
        {
            get
            {
                return ((string)(base[global::Orckestra.Composer.Caching.CacheCategory.ProfileNamePropertyName]));
            }
            set
            {
                base[global::Orckestra.Composer.Caching.CacheCategory.ProfileNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Orckestra.Composer.Caching
{


    /// <summary>
    /// A collection of CacheCategory instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Orckestra.Composer.Caching.CacheCategory), CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName = global::Orckestra.Composer.Caching.CacheCategoryCollection.CacheCategoryPropertyName)]
    public partial class CacheCategoryCollection : global::System.Configuration.ConfigurationElementCollection
    {

        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Orckestra.Composer.Caching.CacheCategory"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string CacheCategoryPropertyName = "category";
        #endregion

        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }

        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        protected override string ElementName
        {
            get
            {
                return global::Orckestra.Composer.Caching.CacheCategoryCollection.CacheCategoryPropertyName;
            }
        }

        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Orckestra.Composer.Caching.CacheCategoryCollection.CacheCategoryPropertyName);
        }

        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Orckestra.Composer.Caching.CacheCategory)(element)).Name;
        }

        /// <summary>
        /// Creates a new <see cref="global::Orckestra.Composer.Caching.CacheCategory"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Orckestra.Composer.Caching.CacheCategory"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Orckestra.Composer.Caching.CacheCategory();
        }
        #endregion

        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Orckestra.Composer.Caching.CacheCategory"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Orckestra.Composer.Caching.CacheCategory"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public global::Orckestra.Composer.Caching.CacheCategory this[int index]
        {
            get
            {
                return ((global::Orckestra.Composer.Caching.CacheCategory)(base.BaseGet(index)));
            }
        }

        /// <summary>
        /// Gets the <see cref="global::Orckestra.Composer.Caching.CacheCategory"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Orckestra.Composer.Caching.CacheCategory"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public global::Orckestra.Composer.Caching.CacheCategory this[object name]
        {
            get
            {
                return ((global::Orckestra.Composer.Caching.CacheCategory)(base.BaseGet(name)));
            }
        }
        #endregion

        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Orckestra.Composer.Caching.CacheCategory"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="category">The <see cref="global::Orckestra.Composer.Caching.CacheCategory"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public void Add(global::Orckestra.Composer.Caching.CacheCategory category)
        {
            base.BaseAdd(category);
        }
        #endregion

        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Orckestra.Composer.Caching.CacheCategory"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="category">The <see cref="global::Orckestra.Composer.Caching.CacheCategory"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public void Remove(global::Orckestra.Composer.Caching.CacheCategory category)
        {
            base.BaseRemove(this.GetElementKey(category));
        }
        #endregion

        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Orckestra.Composer.Caching.CacheCategory"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Orckestra.Composer.Caching.CacheCategory"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public global::Orckestra.Composer.Caching.CacheCategory GetItemAt(int index)
        {
            return ((global::Orckestra.Composer.Caching.CacheCategory)(base.BaseGet(index)));
        }

        /// <summary>
        /// Gets the <see cref="global::Orckestra.Composer.Caching.CacheCategory"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Orckestra.Composer.Caching.CacheCategory"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public global::Orckestra.Composer.Caching.CacheCategory GetItemByKey(string name)
        {
            return ((global::Orckestra.Composer.Caching.CacheCategory)(base.BaseGet(((object)(name)))));
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Orckestra.Composer.Caching
{


    /// <summary>
    /// A collection of ProfileSetting instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Orckestra.Composer.Caching.ProfileSetting), CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName = global::Orckestra.Composer.Caching.ProfileSettings.ProfileSettingPropertyName)]
    public partial class ProfileSettings : global::System.Configuration.ConfigurationElementCollection
    {

        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string ProfileSettingPropertyName = "profileSetting";
        #endregion

        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }

        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        protected override string ElementName
        {
            get
            {
                return global::Orckestra.Composer.Caching.ProfileSettings.ProfileSettingPropertyName;
            }
        }

        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Orckestra.Composer.Caching.ProfileSettings.ProfileSettingPropertyName);
        }

        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Orckestra.Composer.Caching.ProfileSetting)(element)).Key;
        }

        /// <summary>
        /// Creates a new <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Orckestra.Composer.Caching.ProfileSetting();
        }
        #endregion

        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public global::Orckestra.Composer.Caching.ProfileSetting this[int index]
        {
            get
            {
                return ((global::Orckestra.Composer.Caching.ProfileSetting)(base.BaseGet(index)));
            }
        }

        /// <summary>
        /// Gets the <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public global::Orckestra.Composer.Caching.ProfileSetting this[object key]
        {
            get
            {
                return ((global::Orckestra.Composer.Caching.ProfileSetting)(base.BaseGet(key)));
            }
        }
        #endregion

        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="profileSetting">The <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public void Add(global::Orckestra.Composer.Caching.ProfileSetting profileSetting)
        {
            base.BaseAdd(profileSetting);
        }
        #endregion

        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="profileSetting">The <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public void Remove(global::Orckestra.Composer.Caching.ProfileSetting profileSetting)
        {
            base.BaseRemove(this.GetElementKey(profileSetting));
        }
        #endregion

        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public global::Orckestra.Composer.Caching.ProfileSetting GetItemAt(int index)
        {
            return ((global::Orckestra.Composer.Caching.ProfileSetting)(base.BaseGet(index)));
        }

        /// <summary>
        /// Gets the <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::Orckestra.Composer.Caching.ProfileSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public global::Orckestra.Composer.Caching.ProfileSetting GetItemByKey(string key)
        {
            return ((global::Orckestra.Composer.Caching.ProfileSetting)(base.BaseGet(((object)(key)))));
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Orckestra.Composer.Caching
{


    /// <summary>
    /// The ProfileSetting Configuration Element.
    /// </summary>
    public partial class ProfileSetting : global::System.Configuration.ConfigurationElement
    {

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Key Property
        /// <summary>
        /// The XML name of the <see cref="Key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string KeyPropertyName = "key";

        /// <summary>
        /// Gets or sets the Key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.ProfileSetting.KeyPropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
        public virtual string Key
        {
            get
            {
                return ((string)(base[global::Orckestra.Composer.Caching.ProfileSetting.KeyPropertyName]));
            }
            set
            {
                base[global::Orckestra.Composer.Caching.ProfileSetting.KeyPropertyName] = value;
            }
        }
        #endregion

        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        internal const string ValuePropertyName = "value";

        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Orckestra.Composer.Caching.ProfileSetting.ValuePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual string Value
        {
            get
            {
                return ((string)(base[global::Orckestra.Composer.Caching.ProfileSetting.ValuePropertyName]));
            }
            set
            {
                base[global::Orckestra.Composer.Caching.ProfileSetting.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Orckestra.Composer.Caching
{


    /// <summary>
    /// ConfigurationCachePriority.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.3.5")]
    public enum ConfigurationCachePriority
    {

        /// <summary>
        /// Normal.
        /// </summary>
        Normal,

        /// <summary>
        /// NotRemovable.
        /// </summary>
        NotRemovable,
    }
}
