@using Composite.AspNet.Razor

@helper Pagination(int pageCurrent, int pageCount, int groupsize, string baseUrl, string pageQueryKey = "page")
{
    var queryString = baseUrl.IndexOf("?") > 0 ? baseUrl.Split('?')[1] : string.Empty;

    if (!string.IsNullOrEmpty(queryString))
    {
        baseUrl = baseUrl.Split('?')[0];
        var parameters = HttpUtility.ParseQueryString(queryString);
        if (parameters[pageQueryKey] != null)
        {
            parameters.Remove(pageQueryKey);
        }

        if (parameters.Count > 0)
        {
            queryString = "&" + parameters.ToString();
        }
    }

    Func<int, string> PageLink = n => $"{baseUrl}?{pageQueryKey}={n}{queryString}";
    var grouppage = (pageCurrent - 1) / groupsize;

    <ul class="pagination">

        @if (pageCurrent > groupsize)
        {
            <li class="page-item"><a href="@PageLink(1)" tabindex="-1">&lt;&lt;</a></li>
        }

        @if (pageCurrent > 1)
        {
            <li class="page-item">
                <a class="page-link" href="@PageLink(pageCurrent - 1)">&lt;</a>
            </li>
        }

        @for (int page = grouppage * groupsize + 1; page <= pageCount + 1 && page <= (grouppage + 1) * groupsize; page++)
        {
            if (page < pageCount + 1)
            {
                if (page == pageCurrent)
                {
                    <li class="page-item active">
                        <a class="page-link">
                            @page <span class="sr-only">(current)</span>
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" href="@PageLink(page)">@page</a>
                    </li>
                }
            }
        }
        @if (pageCurrent + 1 <= pageCount)
        {
            <li class="page-item"><a class="page-link" href="@PageLink(pageCurrent + 1)">&gt;</a></li>
        }
        @if (grouppage < (pageCount - 1) / groupsize)
        {
            <li class="page-item"><a class="page-link" href="@PageLink(pageCount)">&gt;&gt;</a></li>
        }
    </ul>
}

@helper SortBy()
{
    <div class="dropdown sort-by" v-if="SelectedSortBy">
        <span class="d-none d-lg-inline">@Html.Localize("List-Search", "L_Sorting")&#160;</span>
        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-qa="search-sort-by-toggle"
                data-toggle="dropdown" aria-expanded="true">
            {{SelectedSortBy.DisplayName}}
        </button>
        <div class="dropdown-menu  dropdown-menu-sm-right  dropdown-menu-md-right" role="menu" data-qa="search-sort-by">
            <a v-for="sortBy in AvailableSortBys"
               class="dropdown-item"
               v-on:click="sortingChanged(sortBy.Url)">
                {{sortBy.DisplayName}}
            </a>
        </div>
    </div>
}

@helper PaginationDropdown()
{
    <div class="pagination-dropdown" v-if="Pagination">
        <ul class="pagination m-0  align-items-center justify-content-end">
            <li class="page-item previous" v-bind:class="{ disabled: !Pagination.PreviousPage.Url }">
                <a class="page-link" v-bind:title="Pagination.PreviousPage.DisplayName" v-on:click="sortingChanged(Pagination.PreviousPage.Url)">
                    <i class="fa fa-arrow-circle-left"></i>&#160;{{Pagination.PreviousPage.DisplayName}}
                </a>
            </li>

            <li class="page-item mx-2">
                <div class="dropdown" v-if="Pagination.CurrentPage">
                    <button class="btn btn-outline-secondary  dropdown-toggle" type="button" data-qa="page-select-toggle"
                            data-toggle="dropdown" aria-expanded="true">
                        @Html.Localize("List-Search", "L_PageInDropDown")&#160;{{Pagination.CurrentPage.DisplayName}}
                    </button>
                    <div class="dropdown-menu dropdown-menu-sm-right dropdown-menu-md-right" role="menu" data-qa="page-select">
                        <a class="dropdown-item" v-for="page in Pagination.Pages" v-on:click="sortingChanged(page.UrlPath)">
                            @Html.Localize("List-Search", "L_PageInDropDown")&#160;{{page.DisplayName}}
                        </a>
                    </div>
                </div>
            </li>

            <li class="page-item ">
                <span class="d-flex-inline pt-2">
                    &#160;@Html.Localized("List-Search", "L_PageOfTotalItems", "{{Pagination.TotalNumberOfPages}}")&#160;
                </span>
            </li>
            <li class="page-item next ml-2" v-bind:class="{ disabled: !Pagination.NextPage.Url }">
                <a class="page-link" v-bind:title="Pagination.NextPage.DisplayName" v-on:click="sortingChanged(Pagination.NextPage.Url)">
                    {{Pagination.NextPage.DisplayName}}&#160;<i class="fa  fa-arrow-circle-right"></i>
                </a>
            </li>
        </ul>
    </div>
}

@helper Pagination()
{
    <ul class="pager pagination" v-if="Pagination">
        <li v-if="Pagination.PreviousPage" class="page-item previous mr-auto" v-bind:class="{ disabled: !Pagination.PreviousPage.Url }">
            <a class="page-link" data-qa="search-pagination-previous" v-on:click="sortingChanged(Pagination.PreviousPage.Url)">
                <span class="fa fa-arrow-circle-left"></span> {{Pagination.PreviousPage.DisplayName}}
            </a>
        </li>
        <li v-if="Pagination.NextPage" class="page-item next" v-bind:class="{ disabled: !Pagination.NextPage.Url }">
            <a class="page-link" data-qa="search-pagination-next" v-on:click="sortingChanged(Pagination.NextPage.Url)">
                {{Pagination.NextPage.DisplayName}} <span class="fa fa-arrow-circle-right"></span>
            </a>
        </li>
    </ul>
}


@helper PaginationDropdownByCount(string vueModel = "Pagination")
{
    <div class="pagination-dropdown" v-if="@vueModel">
        <ul class="pagination m-0  align-items-center justify-content-end">
            <li class="page-item previous" v-bind:class="{ disabled: !@(vueModel).PreviousPage }">
                <a class="page-link" title="@Html.Localize("List-Search", "B_Previous")" v-on:click="previousPage()">
                    <i class="fa fa-arrow-circle-left"></i>&#160;@Html.Localize("List-Search", "B_Previous")
                </a>
            </li>

            <li class="page-item mx-2">
                <div class="dropdown">
                    <button class="btn btn-outline-secondary  dropdown-toggle" type="button" data-qa="page-select-toggle"
                            data-toggle="dropdown" aria-expanded="true">
                        @Html.Localize("List-Search", "L_PageInDropDown")&#160;{{@(vueModel).CurrentPage}}
                    </button>
                    <div class="dropdown-menu dropdown-menu-sm-right dropdown-menu-md-right" role="menu" data-qa="page-select">
                        <a class="dropdown-item" v-for="index in @(vueModel).PagesCount" v-on:click="toPage(index)">
                            @Html.Localize("List-Search", "L_PageInDropDown")&#160;{{index}}
                        </a>
                    </div>
                </div>
            </li>

            <li class="page-item ">
                <span class="d-flex-inline pt-2">
                    &#160;@Html.Localized("List-Search", "L_PageOfTotalItems", $"{{{{{vueModel}.PagesCount}}}}")&#160;
                </span>
            </li>
            <li class="page-item next ml-2" v-bind:class="{ disabled: !@(vueModel).NextPage }">
                <a class="page-link" title="@Html.Localize("List-Search", "B_Next")" v-on:click="nextPage()">
                    @Html.Localize("List-Search", "B_Next")&#160;<i class="fa  fa-arrow-circle-right"></i>
                </a>
            </li>
        </ul>
    </div>
}


@helper PaginationByCount(string vueModel = "Pagination")
{
    <ul class="pager pagination" v-if="@vueModel">
        <li class="page-item previous mr-auto" v-bind:class="{ disabled: !@(vueModel).PreviousPage }">
            <a class="page-link" data-qa="search-pagination-previous" title="@Html.Localize("List-Search", "B_Previous")" v-on:click="previousPage()">
                <span class="fa fa-arrow-circle-left"></span> @Html.Localize("List-Search", "B_Previous")
            </a>
        </li>
        <li class="page-item next" v-bind:class="{ disabled: !@(vueModel).NextPage }">
            <a class="page-link" data-qa="search-pagination-next" title="@Html.Localize("List-Search", "B_Next")" v-on:click="nextPage()">
                @Html.Localize("List-Search", "B_Next") <span class="fa fa-arrow-circle-right"></span>
            </a>
        </li>
    </ul>
}

@helper ShowFacetsCollapseBtn()
{
    <button type="button"
            class="btn  btn-outline-secondary btn-dropdown  w-100"
            data-toggle="collapse"
            data-target="#leftCol" aria-expanded="false">
        @Html.Localize("List-Search", "B_FilterBy")
        <span class="fa  fa-angle-down"></span>
    </button>
}

@helper VariantKvaSelector(string vueBinding, string kvaProperyName)
{
    <div class="variant-kva variant-kva-@(kvaProperyName)">
        <div class="form-group row">
            <label v-bind:for="'@(kvaProperyName)' + @(vueBinding).ProductId" class="col-md-4 col-form-label">{{getKeyVariantDisplayName(@(vueBinding).ProductId, '@(kvaProperyName)')}}:</label>
            <div class="col-md-8">
                <select name="@kvaProperyName"
                        v-bind:id="'@(kvaProperyName)' + @(vueBinding).ProductId"
                        class="form-control"
                        required="required"
                        placeholder="select price"
                        v-on:change="($event) => selectKva(@(vueBinding), '@(kvaProperyName)', $event.target.value)">
                    <option disabled="disabled" v-bind:selected="requireSelection(@(vueBinding), '@(kvaProperyName)')">- select {{getKeyVariantDisplayName(@(vueBinding).ProductId, '@(kvaProperyName)')}} -</option>
                    <option v-for="v in getKeyVariantValues(@(vueBinding).ProductId, '@(kvaProperyName)')"
                            v-bind:key="v.Value"
                            v-bind:value="v.Value"
                            v-bind:selected="v.Selected"
                            v-bind:disabled="v.Disabled">
                        {{v.Title}}
                    </option>
                </select> 
            </div>
        </div>
    </div>
}

@helper VariantColorKvaSelector(string vueBinding, string kvaProperyName)
{
<div class="variant-kva variant-kva-color variant-kva-@(kvaProperyName)">
    <div v-for="v in getKeyVariantValues(@(vueBinding).ProductId, '@(kvaProperyName)')"
         v-bind:class="{'selected': v.Selected, 'disabled': v.Disabled }"
         v-on:click="selectKva(@(vueBinding), '@(kvaProperyName)', v.Value)"
         v-bind:title="v.Title"
         class="kva-color">
        <div class="kva-color-value" v-bind:style="{background: v.ConfiguredValue ?? v.Value}"></div>
    </div>
</div>
}
