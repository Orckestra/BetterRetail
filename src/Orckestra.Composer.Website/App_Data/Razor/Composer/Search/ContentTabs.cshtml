@inherits Composer.Razor.ComposerRazorFunction
@using Orckestra.Composer.Search.Context
@using Orckestra.Composer.Search.ViewModels
@using Orckestra.Search.WebsiteSearch;
@using Composite.Core.Routing.Pages;
@using Orckestra.Composer.Search.RequestConstants
@using Orckestra.Composer.Search
@using Orckestra.Composer.ContentSearch.Services
@using Orckestra.Composer.ContentSearch.Parameters
@using Orckestra.Composer.ContentSearch.ViewModels
@using Orckestra.Composer.ContentSearch.DataTypes
@using Newtonsoft.Json

@functions {
    public override string FunctionDescription
    {
        get { return "Search Results with Content Tabs"; }
    }

    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.CurrentSite.Label}", Help = "${Orckestra.Search.WebsiteSearch,SearchResults.CurrentSite.Help}", DefaultValue = true)]
    public bool CurrentSite { get; set; }

    [FunctionParameter(Label = "${Orckestra.Search.WebsiteSearch,SearchResults.ShowHighlights.Label}", Help = "${Orckestra.Search.WebsiteSearch,SearchResults.ShowHighlights.Help}", DefaultValue = false)]
    public bool ShowHighlights { get; set; }

    public ISearchRequestContext SearchRequestContext { get; set; }
    public IContentSearchViewService ContentSearchViewService { get; set; }

    public SearchViewModel ProductsSearchViewModel => SearchRequestContext.ProductsSearchViewModel;
    public ProductSearchResultsViewModel ProductSearchResults => ProductsSearchViewModel.ProductSearchResults;

    private bool IsProductsCorrected()
    {
        return !string.IsNullOrEmpty(ProductSearchResults.CorrectedSearchTerms) && ProductSearchResults.TotalCount > 0;
    }

    private bool IsProductFacetsSelected()
    {
        return ProductsSearchViewModel != null && ProductsSearchViewModel.FacetSettings.SelectedFacets != null
            && ProductsSearchViewModel.FacetSettings.SelectedFacets.Facets.Count > 0;
    }
}

@{
    if (string.IsNullOrWhiteSpace(SearchRequestContext.SearchQuery)) { return; }

    C1PageRoute.RegisterPathInfoUsage();
    string pathInfo = C1PageRoute.GetPathInfo();
    string currentTabPathInfo = pathInfo?.Split('/')[1];

    var productTab = Data.Get<IContentTab>().FirstOrDefault(t => t.IsProductTab);
    var isProductTab = (productTab != null && (currentTabPathInfo == null || productTab.UrlTitle == currentTabPathInfo));
    SearchRequestContext.IsProductsSearchActive = isProductTab;

    var contentSearchVm = ContentSearchViewService.GetContentSearchViewModel(new GetContentSearchParameter
    {
        Culture = Data.CurrentLocale,
        PageSize = SearchConfiguration.MaxItemsPerPage,
        CurrentPage = SearchRequestContext.CurrentPage,
        PathInfo = currentTabPathInfo,
        CurrentSiteOnly = CurrentSite,
        SearchQuery = SearchRequestContext.SearchQuery,
        IsCorrectedSearchQuery = IsProductsCorrected(),
        CorrectedSearchQuery = ProductSearchResults.CorrectedSearchTerms,
        BaseUrl = CurrentPageNode.Url,
        QueryKeys = Request.QueryString?.AllKeys,
        ProductsTabActive = isProductTab,
        SortBy = SearchRequestContext.SortBy,
        SortDirection = SearchRequestContext.SortDirection
    });

    var justProductsSearch = contentSearchVm == null;

    if (justProductsSearch)
    {
        @Function("Composer.Search.Summary")
        @ShowProductsSearchResults()
        return;
    }

    if (currentTabPathInfo == null)
    {
        currentTabPathInfo = productTab != null ? productTab.UrlTitle : contentSearchVm.Tabs.First()?.UrlTitle;
    }

    if (productTab != null)
    {
        var productTabVm = new ContentSearchTabViewModel
        {
            Title = productTab.Title,
            UrlTitle = productTab.UrlTitle,
            TabUrl = $"{CurrentPageNode.Url}/{productTab.UrlTitle}?{SearchRequestParams.Keywords}={SearchRequestContext.SearchQuery}",
            Total = IsProductsCorrected() && !isProductTab ? 0 : ProductSearchResults.TotalCount,
            IsActive = (productTab != null && currentTabPathInfo == null) || (productTab != null && productTab.UrlTitle == currentTabPathInfo)
        };

        contentSearchVm.Tabs.Insert(0, productTabVm);
    }

    var currentTab = contentSearchVm.ActiveTab;

    string vueId = "vueSearchResults" + Guid.NewGuid().ToString("N");
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0" xmlns:v-bind="v-bind" xmlns:v-on="v-on">
<head>
</head>
<body>
    @SearchSummary(contentSearchVm, isProductTab, currentTab?.Title, productTab)

    <div>
        <!-- Tab panes -->
        <div class="tab-content mt-4">
            @if (currentTab != null)
            {
                if (currentTab.Total == 0)
                {
                    var tabsWithResults = contentSearchVm.Tabs.Where(t => t.Total > 0).ToList();
                    <p>@Html.Localized("List-Search", "WeAreSorry", SearchRequestContext.SearchQuery, currentTab.Title)</p>
                    if (tabsWithResults.Any())
                    {
                        if (!(isProductTab && IsProductFacetsSelected()))
                        {
                            @ShowButWeFindIn(tabsWithResults)
                            @ShowButWeFindInTeaser(tabsWithResults)
                        }
                    }
                }

                if (isProductTab)
                {
                    @ShowProductsSearchResults()
                }
                else
                {
                    <form id="SearchForm" method="get" role="search" action="@CurrentPageNode.Url/@currentTab.UrlTitle">
                        <input id="keywords" type="hidden" value="@SearchRequestContext.SearchQuery" name="keywords" />

                        <f:function name="Composer.Grids.SearchGrid">
                            <f:param name="LeftPart">
                                <html>
                                <head>
                                </head>
                                <body>
                                    @Function("Composer.ContentSearch.Facets", new { Results = contentSearchVm })
                                </body>
                                </html>
                            </f:param>
                            <f:param name="RightPart">
                                <html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0" xmlns:v-bind="v-bind" xmlns:v-on="v-on">
                                <head>
                                </head>
                                <body>
                                    <div class="search-results"
                                         data-oc-controller="ContentSearch.SearchResults"
                                         data-context="@JsonConvert.SerializeObject(contentSearchVm, new Newtonsoft.Json.Converters.StringEnumConverter())"
                                         data-vueid="@vueId"
                                         id="@vueId"
                                         v-cloak="true">
                                        <div class="row filters-row">
                                            @if (currentTab.Total > 0)
                                            {
                                                <div class="col-6 d-lg-none">
                                                    @ShowFacetsCollapseBtn()
                                                </div>
                                                <div class="col-6">
                                                    @SearchHelpers.ContentSortBy()
                                                </div>
                                                <div class="col-6 d-none d-lg-block">
                                                    @SearchHelpers.PaginationDropdownByCount()
                                                </div>
                                            }
                                        </div>
                                        <div class="row">
                                            <div v-for="(contentItem, index) in SearchResults" class="col-12 col-sm-4 col-lg-4  mb-4" v-bind:key="contentItem.ProductId">
                                                @ShowContentSearchEntry()
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-12 d-block pt-2" v-if="TotalCount > 0">
                                                @SearchHelpers.PaginationByCount()
                                            </div>
                                        </div>
                                    </div>
                                </body>
                                </html>
                            </f:param>
                        </f:function>
                    </form>
                }
            }
        </div>
    </div>
</body>
</html>

@helper SearchSummary(ContentSearchViewModel vm, bool isProductTab, string tabTitle, IContentTab productTab)
{
    <div data-oc-controller="Product.SearchSummary" id="vueSearchSummary" data-context="@JsonConvert.SerializeObject(ProductSearchResults)" data-total="@vm.Total" v-cloak="true">
        <div class="container-md">
            @if (IsProductsCorrected() && isProductTab)
            {
                <h2>@Html.Localized("List-Search", "L_NoResultsFor", SearchRequestContext.SearchQuery)</h2>
                <p class="m-0">@Html.Localized("List-Search", "WeAreSorry", SearchRequestContext.SearchQuery, tabTitle)</p>
                @ShowButWeFindIn(vm.SuggestedTabs)
                <h1 class="mt-4">@(Html.Localized("List-Search", "L_SearchResultsCorrected", "{{totalCount}}", ProductSearchResults.CorrectedSearchTerms))</h1>
            }
            else
            {
                <h1 v-if="totalCount > 0"><strong>{{totalCount}}</strong> @Html.Localized("List-Search", "L_SearchResults", SearchRequestContext.SearchQuery)</h1>
                <h1 v-else="v-else">@Html.Localized("List-Search", "L_NoResultsFor", SearchRequestContext.SearchQuery)</h1>
                @Function("Composer.Search.Suggestions")
            }
        </div>

        @if (vm.Tabs.Count > 0)
        {
            <div class="container-fluid search-tabs bg-light  pt-2">
                <div class=" container">
                    <ul class="nav nav-tabs" role="tablist">
                        @foreach (var tab in vm.Tabs)
                        {
                            var classValue = tab.IsActive ? "active" : "";
                            <li role="presentation" class="nav-item">
                                <a href="@tab.TabUrl" class="nav-link @classValue">
                                    @tab.Title (@(productTab?.UrlTitle == tab.UrlTitle ? "{{ProductCount}}" : tab.Total.ToString()))
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
    </div>
}

@helper ShowButWeFindIn(List<ContentSearchTabViewModel> tabs)
{
    if (tabs == null || !tabs.Any()) { return; }
    <p>
        @Html.Localize("List-Search", "ButWeFind_Part1")
        @for (var i = 0; i < tabs.Count; i++)
        {
            var tab = tabs[i];
            <a href="@tab.TabUrl">@tab.Title (@tab.Total)</a>

            if (i < tabs.Count - 1)
            {
                <text>@Html.Localize("List-Search", "ButWeFind_Separator")</text>
            }
        }
        @Html.Localized("List-Search", "ButWeFind_Part2", SearchRequestContext.SearchQuery)
    </p>
}

@helper ShowButWeFindInTeaser(List<ContentSearchTabViewModel> tabs)
{
    if (tabs == null || !tabs.Any(t => t.SearchResults != null)) { return; }

    var teaserItemsCount = 3;
    <div class="content-tab-teaser">
        @foreach (var tab in tabs)
        {
            var resutls = tab.SearchResults?.Take(teaserItemsCount);
            if (resutls == null) { continue; }
            <div class="header">
                <h3 class="title d-inline-flex  mt-3">@Html.Localized("List-Search", "T_SearchResultsFoundIn", tab.Title, tab.Total)</h3>
                @if (tab.Total > teaserItemsCount)
                {
                    <a class="d-inline-flex  ml-4" href="@tab.TabUrl">@Html.Localized("List-Search", "L_SearchResultsSeeAll", tab.Title)</a>
                }
            </div>
            <div class="row mb-4">
                @foreach (var entry in resutls)
                {
                <div class="col-12 col-sm-4 col-md-4">
                    @Function("Composer.ContentSearch.SearchEntryItem", new { SearchResultEntry = entry })
                </div>
                }
            </div>
        }
    </div>
}

@helper ShowProductsSearchResults()
{
    if (ProductSearchResults.TotalCount == 0 && !IsProductFacetsSelected())
    {
        return;
    }
    <f:function name="Composer.Grids.SearchGrid">
        <f:param name="LeftPart">
            <html>
            <head>
            </head>
            <body>
                <f:function name="Composer.Search.SelectedFacets"></f:function>
                <f:function name="Composer.Search.Facets"></f:function>
            </body>
        </html>
    </f:param>
    <f:param name="RightPart">
        @Function("Composer.Search.BaseSearchResults", new { Results = ProductsSearchViewModel })
    </f:param>
</f:function>
}

@helper ShowContentSearchEntry(string searchEntry = "contentItem")
{
    <div class="card h-100">
        <img v-if="@(searchEntry).ImageUrl" class="card-img-top" v-bind:src="@(searchEntry).ImageUrl + '?h=200'" v-bind:alt="@(searchEntry).Title" />

        <div class="card-body">
            <a class="card-title" v-bind:href="@(searchEntry).DetailsUrl">{{@(searchEntry).Title}}</a>
            <p v-if="@(searchEntry).Description" class="card-text">{{@(searchEntry).Description}}</p>
        </div>
    </div>
}

@helper ShowFacetsCollapseBtn()
{
    <button type="button"
            class="btn  btn-outline-secondary btn-dropdown  w-100"
            data-toggle="collapse"
            data-target="#leftCol" aria-expanded="false">
        @Html.Localize("List-Search", "B_FilterBy")
        <span class="fa  fa-angle-down"></span>
    </button>
}
