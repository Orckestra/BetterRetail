@inherits Composer.Razor.ComposerRazorFunction
@using Orckestra.Composer.Search.Context;
@using Orckestra.Composer.Search.ViewModels;
@using Newtonsoft.Json

@functions {
    [FunctionParameter(Label = "", Help = "")]
    public BaseSearchViewModel Results { get; set; }

    [FunctionParameter(Label = "", Help = "", DefaultValue = true)]
    public bool ShowPagination { get; set; }
}
@{
    string vueId = "vueSearchResults" + Guid.NewGuid().ToString("N");
}

@helper SearchProduct(string entity)
{
    <div class="product-tile island-xl" data-qa="search-result">
        <a class="product-tile-media"
           v-bind:href="@(entity).Url"
           v-on:click="searchProductClick(@entity, index)">
            <img class="img-fluid"
                 v-bind:src="@(entity).ImageUrl" v-bind:alt="@(entity).FullDisplayName"
                 v-bind:onerror="`this.onerror=null; this.src='${@(entity).FallbackImageUrl}'`" />
        </a>

        <div class="product-tile-text">
            <div class="row">
                <div class="col-9 col-md-10">
                    <strong v-if="@(entity).Brand" class="text-uppercase product-tile-brand" data-qa="search-product-brand"
                            v-bind:title="@(entity).Brand">{{@(entity).Brand}}<br /></strong>
                    <a data-qa="search-product-title"
                       v-bind:href="@(entity).Url" v-bind:title="@(entity).FullDisplayName"
                       v-on:click="searchProductClick(@entity, index)">{{@(entity).DisplayName}}</a>
                </div>
                <div v-if="@(entity).IsRecurringOrderEligible" class="col-3 col-md-2 product-tile-recurring">
                    <img src="/UI.Package/Images/recurring.svg" class="recurring-icon"
                         alt="@Html.Localize("General", "L_RecurringProduct")"
                         title="@Html.Localize("General", "L_RecurringProduct")" />
                </div>
            </div>
        </div>

        <template v-if="@(entity).HasPriceRange">
            <template v-if="@(entity).IsOnSale">
                <div class="product-tile-special-price">
                    <small class="text-danger">@Html.Localize("List-Search", "L_PriceFrom")</small>
                </div>
                <div class="product-tile-price">
                    <span class="h4  text-danger">{{@(entity).DisplaySpecialPrice}}</span>
                </div>
            </template>
            <template v-else="v-else">
                <div class="product-tile-special-price">
                    <small>@Html.Localize("List-Search", "L_PriceFrom")</small>
                </div>
                <div class="product-tile-price">
                    <span class="h4" data-qa="search-product-price">{{@(entity).DisplayListPrice}}</span>
                </div>
            </template>
        </template>
        <template v-else="v-else">
            <template v-if="@(entity).IsOnSale">
                <div class="product-tile-special-price">
                    <del>{{@(entity).DisplayListPrice}}</del>
                </div>
                <div class="product-tile-price">
                    <span class="h4  text-danger">{{@(entity).DisplaySpecialPrice}}</span>
                </div>
            </template>
            <template v-else="v-else">
                <div class="product-tile-special-price">
                    <!--only used for proper spacing-->
                </div>
                <div class="product-tile-price">
                    <span class="h4" data-qa="search-product-price">{{@(entity).DisplayListPrice}}</span>
                </div>
            </template>
        </template>

        <button class="btn  btn-primary  text-uppercase"
                data-qa="search-buy-now"
                v-on:click="addToCart(@entity)"
                v-bind:disabled="!@(entity).IsAvailableToSell || @(entity).loading">
            {{@(entity).IsAvailableToSell ? '@Html.Localize("General", "B_AddToCartProductList")' : '@Html.Localize("General", "B_AddToCartProductListOOS")'}}
            <span v-if="@(entity).loading" class="loading-indicator  fa  fa-spin  fa-fw  fa-circle-o-notch"></span>
        </button>
    </div>
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0" xmlns:v-bind="v-bind" xmlns:v-on="v-on">
<head>
</head>
<body>
    <div data-oc-controller="Product.SearchResults"
         data-context="@JsonConvert.SerializeObject(Results, new Newtonsoft.Json.Converters.StringEnumConverter())"
         data-vueid="@vueId"
         id="@vueId"
         v-cloak="true"
         class="search-results">
        <div class="overlay" v-if="isLoading"></div>
        @if (ShowPagination)
        {
            <div class="row filters-row mb-4" v-if="TotalCount > 0">
                <div class="col-6 d-lg-none">
                    @FacetHelpers.FacetsModalCollapseBtn()
                </div>
                <div class="col-6">
                    @SearchHelpers.SortBy()
                </div>
                <div class="col-6 d-none d-lg-block">
                    @SearchHelpers.PaginationDropdown()
                </div>
            </div>
        }
        
        <template v-if="TotalCount > 0">
            <div class="row">
                <div v-for="(product, index) in SearchResults" class="col-6  col-md-4  col-xl-3" data-qa="search-results" v-bind:key="product.ProductId + product.VariantId">
                    @SearchProduct("product")
                </div>
            </div>
        </template>

        @if (ShowPagination)
        {
            <div class="row d-block pt-2" v-if="TotalCount > 0">
                @SearchHelpers.Pagination()
            </div>
        }
    </div>
</body>
</html>
