@inherits Composer.Razor.ComposerRazorFunction
@using Orckestra.Composer.Search.Context;
@using Orckestra.Composer.Search.ViewModels;
@using Newtonsoft.Json

@functions {
    [FunctionParameter(Label = "", Help = "")]
    public BaseSearchViewModel Results { get; set; }

    [FunctionParameter(Label = "", Help = "", DefaultValue = true)]
    public bool ShowPagination { get; set; }
}

@helper SearchProduct(string entity) {
    <div class="product-tile island-xl" data-qa="search-result">
        <a class="product-tile-media"
           v-bind:href="@(entity).Url"
           v-on:click="searchProductClick(@entity, index)">
            <img class="img-fluid"
                 v-bind:src="@(entity).ImageUrl" v-bind:alt="@(entity).FullDisplayName"
                 v-bind:onerror="'this.onerror=null; this.src=`${@(entity).FallbackImageUrl}`'" />
        </a>

        <div class="product-tile-text">
            <div class="row">
                <div class="col-9 col-md-10">
                    <strong v-if="@(entity).Brand" class="text-uppercase product-tile-brand" data-qa="search-product-brand"
                            v-bind:title="@(entity).Brand">{{@(entity).Brand}}<br /></strong>
                    <a data-qa="search-product-title"
                       v-bind:href="@(entity).Url" v-bind:title="@(entity).FullDisplayName"
                       v-on:click="searchProductClick(@entity, index)">{{@(entity).DisplayName}}</a>
                </div>
                <div v-if="@(entity).IsRecurringOrderEligible" class="col-3 col-md-2 product-tile-recurring">
                    <img src="/UI.Package/Images/recurring.svg" class="recurring-icon"
                         alt="@Html.Localize("General", "L_RecurringProduct")"
                         title="@Html.Localize("General", "L_RecurringProduct")" />
                </div>
            </div>
        </div>

        <template v-if="@(entity).HasPriceRange">
            <template v-if="@(entity).IsOnSale">
                <div class="product-tile-special-price">
                    <small class="text-danger">@Html.Localize("List-Search", "L_PriceFrom")</small>
                </div>
                <div class="product-tile-price">
                    <span class="h4  text-danger">{{@(entity).DisplaySpecialPrice}}</span>
                </div>
            </template>
            <template v-else="v-else">
                <div class="product-tile-special-price">
                    <small>@Html.Localize("List-Search", "L_PriceFrom")</small>
                </div>
                <div class="product-tile-price">
                    <span class="h4" data-qa="search-product-price">{{@(entity).DisplayListPrice}}</span>
                </div>
            </template>
        </template>
        <template v-else="v-else">
            <template v-if="@(entity).IsOnSale">
                <div class="product-tile-special-price">
                    <del>{{@(entity).DisplayListPrice}}</del>
                </div>
                <div class="product-tile-price">
                    <span class="h4  text-danger">{{@(entity).DisplaySpecialPrice}}</span>
                </div>
            </template>
            <template v-else="v-else">
                <div class="product-tile-special-price">
                    <!--only used for proper spacing-->
                </div>
                <div class="product-tile-price">
                    <span class="h4" data-qa="search-product-price">{{@(entity).DisplayListPrice}}</span>
                </div>
            </template>
        </template>

        <button class="btn  btn-primary  text-uppercase"
                data-qa="search-buy-now"
                v-on:click="addToCart(@entity)"
                v-bind:disabled="!@(entity).IsAvailableToSell">
            {{@(entity).IsAvailableToSell ? '@Html.Localize("General", "B_AddToCartProductList")' : '@Html.Localize("General", "B_AddToCartProductListOOS")'}}
            <span class="loading-indicator  fa  fa-spin  fa-fw  fa-circle-o-notch  d-none"></span>
        </button>
    </div>
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0" xmlns:v-bind="v-bind" xmlns:v-on="v-on">
<head>
</head>
<body>
    <div data-oc-controller="Product.SearchResults" data-context="@JsonConvert.SerializeObject(Results, new Newtonsoft.Json.Converters.StringEnumConverter())" id="vueSearchResults" v-cloak="true">
        @if (ShowPagination)
        {
            <div class="row filters-row mb-4">
                <div class="col-6 d-lg-none">
                    @FacetHelpers.FacetsModalCollapseBtn()
                </div>
                <div class="col-6">
                    <div class="dropdown sort-by" v-if="SelectedSortBy">
                        <span class="d-none d-lg-inline">@Html.Localize("List-Search", "L_Sorting")&#160;</span>
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-qa="search-sort-by-toggle"
                                data-toggle="dropdown" aria-expanded="true">
                            {{SelectedSortBy.DisplayName}}
                        </button>
                        <div class="dropdown-menu  dropdown-menu-sm-right  dropdown-menu-md-right" role="menu" data-qa="search-sort-by">
                            <a v-for="sortBy in AvailableSortBys"
                               class="dropdown-item"
                               v-on:click="sortingChanged(sortBy.Url)">
                                {{sortBy.DisplayName}}
                            </a>
                        </div>
                    </div>
                </div>
                <div class="col-6 d-none d-lg-block">
                    <div class="pagination-dropdown" v-if="Pagination">
                        <ul class="pagination m-0  align-items-center justify-content-end">
                            <li class="page-item previous" v-bind:class="{ disabled: !Pagination.PreviousPage.Url }">
                                <a class="page-link" v-bind:title="Pagination.PreviousPage.DisplayName" v-on:click="sortingChanged(Pagination.PreviousPage.Url)">
                                    <i class="fa fa-arrow-circle-left"></i>&#160;{{Pagination.PreviousPage.DisplayName}}
                                </a>
                            </li>

                            <li class="page-item mx-2">
                                <div class="dropdown" v-if="Pagination.CurrentPage">
                                    <button class="btn btn-outline-secondary  dropdown-toggle" type="button" data-qa="page-select-toggle"
                                            data-toggle="dropdown" aria-expanded="true">
                                        @Html.Localize("List-Search", "L_PageInDropDown")&#160;{{Pagination.CurrentPage.DisplayName}}
                                    </button>
                                    <div class="dropdown-menu dropdown-menu-sm-right dropdown-menu-md-right" role="menu" data-qa="page-select">
                                        <a class="dropdown-item" v-for="page in Pagination.Pages" v-on:click="sortingChanged(page.UrlPath)">
                                            @Html.Localize("List-Search", "L_PageInDropDown")&#160;{{page.DisplayName}}
                                        </a>
                                    </div>
                                </div>
                            </li>

                            <li class="page-item ">
                                <span class="d-flex-inline pt-2">
                                    &#160;@Html.Localized("List-Search", "L_PageOfTotalItems", "{{Pagination.TotalNumberOfPages}}")&#160;
                                </span>
                            </li>
                            <li class="page-item next ml-2" v-bind:class="{ disabled: !Pagination.NextPage.Url }">
                                <a class="page-link" v-bind:title="Pagination.NextPage.DisplayName" v-on:click="sortingChanged(Pagination.NextPage.Url)">
                                    {{Pagination.NextPage.DisplayName}}&#160;<i class="fa  fa-arrow-circle-right"></i>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        }

        <div class="products-search-results">
            <template v-if="TotalCount > 0">
                <div class="row">
                    <div v-for="(product, index) in SearchResults" class="col-6  col-md-4  col-xl-3" data-qa="search-results">
                        @SearchProduct("product")
                    </div>
                </div>

            </template>
        </div>

         @if (ShowPagination)
         {
            <div class="row d-block pt-2">
                <ul class="pager pagination" v-if="Pagination">
                    <li v-if="Pagination.PreviousPage" class="page-item previous mr-auto" v-bind:class="{ disabled: !Pagination.PreviousPage.Url }">
                        <a class="page-link" data-qa="search-pagination-previous" v-on:click="sortingChanged(Pagination.PreviousPage.Url)">
                            <span class="fa fa-arrow-circle-left"></span> {{Pagination.PreviousPage.DisplayName}}
                        </a>
                    </li>
                    <li v-if="Pagination.NextPage" class="page-item next" v-bind:class="{ disabled: !Pagination.NextPage.Url }">
                        <a class="page-link" data-qa="search-pagination-next" v-on:click="sortingChanged(Pagination.NextPage.Url)">
                            {{Pagination.NextPage.DisplayName}} <span class="fa fa-arrow-circle-right"></span>
                        </a>
                    </li>
                </ul>
            </div>
         }
    </div>
    <div>
        @Partial("ProductQuickViewDataBlade", Results)
    </div>
</body>
</html>
