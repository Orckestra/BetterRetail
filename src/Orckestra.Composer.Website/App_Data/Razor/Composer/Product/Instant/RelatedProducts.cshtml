@using Orckestra.Composer.CompositeC1.DataTypes
@using Orckestra.Composer.Product.Services
@using Orckestra.Composer.Product.Parameters
@inherits RazorFunction

@functions {
    public override string FunctionDescription
    {
        get { return "Displays products/variants related to the product displayed on the current product/variant details page.  First products which are related via merchandising relationship will be displayed and if none are available then displays product in the same default category"; }
    }

    public IRelatedProductViewService RelatedProductViewService { get; set; }
    public IComposerContext ComposerContext { get; set; }

    [FunctionParameter(Name = "merchandiseTypes", Label = "Products Merchandise Relationship Types to include", Help = "Specify the Merchandise Types ")]
    public string merchandiseTypes { get; set; }

    [FunctionParameter(Name = "headingText", Label = "Heading", DefaultValue = "You may also like", Help = "Displays the header of the related products block. The header must be short. Use text like \"You might also like\".")]
    public string headingText { get; set; }

    [FunctionParameter(Name = "displaySameCategoryProducts", Label = "Display products in the same category", DefaultValue = true, Help = "Specify if this block should display products in the same default category if no products are displayed based on specified relationship types.")]
    public bool displaySameCategoryProducts { get; set; }

    [FunctionParameter(Name = "maxItems", Label = "Number of maximum displayed products/variants", DefaultValue = 5, Help = "Specify the number of products/items displayed in this block. The maximum should be 15.")]
    public int maxItems { get; set; }

    [FunctionParameter(Name = "displayPrices", Label = "Display price on products", DefaultValue = true, Help = "Show the price on the products in this block.")]
    public bool displayPrices { get; set; }

    [FunctionParameter(Name = "displayAddToCart", Label = "Display \"Add to cart\" on products", DefaultValue = true, Help = "Show the \"Add to cart\" link on the products in this block.")]
    public bool displayAddToCart { get; set; }

    [FunctionParameter(Name = "backgroundStyle", Label = "Css Style", DefaultValue = null, Help = "Specify the style of this block")]
    public DataReference<CssStyle> backgroundStyle { get; set; }
}

@{
    string id = Request[nameof(id)];
    var param = new GetProductIdentifiersParam
    {
        CultureInfo = ComposerContext.CultureInfo,
        ProductId = id,
        Scope = ComposerContext.Scope,
        MerchandiseTypes = merchandiseTypes.Split(','),
        FallbackOnSameCategoriesProduct = displaySameCategoryProducts,
        MaxItems = maxItems
    };

    var relatedProductsViewModel = RelatedProductViewService.GetProductIdsAsync(param).Result;
}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0" xmlns:v-bind="v-bind" xmlns:v-on="v-on">
<head>
</head>
<body>
    <div data-oc-controller="Product.RelatedProducts"
         data-context="@relatedProductsViewModel.JsonContext">
        <div id="vueRelatedProducts" style="@backgroundStyle?.Data?.CssCode" v-cloak="true">
            @if (!string.IsNullOrEmpty(headingText))
            {
                @Function("Composer.SectionTitle", new {Title=@headingText, SubTitle=""} )
            }
            <div class="slick-carousel">
                <div class="js-slick-carousel" data-slick='{"slidesToShow": 4, "slidesToScroll": 1, "mobileCarousel": true}'>
                    <div v-for="(Product, index) in ExtendedRelatedProducts" v-bind:key="Product.ProductId">
                        @Function("Composer.Search.Products.ProductTileVue")
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
