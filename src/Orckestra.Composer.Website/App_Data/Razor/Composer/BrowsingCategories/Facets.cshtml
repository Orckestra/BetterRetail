@inherits RazorFunction
@using Orckestra.Composer.Search.Context;
@using Orckestra.Composer.Search
@using Orckestra.Composer.Search.Facets

@functions {
    public override string FunctionDescription
    {
        get { return "Search Facets for Category Page"; }
    }

    public IBrowseCategoryRequestContext BrowsingRequestContext { get; set; }
}
@{
    var categoryBrowsingViewModel = BrowsingRequestContext.GetViewModelAsync().Result;
    if (categoryBrowsingViewModel == null)
    {
        return;
    }

    var facets = categoryBrowsingViewModel.ProductSearchResults.Facets;
    if (facets == null || facets.Count == 0)
    {
        return;
    };

    var categoryFacetValuesTree = categoryBrowsingViewModel.CategoryFacetValuesTree;
    var isCategoryTreeView = categoryFacetValuesTree != null;

}

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.composite.net/ns/function/1.0">
<head>
</head>
<body>
    <div data-oc-controller="Product.FacetSearch" data-corrected-search-term="@categoryBrowsingViewModel.ProductSearchResults.CorrectedSearchTerms">
        <form name="searchFacets">
            @FacetHelpers.PromotedFacetValues(categoryBrowsingViewModel.ProductSearchResults.PromotedFacetValues)
            @if (isCategoryTreeView && categoryFacetValuesTree.ChildNodes.Count > 0)
            {
                var rootCategoryTreeItem = categoryFacetValuesTree.ChildNodes[0];
                <div class="card bg-light  mb-3  facets-card">
                    <div class="card-header">@Html.Localize("List-Search", "L_RefinerCategories")</div>
                    <div class="card-body">
                        <div class="mb-1">
                            <strong>@Html.Localize("General", "L_All") @rootCategoryTreeItem.Title (@rootCategoryTreeItem.Quantity)</strong>
                        </div>
                        @RenderCategoryTreeItems(rootCategoryTreeItem)
                    </div>
                </div>
            }
            @foreach (var facet in facets)
            {
                if (!facet.IsDisplayed || facet.FieldName.StartsWith(SearchConfiguration.CategoryFacetFiledNamePrefix))
                {
                    continue;
                }
                <div class="card  bg-light  mb-3  facets-card"
                     data-facetfieldname="@facet.FieldName"
                     data-facettype="@facet.FacetType"
                     data-min="@facet.StartValue"
                     data-max="@facet.EndValue"
                     data-step="@facet.GapSize"
                     data-max-label="@Html.Localize("List-Search", "L_RangeAll")">
                    <div class="card-header">@facet.Title</div>
                    <div class="card-body"
                         data-qa="search-refiner">
                        @FacetHelpers.RenderFacet(facet)
                    </div>
                </div>
            }
        </form>
    </div>
</body>
</html>

@helper RenderCategoryTreeItem(CategoryFacetValuesTreeNode item, CategoryFacetValuesTreeNode parentItem)
{
    if (string.IsNullOrWhiteSpace(item.CategoryUrl))
    {
        return;
    }

    var inputValue = item.Value;

    <div class="form-check mb-1">
        <input class="form-check-input"
               type="radio"
               id="id@(inputValue.GetHashCode())"
               value="@inputValue"
               checked="@(item.IsSelected)"
               data-type="@FacetType.SingleSelect"
               data-parentcategoryurl="@parentItem.CategoryUrl"
               data-categoryurl="@item.CategoryUrl"
               data-oc-click="categoryFacetChanged"
               disabled="@(!item.IsRemovable)" />
        <label class="form-check-label @(item.IsSelected ? "font-weight-bold": "")"
               for="id@(inputValue.GetHashCode())">
            @item.Title <span>(@item.Quantity)</span>
        </label>

        @RenderCategoryTreeItems(item)

    </div>
}

@helper RenderCategoryTreeItems(CategoryFacetValuesTreeNode item)
{
    if (item.ChildNodes != null)
    {
        var items = item.ChildNodes.Take(item.MaxCollapsedCount).ToList();
        var collapsedItems = item.ChildNodes
                      .Skip(item.MaxCollapsedCount)
                      .Take(item.MaxExpandedCount - item.MaxCollapsedCount)
                      .ToList();
        foreach (var subItem in items)
        {
            @RenderCategoryTreeItem(subItem, item)
        }
        if ((collapsedItems?.Count ?? 0) > 0)
        {
            <div id="onDemandFacets-@item.FieldName" class="collapse">
                @foreach (var subItem in collapsedItems)
                {
                    @RenderCategoryTreeItem(subItem, item)
                }
            </div>

            @FacetHelpers.ShowMoreLessButton(item.FieldName)
        }
    }


}