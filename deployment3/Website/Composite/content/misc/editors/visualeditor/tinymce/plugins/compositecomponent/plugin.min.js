/**
 * Composite plugin.
 */
new function () {

	var each = tinymce.each, Event = tinymce.dom.Event;

	tinymce.create("tinymce.plugins.CompositeComponentPlugin", {

		/**
		 * @type {tinymce.Editor}
		 */
		editor: null,

		/**
		 * @type {XPathResolver}
		 */
		resolver: null,

		/**
		 * Get info
		 */
		getInfo: function () {
			return {
				longname: "Composite Component Plugin",
				author: "Orckestra A/S",
				authorurl: "https://c1.orckestra.com/",
				infourl: null,
				version: tinymce.majorVersion + "." + tinymce.minorVersion
			};
		},

		/**
		 * @param {tinymce.Editor} ed
		 * @param {string} url
		 */
		init: function (ed, url) {

			this.editor = ed;

			this.resolver = new XPathResolver();
			this.resolver.setNamespacePrefixResolver({
				"f": "http://www.composite.net/ns/function/1.0"
			})

			var self = this;
		},

		/**
		 * @param {string} cmd
		 * @param {boolean} ui
		 * @param {string} value
		 */
		execCommand: function (cmd, ui, value) {

			var result = false;
			var self = this;
			var editor = this.editor;
			var editorBinding = editor.theme.editorBinding;

			if (cmd == "compositeInsertComponent") {
				this._insertComponent();
				editorBinding.checkForDirty();
				result = true;
			}
			return result;
		},

		/**
		 * Insert rendering.
		 */
		_insertComponent: function () {

			this.editor.theme.enableDialogMode();

			var self = this;

			var definition = new DialogViewDefinition({
				handle: "ComponentsDialog",
				isMutable: true,
				position: Dialog.MODAL,
				url: "${root}/content/dialogs/postback/postbackdialog.aspx",
				argument: {
					"url": "${root}/console/?TEMP-COMPONENTS&pageId=component-selector-shim&containerClasses={context:containerClasses}",
					"list": new List(),
					"method": "get"
				},
				width: 1350,
				height: 780,
				handler: {
					handleDialogResponse: function (response, result) {
						if (response == Dialog.RESPONSE_ACCEPT) {
							var componentDocument = self.parse(result.FunctionMarkup);
							var ffunction = self.resolver.resolve("/f:function", componentDocument);
							if (ffunction == null) {
								self._resolveParametersAndInsertHtml(componentDocument);
							} else {
								self._resolveParametersAndInsertFunction(ffunction);
							}
						} else {
							self._insertResult();
						}
					}
				}
			});
			StageBinding.presentViewDefinition(definition, this.editor.theme.editorBinding);
		},


		/**
		 * @param {Document} componentDocument
		 */
		_resolveParametersAndInsertHtml: function (componentDocument) {

			var self = this;

			var ffunction = this.resolver.resolve("//f:function", componentDocument);

			if (ffunction != null) {

				FunctionService.TryExecute(self.getMarkup(ffunction), function (functionExecutionResult) {
					if (functionExecutionResult.FunctionCallExecutable) {
						self._insertImagTagAndContinue(ffunction, self.getMarkup(ffunction), componentDocument);
					} else {
						self._launchUpdateDialog(ffunction, {
							handleDialogResponse: function (response, result) {
								if (response == Dialog.RESPONSE_ACCEPT) {
									self._insertImagTagAndContinue(ffunction, result, componentDocument);
								} else {
									self._insertResult();
								}
							}
						});
					}
				});

			} else {
				self._insertResult(self.getMarkup(componentDocument.lastChild));
			}
		},


		/**
		 * @param {XMLElement} ffunction
		 */
		_resolveParametersAndInsertFunction: function (ffunction) {

			var self = this;

			FunctionService.TryExecute(self.getMarkup(ffunction), function (functionExecutionResult) {
				if (functionExecutionResult.FunctionParamsExist) {
					self._launchUpdateDialog(ffunction, {
						handleDialogResponse: function (response, result) {
							if (response == Dialog.RESPONSE_ACCEPT) {
								FunctionService.TryExecute(result, function (innerFunctionExecutionResult) {
									if (innerFunctionExecutionResult.FunctionCallExecutable) {
										XhtmlTransformationsService.StructuredContentToTinyContent(innerFunctionExecutionResult.FunctionResult, function (content) {
											self._insertResult(content.XhtmlFragment);
										})
									} else {
										self._insertResult();
									}
								});
							} else {
								self._insertResult();
							}
						}
					});
				} else {
					if (functionExecutionResult.FunctionCallExecutable) {
						self._insertResult(functionExecutionResult.FunctionResult);
					}
				}
			});
		},

		_insertImagTagAndContinue: function (ffunction, functionmarkup, componentDocument) {

			var self = this;

			var functionhtml = self.editor.theme.editorBinding.getImageTagForFunctionCall(functionmarkup);
			if (ffunction.parentNode == componentDocument) {
				self._insertResult(functionhtml);
			} else {

				if (ffunction.outerHTML) {
					ffunction.outerHTML = functionhtml;
				} else {
					var imgfunction = self.parse(functionhtml);
					ffunction.parentNode.replaceChild(imgfunction.lastChild, ffunction);
				}
				self._resolveParametersAndInsertHtml(componentDocument);
			}
		},

		_insertResult: function (html) {

			this.editor.theme.disableDialogMode();
			if (html) {
				this.editor.execCommand("mceInsertRawHTML", true, html);
			}
		},

		/**
		 * Launch update dialog.
		 * @param {XmlElement} ffunction
		 * @param {DialogHandler} dialogHandler
		 */
		_launchUpdateDialog: function (ffunction, dialogHandler) {

			EditorBinding.invokeFunctionEditorDialog(this.getMarkup(ffunction), dialogHandler, "Composite.Core.Xml.XhtmlDocument, Composite", this.editor.theme.editorBinding)
		},

		/**
		* Parse XML string into DOM document.
		* @param {String} markup
		* @return {XmlDocument}
		*/
		parse: function (markup) {

			var result = null;
			if (window.DOMParser != null && window.XPathResult != null) {
				result = new DOMParser().parseFromString(markup, 'text/xml');
			} else {
				result = new ActiveXObject('Msxml2.DOMDocument.3.0');
				result.setProperty('SelectionLanguage', 'XPath');
				result.loadXML(markup);
			}
			return result;
		},

		/**
		 * @param {XMLElement} element
		 */
		getMarkup: function(element) {
			return element.xml || element.outerHTML; // IE11 || Others browser
		}

	});

	// Register plugin
	tinymce.PluginManager.add("compositecomponent", tinymce.plugins.CompositeComponentPlugin);
};
