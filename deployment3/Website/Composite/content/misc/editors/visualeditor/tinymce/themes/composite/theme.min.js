new function () {
	
	/**
	 * Node change handlers.
	 * @type {List<IWysiwygEditorNodeChangeHandler>}
	 */
	var nodeChangeHandlers = new List ();
	
	/**
	 * Content change handlers.
	 * @type {List<IWysiwygEditorContentChangeHandler>}
	 */
	var contentChangeHandlers = new List ();

	/**
	 * EnterKey handlers.
	 * @type {List<IWysiwygEditorEnterKeyHandler>}
	 */
	var enterKeyHandlers = new List();

	/*
	 * Shortcut.
	 */
	var DOM = tinymce.DOM;
	
	/**
	 * Format list.
	 * @see {VisualEditor.js}
	 * @type {List<FormatGroup>}
	 */
	this.formatGroups = new List (),
	
	/**
	 * Info
	 */
	this.getInfo = function() {
		return {
			longname : 'Composite theme',
			author : 'Orckestra A/S',
			authorurl : 'https://c1.orckestra.com/',
			version : tinymce.majorVersion + "." + tinymce.minorVersion
		}
	}

	/*
	 * This would be the actual theme.
	 */
	tinymce.create ( "tinymce.themes.CompositeTheme", {
		
		/**
		 * @type {VisualEditorBinding}
		 */
		editorBinding : null,
		
		/**
		 * The TinyMCE engine.
		 * @type {TinyMCE_Engine} 
		 */
		tinyEngine : null,
		
		/**
		 * The TinyMCE instance.
		 * @type {tinymce.Editor}
		 */
		tinyInstance : null,
		
		/**
		 * Invoked by the VisualEditorBinding.
		 * @param {VisualEditorBinding} editor
		 * @param {TinyMCE_Engine} engine
		 * @param {tinymce.Editor} instance
		 */
		initC1 : function ( binding, engine, instance ) {
			
			this.editorBinding = binding;
			this.tinyEngine = engine;
			this.tinyInstance = instance;
		},
		
		/**
		 * @param {IWysiwygEditorNodeChangeHandler} handler
		 */
		registerNodeChangeHandler : function ( handler ) {
			if ( handler && handler.handleNodeChange != null ) {
				nodeChangeHandlers.add ( handler );
			}
		},
		
		/**
		 * @param {IWysiwygEditorContentChangeHandler} handler
		 */
		registerContentChangeHandler : function ( handler ) {
			if ( handler && handler.handleContentChange != null ) {
				contentChangeHandlers.add ( handler );
			}
		},
		
		/**
		 * @param {IWysiwygEditorEnterKeyHandler} handler
		 */
		registerEnterKeyHandler: function (handler) {
			if (handler && handler.handleEnterKey != null) {
				enterKeyHandlers.add(handler);
			}
		},
		
		/*
		 * Handle Enter key.
		 */
		handleEnterKey: function (e) {
				if (e.keyCode == 13 && enterKeyHandlers.hasEntries()) {
					enterKeyHandlers.each(function (handler) {
						handler.handleEnterKey(e);
					});
					return false;
				}
		},

		/**
		 * Init.
		 */
		init : function ( ed, url ) {
		
			var t = this;
			t.editor = ed;
			
			ed.on('Init', function () {
				
				/*
				 * Register node change handler.
				 */
				ed.on('NodeChange',
					function(e) {
						if (e.element != null) {
							var node = e.element.getAttribute && e.element.getAttribute('data-mce-bogus') ? e.element.parentNode : e.element;
							if (nodeChangeHandlers.hasEntries()) {
								nodeChangeHandlers.each(function(handler) {
									handler.handleNodeChange(node);
								});
							}
						}
					});
				
				/*
				 * Register content change handler.
				 */
				ed.on('Change',
					function ( e ) {
						if ( contentChangeHandlers.hasEntries ()) {
							contentChangeHandlers.each ( function ( handler ) {
								handler.handleContentChange ();
							});
						}
					});
				


			});
		},
		
		/**
		 * @param {what?} o
		 */
		renderUI : function(o) {
			var t = this, n = o.targetNode, ic, tb, ed = t.editor, cf = ed.controlManager;
			
			ed.contentCSS.push(tinymce.baseURL + '/skins/lightgray/content.min.css');

			ic = n = DOM.insertAfter(DOM.create('div', { id: ed.id + '_container' }), n);

			return {
				iframeContainer : ic,
				editorContainer : ed.id + '_container',
				sizeContainer : null,
				deltaHeight : -20
			};
		},
		
		/**
		 * Enable dialog mode.
		 */
		enableDialogMode : function () {
			
			this.editorBinding.enableDialogMode ();
		},
		
		/**
		 * Disable dialog mode.
		 */
		disableDialogMode : function () {
			
			this.editorBinding.disableDialogMode ();
			
		}
	});

	tinymce.ThemeManager.add ( "composite", tinymce.themes.CompositeTheme );
}