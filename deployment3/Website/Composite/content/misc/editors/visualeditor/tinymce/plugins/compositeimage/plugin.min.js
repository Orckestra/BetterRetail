/**
* Composite image plugin.
*/
new function () {

	var URL_IMAGETREESELECTOR = "${tiny}/plugins/compositeimage/image.aspx";
	var UPLOAD_SERVICE_URL = Resolver.resolve("${root}/services/Media/Upload.ashx");

	tinymce.create("tinymce.plugins.CompositeImagePlugin", {

		/**
		* @type {tinymce.Editor}
		*/
		editor: null,

		/**
		* Hacking a bug where explorer does not recognize  
		* double-click on a newly inserted image...
		*/
		_img: null,

		/**
		* Get info
		*/
		getInfo: function () {
			return {
				longname: "Composite Image Plugin",
				author: "Orckestra A/S",
				authorurl: "https://c1.orckestra.com/",
				infourl: null,
				version: tinymce.majorVersion + "." + tinymce.minorVersion
			};
		},

		/**
		* @param {tinymce.Editor} ed
		* @param {string} url
		*/
		init: function (ed, url) {

			this.editor = ed;

			var self = this;
			ed.on('DblClick', function (e) {
				if (VisualEditorBinding.isImageElement(e.target)) {
					self._img = e.target;
					self.execCommand("compositeInsertImage", true, "update");
					self._img = null;
				}
			});

			if (Client.isExplorer || Client.isExplorer11) {
				ed.on('dragover', function (event) {
					event.stopPropagation();
					event.preventDefault();
				});
			}

			ed.on('drop', function (event) {
				if (event.dataTransfer && event.dataTransfer.files && event.dataTransfer.files.length > 0) {

					event.stopPropagation();
					event.preventDefault();

					ed.theme.enableDialogMode();

					var bookmark = null;

					if (ed.dom.doc.caretPositionFromPoint) { // standard way
						var pos = ed.dom.doc.caretPositionFromPoint(event.clientX, event.clientY);
						range = ed.dom.doc.createRange();
						range.setStart(pos.offsetNode, pos.offset);
						ed.selection.setRng(range);
						ed.selection.collapse();
					} else if (ed.dom.doc.caretRangeFromPoint) { // Chrome
						range = ed.dom.doc.caretRangeFromPoint(event.clientX, event.clientY);
						range.collapse();
						ed.selection.setRng(range);
					} else if (ed.dom.doc.body.createTextRange) { // Internet Explorer
						try{
							var range = ed.dom.doc.body.createTextRange();
							range.moveToPoint(event.clientX, event.clientY);
							ed.selection.setRng(range);
						}catch(e){ }
						bookmark = ed.selection.getBookmark(true);
					}

					var def = ViewDefinitions["Composite.Management.MediaWritableFolderSelectorDialog"];

					var files = event.dataTransfer.files;
					def.handler = {
						handleDialogResponse: function (response, result) {
							if (bookmark) ed.selection.moveToBookmark(bookmark);
							if (response == Dialog.RESPONSE_ACCEPT) {
								var folder = result.getFirst();
								var content = "";
								for (var i = 0; i < files.length; i++) {
									var file = files[i];
									var request = new XMLHttpRequest();
									request.open("post", UPLOAD_SERVICE_URL, false);
									request.setRequestHeader("X-Requested-With", "XMLHttpRequest");
									request.setRequestHeader("X-FileName", file.name);
									request.setRequestHeader("X-Folder", folder);
									request.send(file);
									content += request.responseText;
								}
								ed.execCommand("mceInsertContent", false, content);
								// save last selected folder
								def.argument.selectedToken = folder;
							}
						}
					}
					Dialog.invokeDefinition(def);
				}
			});
		},

		/**
		* @param {string} cmd
		* @param {boolean} ui
		* @param {string} value
		*/
		execCommand: function (cmd, ui, value) {

			var result = false;
			var self = this;
			var editor = this.editor;
			var editorBinding = editor.theme.editorBinding;

			if (cmd == "compositeInsertImage") {

				var img = null;
				if (this._img != null) {
					img = this._img;
				} else {
					img = self.editor.selection.getNode();
				}
				if (img.nodeName.toLowerCase() != "img") {
					//Fix p->img
					var imgs = img.getElementsByTagName("img");
					if (imgs.length > 0) {
						img = imgs[0];
					}
					else {
						img = null;
					}
				}

				this.editor.theme.enableDialogMode();

				var self = this;
				var handler = {
					handleDialogResponse: function (response, result) {

						self.editor.theme.disableDialogMode();


						if (response == Dialog.RESPONSE_ACCEPT) {

							var src = result.get("src");

							if (src && src.indexOf("~") == 0) {
								src = "../../../../.." + src.substring(1);
							}

							var mediaUrl = new Uri(src);

							if (mediaUrl.isMedia) {
								var maxwidth = 0;
								var maxheight = 0;
								if (result.has("maxwidth"))
									maxwidth = parseInt(result.get("maxwidth"));
								if (result.has("maxheight"))
									maxheight = parseInt(result.get("maxheight"));
								if (maxwidth > 0)
									mediaUrl.setParam("mw", maxwidth);
								if (maxheight > 0)
									mediaUrl.setParam("mh", maxheight);


								src = mediaUrl.toString();
							}

							switch (value) {

								case "insert":

									var html = '<img';
									html += makeAttrib('id', result.get("id"));
									html += makeAttrib('class', result.get("classname"));
									html += makeAttrib('src', src);
									html += makeAttrib('alt', result.get("alt"));
									html += makeAttrib('title', result.get("title"));
									html += '/>';

									var inst = tinyMCE.activeEditor;
									inst.execCommand("mceInsertContent", false, html);
									break;

								case "update":

									if (src != null) {
										img.src = src;
									} else {
										img.src = "";
										img.removeAttribute("src");
									}
									if (result.get("alt") != null) {
										img.alt = result.get("alt");
									} else {
										img.alt = "";
									}
									if (result.get("title") != null) {
										img.title = result.get("title");
									} else {
										img.title = "";
										img.removeAttribute("title");
									}
									if (result.get("id") != null) {
										img.id = result.get("id");
									} else {
										img.id = "";
										img.removeAttribute("id");
									}
									if (result.get("classname") != null) {
										img.className = result.get("classname");
										img.setAttribute("class", result.get("classname"));
									} else {
										img.className = "";
										img.removeAttribute("class");
									}
									//Remove tiny_mce_attribute
									img.removeAttribute("data-mce-src");
									break;
							}

							editorBinding.checkForDirty();
						}
					}
				};

				var arg = {
					tinyAction: value,
					tinyWindow: window,
					tinyElement: img,
					tinyEngine: tinymce,
					tinyInstance: this.editor,
					tinyTheme: this.editor.theme,
					editorBinding: this.editor.theme.editorBinding
				}

				Dialog.invokeModal(URL_IMAGETREESELECTOR, handler, arg);
				result = true;
			}

			return result;
		}
	});

	// Register plugin
	tinymce.PluginManager.add("compositeimage", tinymce.plugins.CompositeImagePlugin);
};