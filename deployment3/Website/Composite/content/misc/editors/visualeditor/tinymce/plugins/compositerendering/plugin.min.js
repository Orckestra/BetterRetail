/**
 * Composite plugin.
 */
new function () {

	var each = tinymce.each, Event = tinymce.dom.Event;

	function functionImageOnMouseMove(event) {
		if (window.event) {
			event = window.event;
		}

		var img = event.currentTarget;
		var rect = img.getClientRects()[0];

		var mousex = rect.right - event.clientX;
		var mousey = event.clientY - rect.top;

		var hasHoverClass = img.className.indexOf(' editHover') != -1;

		if (mousex > 10 && mousey > 10 && mousex < 90 && mousey < 50) {
			if (!hasHoverClass) {
				img.className += ' editHover';
			}
		}
		else {
			if (hasHoverClass) {
				img.className = img.className.replace(' editHover', '');
			}
		}
	}

	function functionImageOnMouseLeave(event) {
		var img = event.currentTarget;

		if (img.className.indexOf(' editHover') != -1) {
			img.className = img.className.replace(' editHover', '');
		}
	}

	function functionImageOnLoad(img) {
	    img.className += " loaded";
        if (img.className.indexOf('editable') >= 0) {
            img.onmousemove = functionImageOnMouseMove;
            img.onmouseleave = functionImageOnMouseLeave;
        }
	}

	tinymce.create("tinymce.plugins.CompositeRenderingPlugin", {

		/**
		 * @type {tinymce.Editor}
		 */
		editor: null,

		/**
		 * Get info
		 */
		getInfo: function () {
			return {
				longname: "Composite Rendering Plugin",
				author: "Orckestra A/S",
				authorurl: "https://c1.orckestra.com/",
				infourl: null,
				version: tinymce.majorVersion + "." + tinymce.minorVersion
			};
		},

		/**
		 * @param {tinymce.Editor} ed
		 * @param {string} url
		 */
		init: function (ed, url) {
			var FUNCTION_INSERT_P_BEFORE = 'INSERT_P_BEFORE';
			var FUNCTION_INSERT_P_AFTER = 'INSERT_P_AFTER';

			var FUNCTION_UNKNOWN = 'UNKNOWN';
			var state = FUNCTION_UNKNOWN;
			var stateElement = null;

			function isEnter(e) {
				return e.keyCode === tinymce.util.VK.ENTER;
			}

			function isEnterWithoutShift(e) {
				return isEnter(e) && !e.shiftKey;
			}

			function getListKeyState(e) {
				if (isEnterWithoutShift(e) && isRequiredParagraphBefore()) {
					return FUNCTION_INSERT_P_BEFORE;
				} else {
					return FUNCTION_UNKNOWN;
				}
			}

			function cancelDefaultEvents(e) {
				if (state == FUNCTION_INSERT_P_BEFORE) {
					Event.cancel(e);
				}
			}

			function isRequiredParagraphBefore() {
				var focusElm = ed.selection.getStart();
				if (VisualEditorBinding.isFunctionElement(focusElm)) {
					if (focusElm.parentNode != null && focusElm.parentNode.localName.toLowerCase() == "body") {
						return true;
					}
				}
				return false;
			}

			this.editor = ed;

			var self = this;
			ed.on('DblClick', function (e) {
				if (VisualEditorBinding.isFunctionElement(e.target)) {
					self._img = e.target;
					self.execCommand("compositeInsertRendering", true, "update");
					self._img = null;
				}
			});

			ed.on('Click', function (event) {
				if (VisualEditorBinding.isFunctionElement(event.target)) {
					var img = event.target;
					var rect = img.getClientRects()[0];
					var mousex = rect.right - event.clientX;
					var mousey = event.clientY - rect.top;
					if (mousex < 81 && mousey < 40) {
						self._img = event.target;
						ed.selection.select(event.target);
						self.execCommand("compositeInsertRendering", true, "update");
						self._img = null;
						event.stopPropagation();
						event.preventDefault();
					}
				}
			});

			ed.on('SetContent', function (e) {
				var images = new List(self.editor.getBody().querySelectorAll("img.compositeFunctionWysiwygRepresentation"));
				images.each(
					function (img) {
						self.updateFunctionEvents(img);
					});
				self.flexParagraph();

				self.loadNextFunctionRepresentation();
				self.loadNextFunctionRepresentation();

			});

			ed.on('PastePostProcess', function (e) {
				var images = new List(e.node.querySelectorAll("img.compositeFunctionWysiwygRepresentation"));
				images.each(
					function (img) {
						var markup = self._decodeMarkup(img.getAttribute("data-markup"));
						var tmp = document.createElement('div');
						tmp.innerHTML = ed.theme.editorBinding.getImageTagForFunctionCall(markup);

						var newImage = tmp.firstElementChild;
						img.parentNode.replaceChild(newImage, img);
						self.updateFunctionEvents(img);

					});
			});

			ed.on('Change', function (e) {
				self.flexParagraph();
				self.updateAllCssPath();
			});


			//Insert paragraph before or above function on Enter
			ed.on('KeyUp', function (e) {
				if (state == FUNCTION_INSERT_P_BEFORE) {

					var range = ed.selection.getRng();
					var body = ed.getBody();
					p = body.ownerDocument.createElement("p");
					if (!Client.isExplorer) {
						p.innerHTML = '<br data-mce-bogus="1">';
					}
					range.insertNode(p);
					ed.selection.setCursorLocation(p, 0);
				}
			});

			ed.on('KeyDown', function (e) { state = getListKeyState(e); });
			ed.on('KeyDown', cancelDefaultEvents);
		},

		loadNextFunctionRepresentation: function() {
			var self = this;
			var image = self.editor.getBody().querySelector("img.compositeFunctionWysiwygRepresentation[data-src]");
			if (image) {
				image.src = image.getAttribute("data-src");
				image.removeAttribute("data-src");
			}
		},


		flexParagraph: function () {
			function isEmpty(node) {
				if (node.nodeType == 3) {
					return /^(\s|&nbsp;|&#160;)*$/.test(node.nodeValue);
				} else if (node.nodeType == 1) {
					return node.nodeName.toLowerCase() == "br";
				}
				return false;
			}

			var images = new List(this.editor.getBody().querySelectorAll("p>img.compositeFunctionWysiwygRepresentation"));
			images.each(
			function (img) {
				var p = img.parentNode;
				if (p.nodeName.toLowerCase() == "p") {
					var parent = p.parentNode;
					var node = p.firstChild;
					var list = new List();
					while (node) {
						if (node.nodeType == 1 && VisualEditorBinding.isFunctionElement(node)) {
							list.add(node);
						} else if (!isEmpty(node))
							return true;
						node = node.nextSibling;
					}
					if (list.hasEntries()) {
						list.reverse();
						list.reset();
						var last = list.getNext();
						parent.replaceChild(last, p);
						while (list.hasNext()) {
							last = parent.insertBefore(list.getNext(), last);
						}
					}
				}
			});
		},

		updateFunctionEvents: function (img) {
			if (img.naturalWidth > 0) {
				functionImageOnLoad(img);
			} else {
				var self = this;
				img.onload = function () {
					functionImageOnLoad(img);
					self.loadNextFunctionRepresentation();
				}
			}
		},

		updateAllCssPath: function () {
			var self = this;
			var images = new List(this.editor.getBody().querySelectorAll("img.compositeFunctionWysiwygRepresentation"));
			images.each(
				function (img) {
					self.updateCssPath(img);
				});
		},

		/**
		 * @param {Node} img
		 */
		updateCssPath: function (img) {
			var dom = this.editor.dom;
			var src = img.getAttribute("src");
			var url = new Uri(src);
			var currentCss = url.getParam("css");
			var calsulatedCss = this.getCssPath(img.parentNode);
			if (calsulatedCss && calsulatedCss != currentCss) {
				img.onload = function () {
					functionImageOnLoad(img);
					// dom.addClass(img, "loaded")
				}
				dom.removeClass(img, "loaded")
				url.setParam("css", calsulatedCss);
				img.src = url.toString();
			}
		},


		/**
		 * @param {Node} node
		 */
		getCssPath: function (node) {
			var result = "";
			if (node == null || node.nodeName.toLowerCase() == "body")
				return result;
			var parentPath = this.getCssPath(node.parentNode);
			if (parentPath)
				result += parentPath + " ";
			result += node.nodeName.toLowerCase();
			if (node.className)
				result += "." + node.className.replace(/\s+/, '.');
			return result;
		},


		/**
		 * @param {string} cmd
		 * @param {boolean} ui
		 * @param {string} value
		 */
		execCommand: function (cmd, ui, value) {

			var result = false;
			var self = this;
			var editor = this.editor;
			var editorBinding = editor.theme.editorBinding;

			if (cmd == "compositeInsertRendering") {
				if (value == "update") {
					this._updateRendering();
				} else {
					this._insertRendering();
				}
				editorBinding.checkForDirty();
				result = true;
			} else if (cmd == "CompositeUpdateLayout") {
				this._updateLayout(this.editor.theme.editorBinding.getEffectiveWidth());
			}
			return result;
		},

		/**
		 * Update layout.
		 */
		_updateLayout: function (width) {
			var self = this;
			var dom = this.editor.dom;
			var images = new List(this.editor.getBody().querySelectorAll("img.compositeFunctionWysiwygRepresentation"));
			images.each(
				function (img) {
					var url = new Uri(img.src);
					var prevWidth = url.getParam("width");
					if (prevWidth && prevWidth != width) {
						url.setParam("width", width);
						dom.removeClass(img, "loaded")
						img.src = url.toString();
					}
				});
		},

		/**
		 * Insert rendering.
		 */
		_insertRendering: function () {

			this.editor.theme.enableDialogMode();

			var def = ViewDefinitions["Composite.Management.XhtmlDocumentFunctionSelectorDialog"];

			var self = this;
			def.handler = {
				handleDialogResponse: function (response, result) {
					if (response == Dialog.RESPONSE_ACCEPT) {

						var functionName = result.getFirst();
						var functionInfo = top.XhtmlTransformationsService.GetFunctionInfo(functionName);

						if (functionInfo.RequireConfiguration) {
							self._launchUpdateDialog(functionInfo.FunctionMarkup);
						} else {
							self.editor.theme.disableDialogMode()
							self._insertImgTag(functionInfo.FunctionMarkup);
						}
					} else {
						self.editor.theme.disableDialogMode()
					}
				}
			}

			Dialog.invokeDefinition(def, this.editor.theme.editorBinding);
		},



		/**
		 * Update rendering.
		 */
		_updateRendering: function () {

			var img = null;
			if (this._img != null) {
				img = this._img;
			} else {
				img = this.editor.selection.getNode();
			}
			if (img.nodeName.toLowerCase() == "img") {
				var markup = this._decodeMarkup(img.getAttribute("data-markup")).replace();
				this._launchUpdateDialog(markup);
			}
		},

		/**
		 * Launch update dialog.
		 * @param {string} markup
		 */
		_launchUpdateDialog: function (markup) {

			this.editor.theme.enableDialogMode();

			var self = this;
			var dialogHandler = {
				handleDialogResponse: function (response, result) {

					self.editor.theme.disableDialogMode();

					if (response == Dialog.RESPONSE_ACCEPT) {
						self._insertImgTag(result);
					}
				}
			}

			EditorBinding.invokeFunctionEditorDialog(markup, dialogHandler, "Composite.Core.Xml.XhtmlDocument, Composite", this.editor.theme.editorBinding)
		},

		/**
		 * Insert image tag from function markup.
		 * @param {string} markup
		 */
		_insertImgTag: function (markup) {
			var body = this.editor.getBody();
			var scrollTop = body.scrollTop;
			
			if (markup != "") {
				var html = this.editor.theme.editorBinding.getImageTagForFunctionCall(markup);
				this.editor.execCommand("mceInsertRawHTML", true, html);
			} else {
				this.editor.execCommand("mceInsertRawHTML", true, "");
			}

			if (scrollTop != body.scrollTop)
			{
				body.scrollTop = scrollTop;
			}
			this.editor.theme.editorBinding.checkForDirty();
		},

		_decodeMarkup: function (markup) {
			if (markup.indexOf('<') === 0) {
				return markup;
			}
			return decodeURIComponent(markup);
		}


	});

	// Register plugin
	tinymce.PluginManager.add("compositerendering", tinymce.plugins.CompositeRenderingPlugin);
};
